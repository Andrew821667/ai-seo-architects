#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤ —Å —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–º–∏ –±–∞–∑–∞–º–∏ –∑–Ω–∞–Ω–∏–π
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö 14 –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
"""

import os
import sys
import time
from datetime import datetime
from typing import Dict, Any, List

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from mock_data_provider import MockDataProvider
from knowledge.knowledge_manager import knowledge_manager

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
from agents.executive.chief_seo_strategist import ChiefSEOStrategistAgent
from agents.executive.business_development_director import BusinessDevelopmentDirectorAgent
from agents.management.task_coordination import TaskCoordinationAgent
from agents.management.sales_operations_manager import SalesOperationsManagerAgent
from agents.management.technical_seo_operations_manager import TechnicalSEOOperationsManagerAgent
from agents.management.client_success_manager import ClientSuccessManagerAgent
from agents.operational.lead_qualification import LeadQualificationAgent
from agents.operational.sales_conversation import SalesConversationAgent
from agents.operational.proposal_generation import ProposalGenerationAgent
from agents.operational.technical_seo_auditor import TechnicalSEOAuditorAgent
from agents.operational.content_strategy import ContentStrategyAgent
from agents.operational.link_building import LinkBuildingAgent
from agents.operational.competitive_analysis import CompetitiveAnalysisAgent
from agents.operational.reporting import ReportingAgent


class RussianAgentsTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
    
    def __init__(self):
        self.results = {}
        self.mock_provider = MockDataProvider()
        self.agents = {}
        self.test_queries = {
            'russian_general': [
                "–ö–∞–∫–∏–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–æ–ª–∏ –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ —É –∞–≥–µ–Ω—Ç–∞?",
                "–û–ø–∏—à–∏—Ç–µ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ –≤ SEO",
                "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö —Ä–∞–±–æ—Ç—ã —Å —Ä–æ—Å—Å–∏–π—Å–∫–∏–º —Ä—ã–Ω–∫–æ–º"
            ],
            'agent_specific': {}
        }
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∞–≥–µ–Ω—Ç–∞
        self.test_queries['agent_specific'] = {
            'lead_qualification': [
                "–ö–∞–∫ –ø—Ä–∏–º–µ–Ω—è—Ç—å BANT –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—é –¥–ª—è –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ª–∏–¥–æ–≤?",
                "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ machine learning –≤ scoring –ª–∏–¥–æ–≤",
                "–ö–∞–∫–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏ conversation intelligence –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è?"
            ],
            'sales_conversation': [
                "–û–ø–∏—à–∏—Ç–µ SPIN selling –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—é",
                "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤?", 
                "–ö–∞–∫–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è?"
            ],
            'proposal_generation': [
                "–ö–∞–∫ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å value-based pricing —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏?",
                "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ ROI –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö",
                "–ö–∞–∫–∏–µ persuasive writing —Ç–µ—Ö–Ω–∏–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã?"
            ],
            'technical_seo_auditor': [
                "–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∞—É–¥–∏—Ç–∞ Core Web Vitals",
                "–ö–∞–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∞—É–ª–∏–Ω–≥ –∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é?",
                "–ö–∞–∫–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–µ–±-—Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –≤–∞–∂–Ω—ã –¥–ª—è SEO?"
            ],
            'technical_seo_operations_manager': [
                "–ö–∞–∫ —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–º–∞–Ω–¥–æ–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö SEO —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤?",
                "–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
                "–ö–∞–∫–∏–µ KPI –≤–∞–∂–Ω—ã –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ SEO?"
            ]
        }
    
    def initialize_agents(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        print("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤ —Å —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–º–∏ –±–∞–∑–∞–º–∏ –∑–Ω–∞–Ω–∏–π...")
        
        agent_configs = {
            # Executive level
            'chief_seo_strategist': {
                'class': ChiefSEOStrategistAgent,
                'level': 'executive'
            },
            'business_development_director': {
                'class': BusinessDevelopmentDirectorAgent,
                'level': 'executive'
            },
            
            # Management level
            'task_coordination': {
                'class': TaskCoordinationAgent,
                'level': 'management'
            },
            'sales_operations_manager': {
                'class': SalesOperationsManagerAgent,
                'level': 'management'
            },
            'technical_seo_operations_manager': {
                'class': TechnicalSEOOperationsManagerAgent,
                'level': 'management'
            },
            'client_success_manager': {
                'class': ClientSuccessManagerAgent,
                'level': 'management'
            },
            
            # Operational level
            'lead_qualification': {
                'class': LeadQualificationAgent,
                'level': 'operational'
            },
            'sales_conversation': {
                'class': SalesConversationAgent,
                'level': 'operational'
            },
            'proposal_generation': {
                'class': ProposalGenerationAgent,
                'level': 'operational'
            },
            'technical_seo_auditor': {
                'class': TechnicalSEOAuditorAgent,
                'level': 'operational'
            },
            'content_strategy': {
                'class': ContentStrategyAgent,
                'level': 'operational'
            },
            'link_building': {
                'class': LinkBuildingAgent,
                'level': 'operational'
            },
            'competitive_analysis': {
                'class': CompetitiveAnalysisAgent,
                'level': 'operational'
            },
            'reporting': {
                'class': ReportingAgent,
                'level': 'operational'
            }
        }
        
        successful_init = 0
        
        for agent_name, config in agent_configs.items():
            try:
                # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                agent = config['class'](
                    data_provider=self.mock_provider,
                    agent_level=config['level'],  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
                    rag_enabled=True
                )
                
                self.agents[agent_name] = agent
                print(f"   ‚úÖ {agent_name} ({config['level']})")
                successful_init += 1
                
            except Exception as e:
                print(f"   ‚ùå {agent_name}: {e}")
                self.results[agent_name] = {
                    'status': 'initialization_failed',
                    'error': str(e)
                }
        
        print(f"\nüìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∞–≥–µ–Ω—Ç–æ–≤: {successful_init}/{len(agent_configs)}")
        return successful_init > 0
    
    def test_agent_knowledge_access(self, agent_name: str) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–Ω–∞–Ω–∏—è–º –∞–≥–µ–Ω—Ç–∞"""
        if agent_name not in self.agents:
            return {'status': 'not_initialized'}
        
        agent = self.agents[agent_name]
        result = {
            'agent_name': agent_name,
            'knowledge_loaded': False,
            'russian_content': False,
            'search_results': [],
            'response_quality': 0.0
        }
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∑–Ω–∞–Ω–∏—è–º —á–µ—Ä–µ–∑ knowledge_manager
            if hasattr(agent, 'agent_level'):
                knowledge_context = knowledge_manager.get_knowledge_context(
                    agent_name, 
                    "—Ä–æ–ª—å –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–∞", 
                    k=2
                )
                
                if knowledge_context:
                    result['knowledge_loaded'] = True
                    result['russian_content'] = any(ord(char) > 127 for char in knowledge_context[:500])
                    result['context_length'] = len(knowledge_context)
                    
                    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –µ—Å–ª–∏ –µ—Å—Ç—å
                    if agent_name in self.test_queries['agent_specific']:
                        for query in self.test_queries['agent_specific'][agent_name][:2]:
                            context = knowledge_manager.get_knowledge_context(agent_name, query, k=1)
                            if context:
                                result['search_results'].append({
                                    'query': query,
                                    'found': True,
                                    'length': len(context),
                                    'has_russian': any(ord(char) > 127 for char in context[:200])
                                })
                
        except Exception as e:
            result['error'] = str(e)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞
        quality_score = 0.0
        if result['knowledge_loaded']:
            quality_score += 0.4
        if result['russian_content']:
            quality_score += 0.4
        if result['search_results']:
            search_success_rate = sum(1 for r in result['search_results'] if r['found']) / len(result['search_results'])
            quality_score += 0.2 * search_success_rate
        
        result['response_quality'] = quality_score
        
        return result
    
    def test_agent_task_processing(self, agent_name: str) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á –∞–≥–µ–Ω—Ç–æ–º"""
        if agent_name not in self.agents:
            return {'status': 'not_initialized'}
        
        agent = self.agents[agent_name]
        result = {
            'agent_name': agent_name,
            'task_processed': False,
            'response_length': 0,
            'russian_response': False,
            'processing_time': 0.0,
            'error': None
        }
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
        test_tasks = {
            'lead_qualification': {
                'task': 'analyze_lead',
                'data': {
                    'company': '–û–û–û –†–æ—Å—Å–∏–π—Å–∫–∏–π –ë–∏–∑–Ω–µ—Å',
                    'industry': 'E-commerce',
                    'revenue': '50M RUB',
                    'employees': '50-100',
                    'contact': '–î–∏—Ä–µ–∫—Ç–æ—Ä –ø–æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É',
                    'inquiry': '–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å SEO –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞'
                }
            },
            'technical_seo_auditor': {
                'task': 'technical_audit',
                'data': {
                    'domain': 'example-shop.ru',
                    'audit_scope': 'comprehensive',
                    'focus_areas': ['Core Web Vitals', 'crawling', 'indexing', 'mobile']
                }
            },
            'sales_conversation': {
                'task': 'conversation_analysis',
                'data': {
                    'client_type': 'enterprise',
                    'stage': 'needs_assessment',
                    'concerns': ['budget', 'timeline', 'ROI'],
                    'industry': '—Ñ–∏–Ω—Ç–µ—Ö'
                }
            },
            'proposal_generation': {
                'task': 'generate_proposal',
                'data': {
                    'client': '–ë–∞–Ω–∫ –†–æ—Å—Å–∏–∏',
                    'services': ['Technical SEO', 'Content Strategy'],
                    'budget': '2M RUB',
                    'timeline': '6 months'
                }
            }
        }
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é –∑–∞–¥–∞—á—É –µ—Å–ª–∏ –Ω–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–π
        task_data = test_tasks.get(agent_name, {
            'task': 'analyze',
            'data': {'query': '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ç–µ–∫—É—â—É—é —Å–∏—Ç—É–∞—Ü–∏—é —Å SEO'}
        })
        
        try:
            start_time = time.time()
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É
            if hasattr(agent, 'process_task'):
                response = agent.process_task(task_data)
                
                if response:
                    result['task_processed'] = True
                    response_text = str(response)
                    result['response_length'] = len(response_text)
                    result['russian_response'] = any(ord(char) > 127 for char in response_text[:500])
            
            result['processing_time'] = time.time() - start_time
            
        except Exception as e:
            result['error'] = str(e)
        
        return result
    
    def run_comprehensive_test(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("üöÄ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–£–°–°–ö–û–Ø–ó–´–ß–ù–´–• –ê–ì–ï–ù–¢–û–í")
        print("=" * 70)
        print(f"üïí –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().isoformat()}")
        
        comprehensive_results = {
            'timestamp': datetime.now().isoformat(),
            'total_agents': 0,
            'initialized_agents': 0,
            'agents_with_knowledge': 0,
            'agents_with_russian': 0,
            'agents_processing_tasks': 0,
            'detailed_results': {},
            'summary': {}
        }
        
        # –≠—Ç–∞–ø 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤
        print("\nüîß –≠–¢–ê–ü 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤")
        print("-" * 50)
        
        if not self.initialize_agents():
            print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –∞–≥–µ–Ω—Ç—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            return comprehensive_results
        
        comprehensive_results['total_agents'] = len(self.agents)
        comprehensive_results['initialized_agents'] = len(self.agents)
        
        # –≠—Ç–∞–ø 2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–Ω–∞–Ω–∏—è–º
        print("\nüìö –≠–¢–ê–ü 2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–º –∑–Ω–∞–Ω–∏—è–º")
        print("-" * 50)
        
        knowledge_results = {}
        
        for agent_name in self.agents.keys():
            print(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞–Ω–∏–π {agent_name}...")
            
            knowledge_result = self.test_agent_knowledge_access(agent_name)
            knowledge_results[agent_name] = knowledge_result
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if knowledge_result.get('knowledge_loaded', False):
                comprehensive_results['agents_with_knowledge'] += 1
            
            if knowledge_result.get('russian_content', False):
                comprehensive_results['agents_with_russian'] += 1
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            quality = knowledge_result.get('response_quality', 0.0)
            if quality >= 0.8:
                status = "üèÜ –û—Ç–ª–∏—á–Ω–æ"
            elif quality >= 0.6:
                status = "‚úÖ –•–æ—Ä–æ—à–æ"
            elif quality >= 0.4:
                status = "‚ö†Ô∏è –£–¥–æ–≤–ª."
            else:
                status = "‚ùå –ü–ª–æ—Ö–æ"
            
            print(f"   {status} –ö–∞—á–µ—Å—Ç–≤–æ: {quality:.2f}")
        
        # –≠—Ç–∞–ø 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á
        print("\n‚öôÔ∏è –≠–¢–ê–ü 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á")
        print("-" * 50)
        
        task_results = {}
        
        for agent_name in list(self.agents.keys())[:5]:  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 5 –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –¥–µ–º–æ
            print(f"üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á {agent_name}...")
            
            task_result = self.test_agent_task_processing(agent_name)
            task_results[agent_name] = task_result
            
            if task_result.get('task_processed', False):
                comprehensive_results['agents_processing_tasks'] += 1
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if task_result.get('task_processed'):
                processing_time = task_result.get('processing_time', 0)
                russian_resp = "üá∑üá∫" if task_result.get('russian_response') else "üá∫üá∏"
                print(f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ {processing_time:.2f}—Å {russian_resp}")
            else:
                error = task_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {error}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        comprehensive_results['detailed_results'] = {
            'knowledge_tests': knowledge_results,
            'task_tests': task_results
        }
        
        # –≠—Ç–∞–ø 4: –ò—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
        print("\nüìä –≠–¢–ê–ü 4: –ò—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑")
        print("=" * 70)
        
        total = comprehensive_results['total_agents']
        init_success = (comprehensive_results['initialized_agents'] / total) * 100
        knowledge_success = (comprehensive_results['agents_with_knowledge'] / total) * 100
        russian_success = (comprehensive_results['agents_with_russian'] / total) * 100
        
        print(f"üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò:")
        print(f"   ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∞–≥–µ–Ω—Ç–æ–≤: {comprehensive_results['initialized_agents']}/{total} ({init_success:.1f}%)")
        print(f"   üìö –ê–≥–µ–Ω—Ç–æ–≤ —Å –∑–Ω–∞–Ω–∏—è–º–∏: {comprehensive_results['agents_with_knowledge']}/{total} ({knowledge_success:.1f}%)")
        print(f"   üá∑üá∫ –†—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤: {comprehensive_results['agents_with_russian']}/{total} ({russian_success:.1f}%)")
        print(f"   ‚öôÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏—Ö –∑–∞–¥–∞—á–∏: {comprehensive_results['agents_processing_tasks']}/{len(task_results)} (–¥–µ–º–æ)")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
        overall_score = (init_success + knowledge_success + russian_success) / 3
        
        if overall_score >= 90:
            grade = "A+"
            status = "üéâ –ü–†–ï–í–û–°–•–û–î–ù–û!"
            message = "–°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ production"
        elif overall_score >= 80:
            grade = "A"
            status = "‚úÖ –û–¢–õ–ò–ß–ù–û!"
            message = "–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"
        elif overall_score >= 70:
            grade = "B"
            status = "‚ö†Ô∏è –•–û–†–û–®–û"
            message = "–ï—Å—Ç—å –Ω–µ–±–æ–ª—å—à–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è"
        else:
            grade = "C"
            status = "‚ùå –¢–†–ï–ë–£–ï–¢–°–Ø –†–ê–ë–û–¢–ê"
            message = "–ï—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã"
        
        print(f"\nüèÜ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê:")
        print(f"   {status} –û—Ü–µ–Ω–∫–∞: {grade} ({overall_score:.1f}%)")
        print(f"   üí¨ {message}")
        
        comprehensive_results['summary'] = {
            'overall_score': overall_score,
            'grade': grade,
            'status': status,
            'message': message
        }
        
        print(f"\nüïí –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {datetime.now().isoformat()}")
        
        return comprehensive_results

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        tester = RussianAgentsTester()
        results = tester.run_comprehensive_test()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –∫–æ–¥ –µ—Å–ª–∏ –≤—Å—ë —Ö–æ—Ä–æ—à–æ
        if results['summary']['overall_score'] >= 80:
            sys.exit(0)
        else:
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\nüëã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()