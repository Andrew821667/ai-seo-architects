#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è enhanced –º–µ—Ç–æ–¥–æ–≤ —Å SEO AI Models
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö enhanced –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
"""

import asyncio
import sys
import time
from typing import Dict, Any
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞
from mock_data_provider import MockDataProvider
from core.data_providers.static_provider import StaticDataProvider
from agents.operational.technical_seo_auditor import TechnicalSEOAuditorAgent
from agents.operational.content_strategy import ContentStrategyAgent
from agents.operational.competitive_analysis import CompetitiveAnalysisAgent


async def test_static_provider_seo_ai_models():
    """–¢–µ—Å—Ç StaticDataProvider —Å SEO AI Models"""
    print("üß™ –¢–µ—Å—Ç 1: StaticDataProvider —Å SEO AI Models")
    
    try:
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        config = {
            "seo_ai_models_path": "./seo_ai_models",
            "mock_mode": False  # –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏
        }
        
        provider = StaticDataProvider(config)
        await asyncio.sleep(2)  # –í—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º health check
        health = await provider.health_check()
        print(f"   Health Status: {health.get('status', 'unknown')}")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è SEO –¥–∞–Ω–Ω—ã—Ö
        seo_data = await provider.get_seo_data("example.com")
        print(f"   SEO Data Source: {seo_data.data_source}")
        
        if provider.mock_mode:
            print("   ‚ö†Ô∏è  –†–∞–±–æ—Ç–∞–µ—Ç –≤ MOCK —Ä–µ–∂–∏–º–µ (SEO AI Models –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)")
            return True
        else:
            print("   ‚úÖ SEO AI Models –∞–∫—Ç–∏–≤–Ω–∞")
            return True
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


async def test_enhanced_technical_auditor():
    """–¢–µ—Å—Ç Enhanced Technical SEO Auditor"""
    print("üß™ –¢–µ—Å—Ç 2: Enhanced Technical SEO Auditor")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä (mock –∏–ª–∏ real)
        try:
            config = {"seo_ai_models_path": "./seo_ai_models", "mock_mode": False}
            provider = StaticDataProvider(config)
            await asyncio.sleep(1)
        except Exception:
            provider = MockDataProvider()
        
        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
        agent = TechnicalSEOAuditorAgent(data_provider=provider)
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        task_data = {
            "input_data": {
                "domain": "example.com",
                "task_type": "full_technical_audit",
                "enhanced": True
            }
        }
        
        start_time = time.time()
        result = await agent.process_task(task_data)
        execution_time = time.time() - start_time
        
        print(f"   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.2f}s")
        print(f"   Enhanced: {result.get('enhanced', False)}")
        print(f"   –ë–∞–∑–æ–≤—ã–π —Å–∫–æ—Ä: {result.get('audit_score', 'N/A')}")
        
        if 'enhanced_analysis' in result:
            enhanced = result['enhanced_analysis']
            print(f"   Enhanced –∏—Å—Ç–æ—á–Ω–∏–∫: {enhanced.get('enhancement_source', 'unknown')}")
            
        print("   ‚úÖ Enhanced Technical Auditor —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


async def test_enhanced_content_strategy():
    """–¢–µ—Å—Ç Enhanced Content Strategy"""
    print("üß™ –¢–µ—Å—Ç 3: Enhanced Content Strategy")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        try:
            config = {"seo_ai_models_path": "./seo_ai_models", "mock_mode": False}
            provider = StaticDataProvider(config)
            await asyncio.sleep(1)
        except Exception:
            provider = MockDataProvider()
        
        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ —Å enhancer
        agent = ContentStrategyAgent(data_provider=provider)
        
        # –î–æ–±–∞–≤–ª—è–µ–º enhancer –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
        if not hasattr(agent, 'enhancer'):
            from core.enhanced_methods import SEOAIModelsEnhancer
            agent.enhancer = SEOAIModelsEnhancer(provider)
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content_data = {
            "content": "This is a test SEO content about digital marketing strategies and best practices for online businesses.",
            "domain": "example.com",
            "keywords": ["seo", "digital marketing", "online business"]
        }
        
        # –¢–µ—Å—Ç enhanced –∞–Ω–∞–ª–∏–∑–∞
        if agent.enhancer:
            enhanced_result = await agent.enhancer.enhanced_content_strategy(content_data)
            print(f"   Enhanced –∏—Å—Ç–æ—á–Ω–∏–∫: {enhanced_result.get('enhancement_source', 'unknown')}")
            print(f"   E-E-A-T —Å–∫–æ—Ä: {enhanced_result.get('eeat_analysis', {}).get('overall_score', 'N/A')}")
            print("   ‚úÖ Enhanced Content Strategy —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("   ‚ö†Ô∏è  Enhancer –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


async def test_enhanced_competitive_analysis():
    """–¢–µ—Å—Ç Enhanced Competitive Analysis"""
    print("üß™ –¢–µ—Å—Ç 4: Enhanced Competitive Analysis")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        try:
            config = {"seo_ai_models_path": "./seo_ai_models", "mock_mode": False}
            provider = StaticDataProvider(config)
            await asyncio.sleep(1)
        except Exception:
            provider = MockDataProvider()
        
        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
        agent = CompetitiveAnalysisAgent(data_provider=provider)
        
        # –î–æ–±–∞–≤–ª—è–µ–º enhancer
        if not hasattr(agent, 'enhancer'):
            from core.enhanced_methods import SEOAIModelsEnhancer
            agent.enhancer = SEOAIModelsEnhancer(provider)
        
        # –¢–µ—Å—Ç enhanced –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        if agent.enhancer:
            enhanced_result = await agent.enhancer.enhanced_competitive_analysis(
                "example.com", 
                ["competitor1.com", "competitor2.com"]
            )
            print(f"   Enhanced –∏—Å—Ç–æ—á–Ω–∏–∫: {enhanced_result.get('enhancement_source', 'unknown')}")
            print(f"   –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {len(enhanced_result.get('competitor_analysis', []))}")
            print("   ‚úÖ Enhanced Competitive Analysis —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("   ‚ö†Ô∏è  Enhancer –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


async def test_performance_comparison():
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ mock vs enhanced"""
    print("üß™ –¢–µ—Å—Ç 5: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    
    try:
        # Mock –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        mock_provider = MockDataProvider()
        mock_agent = TechnicalSEOAuditorAgent(data_provider=mock_provider)
        
        task_data = {
            "input_data": {
                "domain": "example.com",
                "task_type": "full_technical_audit"
            }
        }
        
        # –¢–µ—Å—Ç mock
        start_time = time.time()
        mock_result = await mock_agent.process_task(task_data)
        mock_time = time.time() - start_time
        
        # Enhanced –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        try:
            config = {"seo_ai_models_path": "./seo_ai_models", "mock_mode": False}
            enhanced_provider = StaticDataProvider(config)
            await asyncio.sleep(1)
            enhanced_agent = TechnicalSEOAuditorAgent(data_provider=enhanced_provider)
            
            start_time = time.time()
            enhanced_result = await enhanced_agent.process_task(task_data)
            enhanced_time = time.time() - start_time
            
            print(f"   Mock –≤—Ä–µ–º—è: {mock_time:.3f}s")
            print(f"   Enhanced –≤—Ä–µ–º—è: {enhanced_time:.3f}s")
            print(f"   –†–∞–∑–Ω–∏—Ü–∞: {enhanced_time - mock_time:.3f}s")
            
        except Exception:
            print(f"   Mock –≤—Ä–µ–º—è: {mock_time:.3f}s")
            print("   Enhanced: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (fallback –∫ mock)")
        
        print("   ‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ Enhanced Integration Tests")
    print("=" * 50)
    
    tests = [
        ("StaticDataProvider + SEO AI Models", test_static_provider_seo_ai_models),
        ("Enhanced Technical Auditor", test_enhanced_technical_auditor),
        ("Enhanced Content Strategy", test_enhanced_content_strategy),
        ("Enhanced Competitive Analysis", test_enhanced_competitive_analysis),
        ("Performance Comparison", test_performance_comparison)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüìã {test_name}")
        try:
            if await test_func():
                passed += 1
            else:
                print(f"   ‚ùå {test_name} - –ù–ï–£–î–ê–ß–ê")
        except Exception as e:
            print(f"   ‚ùå {test_name} - –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
    
    print("\n" + "=" * 50)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ ENHANCED INTEGRATION TESTS")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤")
    print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed/total)*100:.1f}%")
    
    if passed == total:
        print("üéâ –í–°–ï ENHANCED –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ production —Å SEO AI Models")
    elif passed >= total * 0.8:
        print("üéØ –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ enhanced —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        print("‚ö†Ô∏è  –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å fallback –∫ mock —Ä–µ–∂–∏–º—É")
    else:
        print("‚ö†Ô∏è  –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å enhanced —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é")
        print("üé≠ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å mock —Ä–µ–∂–∏–º")
    
    return passed == total


if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)