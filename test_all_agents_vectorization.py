#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö 14 –∞–≥–µ–Ω—Ç–æ–≤ AI SEO Architects
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å FAISS –∏–Ω–¥–µ–∫—Å–æ–≤, —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ–∏—Å–∫–∞
"""

import os
import sys
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from knowledge.knowledge_manager import knowledge_manager
from core.config import config

def test_agent_vectorization(agent_name: str, agent_level: str):
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞"""
    print(f"\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {agent_name} ({agent_level})")
    print("-" * 60)
    
    result = {
        'agent_name': agent_name,
        'agent_level': agent_level,
        'status': 'unknown',
        'documents_count': 0,
        'faiss_active': False,
        'russian_percentage': 0.0,
        'search_quality_score': 0.0,
        'issues': []
    }
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–Ω–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞
        vector_store = knowledge_manager.load_agent_knowledge(agent_name, agent_level)
        
        if not vector_store:
            result['status'] = 'failed'
            result['issues'].append('Knowledge base not loaded')
            print("   ‚ùå –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            return result
        
        result['documents_count'] = len(vector_store.documents)
        result['faiss_active'] = vector_store.index is not None
        
        print(f"   üìÑ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {result['documents_count']}")
        print(f"   üîç FAISS –∏–Ω–¥–µ–∫—Å: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if result['faiss_active'] else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        russian_queries = [
            "—Ä–æ–ª—å –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–∞",
            "–æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–∏", 
            "—ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ –∑–Ω–∞–Ω–∏—è –∏ –Ω–∞–≤—ã–∫–∏",
            "—Ä–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—ã–Ω–æ–∫ SEO",
            "—Å—Ç—Ä–∞—Ç–µ–≥–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"
        ]
        
        russian_hits = 0
        total_searches = len(russian_queries)
        search_scores = []
        
        for query in russian_queries:
            try:
                search_results = vector_store.similarity_search(query, k=2)
                
                if search_results:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    content = search_results[0].page_content
                    has_cyrillic = any(ord(char) > 127 for char in content[:200])
                    
                    if has_cyrillic:
                        russian_hits += 1
                    
                    # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ–∏—Å–∫–∞ (–ø—Ä–æ—Å—Ç–∞—è –º–µ—Ç—Ä–∏–∫–∞)
                    relevance_keywords = ['–∞–≥–µ–Ω—Ç', 'SEO', '–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è', '—Å—Ç—Ä–∞—Ç–µ–≥–∏—è', '—Ä–æ–ª—å']
                    relevance_score = sum(1 for kw in relevance_keywords if kw.lower() in content.lower())
                    search_scores.append(relevance_score / len(relevance_keywords))
                    
            except Exception as e:
                result['issues'].append(f"Search error for '{query}': {str(e)}")
        
        result['russian_percentage'] = (russian_hits / total_searches) * 100
        result['search_quality_score'] = sum(search_scores) / len(search_scores) if search_scores else 0.0
        
        print(f"   üá∑üá∫ –†—É—Å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç: {result['russian_percentage']:.1f}%")
        print(f"   üìä –ö–∞—á–µ—Å—Ç–≤–æ –ø–æ–∏—Å–∫–∞: {result['search_quality_score']:.2f}/1.0")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        if result['documents_count'] == 0:
            result['status'] = 'no_documents'
        elif not result['faiss_active']:
            result['status'] = 'no_faiss'
            result['issues'].append('FAISS index not active')
        elif result['russian_percentage'] < 50:
            result['status'] = 'low_russian'
            result['issues'].append('Low Russian content percentage')
        elif result['russian_percentage'] >= 80 and result['search_quality_score'] >= 0.3:
            result['status'] = 'excellent'
        elif result['russian_percentage'] >= 60 and result['search_quality_score'] >= 0.2:
            result['status'] = 'good'
        else:
            result['status'] = 'needs_improvement'
        
        status_icons = {
            'excellent': 'üèÜ',
            'good': '‚úÖ', 
            'needs_improvement': '‚ö†Ô∏è',
            'low_russian': '‚ùå',
            'no_faiss': 'üîß',
            'no_documents': 'üìÅ'
        }
        
        print(f"   {status_icons.get(result['status'], '‚ùì')} –°—Ç–∞—Ç—É—Å: {result['status']}")
        
        if result['issues']:
            print(f"   ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã: {', '.join(result['issues'])}")
        
    except Exception as e:
        result['status'] = 'error'
        result['issues'].append(str(e))
        print(f"   ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    return result

def test_search_cross_agent():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–∂–∞–≥–µ–Ω—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∑–Ω–∞–Ω–∏–π"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–∂–∞–≥–µ–Ω—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∑–Ω–∞–Ω–∏–π...")
    print("-" * 60)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π
    test_scenarios = [
        {
            'query': 'BANT –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ª–∏–¥–æ–≤',
            'expected_agent': 'lead_qualification',
            'description': '–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è –ª–∏–¥–æ–≤'
        },
        {
            'query': 'Core Web Vitals –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è',
            'expected_agent': 'technical_seo_auditor',
            'description': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞—É–¥–∏—Ç'
        },
        {
            'query': '—Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π',
            'expected_agent': 'proposal_generation', 
            'description': '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π'
        },
        {
            'query': 'SPIN selling —Ç–µ—Ö–Ω–∏–∫–∏ –ø—Ä–æ–¥–∞–∂',
            'expected_agent': 'sales_conversation',
            'description': '–ü—Ä–æ–¥–∞–∂–Ω—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã'
        }
    ]
    
    cross_search_results = []
    
    for scenario in test_scenarios:
        try:
            # –ò—â–µ–º –∑–Ω–∞–Ω–∏—è –≤ —Ü–µ–ª–µ–≤–æ–º –∞–≥–µ–Ω—Ç–µ
            context = knowledge_manager.get_knowledge_context(
                scenario['expected_agent'], 
                scenario['query'], 
                k=2
            )
            
            found_relevant = len(context) > 100 and any(
                keyword in context.lower() 
                for keyword in scenario['query'].lower().split()[:2]
            )
            
            cross_search_results.append({
                'scenario': scenario['description'],
                'agent': scenario['expected_agent'],
                'query': scenario['query'],
                'found_relevant': found_relevant,
                'context_length': len(context)
            })
            
            status = "‚úÖ" if found_relevant else "‚ùå"
            print(f"   {status} {scenario['description']}: {scenario['expected_agent']}")
            
        except Exception as e:
            cross_search_results.append({
                'scenario': scenario['description'],
                'agent': scenario['expected_agent'], 
                'query': scenario['query'],
                'found_relevant': False,
                'error': str(e)
            })
            print(f"   ‚ùå {scenario['description']}: –û—à–∏–±–∫–∞ - {e}")
    
    return cross_search_results

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –í–ï–ö–¢–û–†–ò–ó–ê–¶–ò–ò –í–°–ï–• –ê–ì–ï–ù–¢–û–í")
    print("=" * 70)
    print(f"üïí –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().isoformat()}")
    print(f"üîß OpenAI Embeddings: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if knowledge_manager.embeddings else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}")
    print(f"üìÅ –ü—É—Ç—å –∫ –∑–Ω–∞–Ω–∏—è–º: {config.KNOWLEDGE_BASE_PATH}")
    print(f"üíæ –ü—É—Ç—å –∫ –≤–µ–∫—Ç–æ—Ä–∞–º: {config.VECTOR_STORE_PATH}")
    
    if not knowledge_manager.embeddings:
        print("‚ùå OpenAI Embeddings –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ.")
        return
    
    # –°–ª–æ–≤–∞—Ä—å –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
    all_agents = {
        # Executive level
        'chief_seo_strategist': 'executive',
        'business_development_director': 'executive',
        
        # Management level  
        'task_coordination': 'management',
        'sales_operations_manager': 'management',
        'technical_seo_operations_manager': 'management', 
        'client_success_manager': 'management',
        
        # Operational level
        'lead_qualification': 'operational',
        'sales_conversation': 'operational',
        'proposal_generation': 'operational',
        'technical_seo_auditor': 'operational',
        'content_strategy': 'operational',
        'link_building': 'operational',
        'competitive_analysis': 'operational',
        'reporting': 'operational'
    }
    
    print(f"üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {len(all_agents)} –∞–≥–µ–Ω—Ç–æ–≤:")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
    all_results = []
    
    for agent_name, agent_level in all_agents.items():
        result = test_agent_vectorization(agent_name, agent_level)
        all_results.append(result)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ–∂–∞–≥–µ–Ω—Ç–Ω—ã–π –ø–æ–∏—Å–∫
    cross_search_results = test_search_cross_agent()
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "=" * 70)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –í–ï–ö–¢–û–†–ò–ó–ê–¶–ò–ò")
    print("=" * 70)
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É
    status_groups = {}
    for result in all_results:
        status = result['status']
        if status not in status_groups:
            status_groups[status] = []
        status_groups[status].append(result['agent_name'])
    
    print("\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –°–¢–ê–¢–£–°–ê–ú:")
    status_descriptions = {
        'excellent': 'üèÜ –û—Ç–ª–∏—á–Ω–æ (90%+ —Ä—É—Å—Å–∫–∏–π, –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ)',
        'good': '‚úÖ –•–æ—Ä–æ—à–æ (60%+ —Ä—É—Å—Å–∫–∏–π, –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ)',
        'needs_improvement': '‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è',
        'low_russian': '‚ùå –ú–∞–ª–æ —Ä—É—Å—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞',
        'no_faiss': 'üîß FAISS –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω',
        'no_documents': 'üìÅ –ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤',
        'error': 'üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏'
    }
    
    for status, agents in status_groups.items():
        description = status_descriptions.get(status, f'‚ùì {status}')
        print(f"   {description}: {len(agents)} –∞–≥–µ–Ω—Ç–æ–≤")
        if len(agents) <= 5:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º–µ–Ω–∞ –µ—Å–ª–∏ –∞–≥–µ–Ω—Ç–æ–≤ –Ω–µ–º–Ω–æ–≥–æ
            for agent in agents:
                print(f"     ‚Ä¢ {agent}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º
    print(f"\nüéØ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –£–†–û–í–ù–Ø–ú:")
    level_stats = {}
    for result in all_results:
        level = result['agent_level']
        if level not in level_stats:
            level_stats[level] = {'total': 0, 'excellent': 0, 'good': 0}
        level_stats[level]['total'] += 1
        if result['status'] in ['excellent', 'good']:
            level_stats[level][result['status']] += 1
    
    for level, stats in level_stats.items():
        success_rate = ((stats['excellent'] + stats['good']) / stats['total']) * 100
        print(f"   {level.capitalize()}: {stats['excellent']}üèÜ + {stats['good']}‚úÖ / {stats['total']} ({success_rate:.1f}%)")
    
    # –û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
    total_agents = len(all_results)
    excellent_count = len(status_groups.get('excellent', []))
    good_count = len(status_groups.get('good', []))
    successful_agents = excellent_count + good_count
    
    total_documents = sum(r['documents_count'] for r in all_results)
    avg_russian_percentage = sum(r['russian_percentage'] for r in all_results) / total_agents
    faiss_active_count = sum(1 for r in all_results if r['faiss_active'])
    
    print(f"\nüìà –û–ë–©–ò–ï –ú–ï–¢–†–ò–ö–ò:")
    print(f"   üéØ –£—Å–ø–µ—à–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤: {successful_agents}/{total_agents} ({(successful_agents/total_agents)*100:.1f}%)")
    print(f"   üìÑ –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {total_documents}")
    print(f"   üá∑üá∫ –°—Ä–µ–¥–Ω—è—è —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ—Å—Ç—å: {avg_russian_percentage:.1f}%")
    print(f"   üîç FAISS –∞–∫—Ç–∏–≤–µ–Ω: {faiss_active_count}/{total_agents} –∞–≥–µ–Ω—Ç–æ–≤")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–µ–∂–∞–≥–µ–Ω—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    cross_successful = sum(1 for r in cross_search_results if r.get('found_relevant', False))
    print(f"   üîÑ –ú–µ–∂–∞–≥–µ–Ω—Ç–Ω—ã–π –ø–æ–∏—Å–∫: {cross_successful}/{len(cross_search_results)} —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
    print(f"\nüèÜ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê:")
    if successful_agents >= total_agents * 0.9 and faiss_active_count >= total_agents * 0.9:
        print("   üéâ –ü–†–ï–í–û–°–•–û–î–ù–û! –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –æ—Ç–ª–∏—á–Ω–æ")
        grade = "A+"
    elif successful_agents >= total_agents * 0.8 and faiss_active_count >= total_agents * 0.8:
        print("   ‚úÖ –û–¢–õ–ò–ß–ù–û! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        grade = "A"
    elif successful_agents >= total_agents * 0.6 and faiss_active_count >= total_agents * 0.6:
        print("   ‚ö†Ô∏è –•–û–†–û–®–û! –ï—Å—Ç—å –Ω–µ–±–æ–ª—å—à–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è")
        grade = "B"
    else:
        print("   ‚ùå –¢–†–ï–ë–£–ï–¢–°–Ø –†–ê–ë–û–¢–ê! –ï—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã")
        grade = "C"
    
    print(f"   üìä –û—Ü–µ–Ω–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {grade}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    if 'low_russian' in status_groups:
        print("   ‚Ä¢ –û–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π —Å –Ω–∏–∑–∫–∏–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º —Ä—É—Å—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
    if 'no_faiss' in status_groups:
        print("   ‚Ä¢ –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å FAISS –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–µ–π")
    if cross_successful < len(cross_search_results):
        print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –º–µ–∂–∞–≥–µ–Ω—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞")
    if grade in ['B', 'C']:
        print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Å—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤")
    else:
        print("   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    
    print(f"\nüïí –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {datetime.now().isoformat()}")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nüëã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()