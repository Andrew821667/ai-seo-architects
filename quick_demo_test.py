#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π –¥–µ–º–æ-—Ç–µ—Å—Ç –≤—Å–µ—Ö 14 –∞–≥–µ–Ω—Ç–æ–≤ AI SEO Architects
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
"""

import asyncio
import time
from datetime import datetime
from mock_data_provider import MockDataProvider

# –ò–º–ø–æ—Ä—Ç—ã –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
from agents.executive.chief_seo_strategist import ChiefSEOStrategistAgent
from agents.executive.business_development_director import BusinessDevelopmentDirectorAgent
from agents.management.task_coordination import TaskCoordinationAgent
from agents.management.sales_operations_manager import SalesOperationsManagerAgent
from agents.management.technical_seo_operations_manager import TechnicalSEOOperationsManagerAgent
from agents.management.client_success_manager import ClientSuccessManagerAgent
from agents.operational.lead_qualification import LeadQualificationAgent
from agents.operational.proposal_generation import ProposalGenerationAgent
from agents.operational.sales_conversation import SalesConversationAgent
from agents.operational.technical_seo_auditor import TechnicalSEOAuditorAgent
from agents.operational.content_strategy import ContentStrategyAgent
from agents.operational.link_building import LinkBuildingAgent
from agents.operational.competitive_analysis import CompetitiveAnalysisAgent
from agents.operational.reporting import ReportingAgent

async def demo_all_agents():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
    
    print("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø AI SEO ARCHITECTS - –í–°–ï 14 –ê–ì–ï–ù–¢–û–í")
    print(f"üìÖ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("üè¢ –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è: TechCorp Solutions (FinTech)")
    print("=" * 80)
    
    provider = MockDataProvider()
    results = []
    
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = {
        "input_data": {
            "company_name": "TechCorp Solutions",
            "industry": "fintech",
            "email": "ceo@techcorp.ru",
            "budget_range": "5000000-10000000",
            "domain": "https://techcorp.ru"
        }
    }
    
    # –°–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    agents_config = [
        ("üëë Chief SEO Strategist", ChiefSEOStrategistAgent, "seo_strategic_analysis"),
        ("üëë Business Development Director", BusinessDevelopmentDirectorAgent, "enterprise_assessment"),
        ("üéõÔ∏è Task Coordination Agent", TaskCoordinationAgent, "task_routing"),
        ("üéõÔ∏è Sales Operations Manager", SalesOperationsManagerAgent, "sales_operations_analysis"),
        ("üéõÔ∏è Technical SEO Operations Manager", TechnicalSEOOperationsManagerAgent, "comprehensive_operations_analysis"),
        ("üéõÔ∏è Client Success Manager", ClientSuccessManagerAgent, "comprehensive_client_analysis"),
        ("‚öôÔ∏è Lead Qualification Agent", LeadQualificationAgent, "lead_qualification"),
        ("‚öôÔ∏è Proposal Generation Agent", ProposalGenerationAgent, "proposal_generation"),
        ("‚öôÔ∏è Sales Conversation Agent", SalesConversationAgent, "full_sales_conversation"),
        ("‚öôÔ∏è Technical SEO Auditor", TechnicalSEOAuditorAgent, "full_technical_audit"),
        ("‚öôÔ∏è Content Strategy Agent", ContentStrategyAgent, "comprehensive_content_strategy"),
        ("‚öôÔ∏è Link Building Agent", LinkBuildingAgent, "comprehensive_analysis"),
        ("‚öôÔ∏è Competitive Analysis Agent", CompetitiveAnalysisAgent, "comprehensive_analysis"),
        ("‚öôÔ∏è Reporting Agent", ReportingAgent, "comprehensive_analysis"),
    ]
    
    total_agents = len(agents_config)
    successful = 0
    total_time = 0
    
    for i, (name, agent_class, task_type) in enumerate(agents_config, 1):
        try:
            print(f"\n[{i:2d}/{total_agents}] {name}")
            print("-" * 60)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
            agent = agent_class(data_provider=provider)
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏
            task = test_data.copy()
            task["input_data"]["task_type"] = task_type
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            start_time = time.time()
            result = await agent.process_task(task)
            duration = time.time() - start_time
            total_time += duration
            
            # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            success = result.get('success', True)
            if success:
                successful += 1
                status = "‚úÖ SUCCESS"
                color = "\033[92m"  # Green
            else:
                status = "‚ùå ERROR"
                color = "\033[91m"  # Red
            
            reset_color = "\033[0m"
            
            print(f"   –°—Ç–∞—Ç—É—Å: {color}{status}{reset_color}")
            print(f"   –í—Ä–µ–º—è: {duration:.3f}s")
            
            # –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            metrics = extract_key_metrics(name, result)
            if metrics:
                print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {metrics}")
            
            results.append({
                "agent": name,
                "success": success,
                "duration": duration,
                "metrics": metrics
            })
            
        except Exception as e:
            print(f"   –°—Ç–∞—Ç—É—Å: \033[91m‚ùå ERROR\033[0m")
            print(f"   –û—à–∏–±–∫–∞: {str(e)[:80]}...")
            results.append({
                "agent": name,
                "success": False,
                "duration": 0,
                "error": str(e)
            })
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 80)
    print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
    print("=" * 80)
    
    success_rate = (successful / total_agents) * 100
    avg_time = total_time / total_agents if total_agents > 0 else 0
    
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {successful}/{total_agents} ({success_rate:.1f}%)")
    print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f}s (—Å—Ä–µ–¥–Ω–µ–µ: {avg_time:.3f}s)")
    
    if success_rate == 100:
        print("üéâ –í–°–ï –ê–ì–ï–ù–¢–´ –†–ê–ë–û–¢–ê–Æ–¢ –û–¢–õ–ò–ß–ù–û!")
    elif success_rate >= 80:
        print("üëç –ë–û–õ–¨–®–ò–ù–°–¢–í–û –ê–ì–ï–ù–¢–û–í –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–´")
    else:
        print("‚ö†Ô∏è  –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê –ù–ï–ö–û–¢–û–†–´–• –ê–ì–ï–ù–¢–û–í")
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º
    executive_agents = [r for r in results if "üëë" in r["agent"]]
    management_agents = [r for r in results if "üéõÔ∏è" in r["agent"]]
    operational_agents = [r for r in results if "‚öôÔ∏è" in r["agent"]]
    
    print(f"\nüìã –ü–æ —É—Ä–æ–≤–Ω—è–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã:")
    print(f"   üëë Executive: {sum(1 for a in executive_agents if a['success'])}/{len(executive_agents)}")
    print(f"   üéõÔ∏è Management: {sum(1 for a in management_agents if a['success'])}/{len(management_agents)}")
    print(f"   ‚öôÔ∏è Operational: {sum(1 for a in operational_agents if a['success'])}/{len(operational_agents)}")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
    save_results_to_markdown(results, successful, total_agents, total_time)
    
    return success_rate == 100

def extract_key_metrics(agent_name: str, result: dict) -> str:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    
    if "Lead Qualification" in agent_name:
        score = result.get('lead_score', 0)
        qual = result.get('qualification', 'N/A')
        return f"Score {score}/100, {qual}"
    
    elif "Proposal Generation" in agent_name:
        value = result.get('total_annual_value', 0)
        return f"Proposal {value:,.0f} ‚ÇΩ/–≥–æ–¥"
    
    elif "Sales Conversation" in agent_name:
        quality = result.get('conversation_quality', 'N/A')
        prob = result.get('close_probability', 0)
        return f"{quality}, {prob*100:.0f}% close"
    
    elif "Technical SEO Auditor" in agent_name:
        score = result.get('audit_score', 0)
        issues = result.get('critical_issues_count', 0)
        return f"Audit {score}/100, {issues} issues"
    
    elif "Content Strategy" in agent_name:
        keywords = result.get('total_keywords', 0)
        budget = result.get('recommended_budget', 0)
        return f"{keywords} keywords, {budget:,.0f} ‚ÇΩ"
    
    elif "Business Development" in agent_name:
        score = result.get('enterprise_score', 0)
        impact = result.get('strategic_impact', 'N/A')
        return f"Enterprise {score}/100, {impact}"
    
    elif "Chief SEO Strategist" in agent_name:
        score = result.get('strategic_score', 0)
        impact = result.get('strategic_impact', 'N/A')
        return f"Strategic {score}/100, {impact}"
    
    elif "Sales Operations" in agent_name:
        health = result.get('pipeline_health_score', 0)
        insights = len(result.get('key_insights', []))
        return f"Pipeline {health:.0f}/100, {insights} insights"
    
    elif "Technical SEO Operations" in agent_name:
        health = result.get('operations_health_score', 0)
        issues = len(result.get('technical_issues', []))
        return f"Ops {health:.0f}/100, {issues} issues"
    
    elif "Client Success" in agent_name:
        health = result.get('overall_health_score', 0)
        status = result.get('health_status', 'N/A')
        return f"Health {health}/100, {status}"
    
    elif "Link Building" in agent_name:
        prospects = result.get('total_prospects', 0)
        quality = result.get('high_quality_count', 0)
        return f"{prospects} prospects, {quality} high quality"
    
    elif "Competitive Analysis" in agent_name:
        competitors = len(result.get('competitor_analysis', []))
        ownership = result.get('serp_ownership', 0)
        return f"{competitors} competitors, {ownership*100:.1f}% SERP"
    
    elif "Reporting" in agent_name:
        report_type = result.get('report_type', 'N/A')
        confidence = result.get('confidence', 0)
        return f"{report_type}, {confidence*100:.0f}% confidence"
    
    elif "Task Coordination" in agent_name:
        agent_assigned = result.get('assigned_agent', 'N/A')
        priority = result.get('priority', 0)
        return f"‚Üí {agent_assigned}, priority {priority}"
    
    return "Completed successfully"

def save_results_to_markdown(results, successful, total, total_time):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ markdown"""
    
    filename = f"DEMO_RESULTS_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md"
    
    md_content = f"""# ü§ñ AI SEO Architects - Demo Results

**–î–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}  
**–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è:** TechCorp Solutions (FinTech)

## üìä –û–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

- **–í—Å–µ–≥–æ –∞–≥–µ–Ω—Ç–æ–≤:** {total}
- **–£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:** {successful}
- **–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞:** {(successful/total)*100:.1f}%
- **–û–±—â–µ–µ –≤—Ä–µ–º—è:** {total_time:.2f}s
- **–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∞–≥–µ–Ω—Ç–∞:** {total_time/total:.3f}s

## üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∞–≥–µ–Ω—Ç–∞–º

"""
    
    for result in results:
        status_emoji = "‚úÖ" if result['success'] else "‚ùå"
        agent_name = result['agent'].replace('üëë ', '').replace('üéõÔ∏è ', '').replace('‚öôÔ∏è ', '')
        
        md_content += f"### {status_emoji} {agent_name}\n\n"
        md_content += f"- **–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:** {result.get('duration', 0):.3f}s\n"
        
        if result['success']:
            metrics = result.get('metrics', 'Completed successfully')
            md_content += f"- **–†–µ–∑—É–ª—å—Ç–∞—Ç:** {metrics}\n"
        else:
            error = result.get('error', 'Unknown error')
            md_content += f"- **–û—à–∏–±–∫–∞:** {error}\n"
        
        md_content += "\n"
    
    md_content += f"""## üéØ –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

{"üéâ –í—Å–µ –∞–≥–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –æ—Ç–ª–∏—á–Ω–æ!" if successful == total else 
 "üëç –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∞–≥–µ–Ω—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã" if successful/total >= 0.8 else 
 "‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤"}

**–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ {"production" if successful == total else "–¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"}**

---

*–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ AI SEO Architects Demo Suite*
"""
    
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(md_content)
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {filename}")
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

if __name__ == "__main__":
    success = asyncio.run(demo_all_agents())
    exit(0 if success else 1)