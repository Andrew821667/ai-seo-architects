#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints AI SEO Architects
"""

import asyncio
import httpx
import json
from datetime import datetime


class APITester:
    def __init__(self, base_url: str = "http://localhost:8000"):
        self.base_url = base_url
        self.token = None
        self.headers = {"Content-Type": "application/json"}
    
    async def test_health(self):
        """–¢–µ—Å—Ç health endpoint"""
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ health endpoint...")
        
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(f"{self.base_url}/health")
                
                if response.status_code == 200:
                    data = response.json()
                    print(f"‚úÖ Health check: {data.get('status', 'unknown')}")
                    print(f"   –í–µ—Ä—Å–∏—è: {data.get('version', 'N/A')}")
                    print(f"   Uptime: {data.get('uptime_seconds', 0):.0f}s")
                else:
                    print(f"‚ùå Health check failed: {response.status_code}")
                    
        except Exception as e:
            print(f"‚ùå Health check error: {e}")
    
    async def test_authentication(self):
        """–¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        print("\nüîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
        
        try:
            async with httpx.AsyncClient() as client:
                # –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                response = await client.post(
                    f"{self.base_url}/auth/login",
                    json={"username": "admin", "password": "secret"}
                )
                
                if response.status_code == 200:
                    data = response.json()
                    self.token = data.get("access_token")
                    self.headers["Authorization"] = f"Bearer {self.token}"
                    print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
                    print(f"   Token type: {data.get('token_type')}")
                    print(f"   Expires in: {data.get('expires_in')}s")
                else:
                    print(f"‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è failed: {response.status_code}")
                    print(f"   Response: {response.text}")
                    
        except Exception as e:
            print(f"‚ùå Authentication error: {e}")
    
    async def test_agents_list(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤"""
        print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤...")
        
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(
                    f"{self.base_url}/api/agents/",
                    headers=self.headers
                )
                
                if response.status_code == 200:
                    data = response.json()
                    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∞–≥–µ–Ω—Ç–æ–≤: {data.get('total_count', 0)}")
                    print(f"   –ê–∫—Ç–∏–≤–Ω—ã–µ: {data.get('active_count', 0)}")
                    print(f"   MCP –≤–∫–ª—é—á–µ–Ω: {data.get('mcp_enabled_count', 0)}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∞–≥–µ–Ω—Ç–∞
                    agents = data.get('agents', [])[:3]
                    for agent in agents:
                        print(f"   - {agent.get('name', 'Unknown')}: {agent.get('status', 'unknown')}")
                else:
                    print(f"‚ùå Agents list failed: {response.status_code}")
                    
        except Exception as e:
            print(f"‚ùå Agents list error: {e}")
    
    async def test_agent_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤"""
        print("\nüèóÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤...")
        
        try:
            async with httpx.AsyncClient(timeout=60.0) as client:
                response = await client.post(
                    f"{self.base_url}/api/agents/create-all",
                    headers=self.headers
                )
                
                if response.status_code == 200:
                    data = response.json()
                    result = data.get('data', {})
                    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –∞–≥–µ–Ω—Ç–æ–≤: {result.get('created_count', 0)}")
                    print(f"   MCP enabled: {result.get('mcp_enabled', False)}")
                else:
                    print(f"‚ùå Agent creation failed: {response.status_code}")
                    print(f"   Response: {response.text}")
                    
        except Exception as e:
            print(f"‚ùå Agent creation error: {e}")
    
    async def test_agent_task(self):
        """–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∞–≥–µ–Ω—Ç–æ–º"""
        print("\n‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∞–≥–µ–Ω—Ç–æ–º...")
        
        task_data = {
            "task_type": "lead_analysis",
            "input_data": {
                "company_data": {
                    "company_name": "Test Company API",
                    "industry": "technology",
                    "annual_revenue": "5000000",
                    "employee_count": "50"
                }
            },
            "priority": "normal"
        }
        
        try:
            async with httpx.AsyncClient(timeout=60.0) as client:
                response = await client.post(
                    f"{self.base_url}/api/agents/lead_qualification/tasks",
                    json=task_data,
                    headers=self.headers
                )
                
                if response.status_code == 200:
                    data = response.json()
                    print(f"‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {data.get('status', 'unknown')}")
                    print(f"   Processing time: {data.get('processing_time', 0):.2f}s")
                    print(f"   Task ID: {data.get('task_id', 'N/A')}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
                    result = data.get('result')
                    if result and isinstance(result, dict):
                        lead_score = result.get('lead_score')
                        if lead_score:
                            print(f"   Lead Score: {lead_score}/100")
                else:
                    print(f"‚ùå Agent task failed: {response.status_code}")
                    print(f"   Response: {response.text}")
                    
        except Exception as e:
            print(f"‚ùå Agent task error: {e}")
    
    async def test_dashboard_data(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞"""
        print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞...")
        
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(
                    f"{self.base_url}/api/analytics/dashboard",
                    headers=self.headers
                )
                
                if response.status_code == 200:
                    data = response.json()
                    dashboard_data = data.get('data', {})
                    
                    print("‚úÖ Dashboard data –ø–æ–ª—É—á–µ–Ω—ã:")
                    
                    # System health
                    system = dashboard_data.get('system_health', {})
                    print(f"   System: {system.get('status', 'unknown')}")
                    print(f"   CPU: {system.get('cpu_percent', 0):.1f}%")
                    print(f"   Memory: {system.get('memory_percent', 0):.1f}%")
                    
                    # Agents summary
                    agents = dashboard_data.get('agents_summary', {})
                    print(f"   Agents: {agents.get('active_agents', 0)}/{agents.get('total_agents', 0)}")
                    print(f"   Success rate: {agents.get('avg_success_rate', 0):.1%}")
                    
                else:
                    print(f"‚ùå Dashboard data failed: {response.status_code}")
                    
        except Exception as e:
            print(f"‚ùå Dashboard data error: {e}")
    
    async def test_websocket_connection(self):
        """–¢–µ—Å—Ç WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        
        try:
            import websockets
            
            uri = f"ws://localhost:8000/ws/dashboard"
            
            async with websockets.connect(uri) as websocket:
                print("‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º heartbeat
                await websocket.send(json.dumps({
                    "type": "heartbeat"
                }))
                
                # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç
                response = await asyncio.wait_for(websocket.recv(), timeout=5.0)
                data = json.loads(response)
                
                print(f"   Received: {data.get('type', 'unknown')}")
                print("‚úÖ WebSocket —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                
        except ImportError:
            print("‚ö†Ô∏è WebSocket test skipped (websockets package not installed)")
        except asyncio.TimeoutError:
            print("‚ùå WebSocket timeout")
        except Exception as e:
            print(f"‚ùå WebSocket error: {e}")
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üß™ AI SEO Architects API Testing Suite")
        print("=" * 50)
        print(f"Base URL: {self.base_url}")
        print(f"Timestamp: {datetime.now().isoformat()}")
        print("=" * 50)
        
        # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤
        await self.test_health()
        await self.test_authentication()
        
        if self.token:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
            await self.test_agent_creation()
            await self.test_agents_list()
            await self.test_agent_task()
            await self.test_dashboard_data()
        
        await self.test_websocket_connection()
        
        print("\n" + "=" * 50)
        print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print("üí° –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:8000/dashboard –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ UI")
        print("üìö API Docs: http://localhost:8000/api/docs")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = APITester()
    await tester.run_all_tests()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")