version: '3.8'

services:
  # AI SEO Architects API Server
  ai-seo-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ai-seo-architects-api
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql+asyncpg://ai_seo_user:${POSTGRES_PASSWORD:-secure_password_change_me}@postgres:5432/ai_seo_architects
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-super-secret-jwt-key-change-this-in-production}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - ENVIRONMENT=production
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - MCP_ENABLED=true
      - MCP_CACHE_TTL_MINUTES=30
      - SEO_AI_MODELS_MOCK_MODE=false
      - LOG_LEVEL=INFO
      - CORS_ORIGINS=http://localhost:3000,http://localhost:8080
      - PROMETHEUS_ENABLED=true
    volumes:
      - ./logs:/app/logs
      - ./exports:/app/exports
      - ./knowledge:/app/knowledge:ro  # Read-only knowledge base
    networks:
      - ai-seo-network
    restart: unless-stopped
    depends_on:
      - redis
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis для кэширования и сессий
  redis:
    image: redis:7-alpine
    container_name: ai-seo-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ai-seo-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL для постоянного хранения данных
  postgres:
    image: postgres:15-alpine
    container_name: ai-seo-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ai_seo_architects
      POSTGRES_USER: ai_seo_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_change_me}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - ai-seo-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ai_seo_user -d ai_seo_architects"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx как reverse proxy и load balancer
  nginx:
    image: nginx:alpine
    container_name: ai-seo-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      - ai-seo-network
    depends_on:
      - ai-seo-api
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus для мониторинга метрик
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-seo-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - ai-seo-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'

  # Grafana для визуализации метрик
  grafana:
    image: grafana/grafana:latest
    container_name: ai-seo-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - ai-seo-network
    depends_on:
      - prometheus
    restart: unless-stopped

  # Vector Database для знаний (опционально)
  chroma:
    image: chromadb/chroma:latest
    container_name: ai-seo-chroma
    ports:
      - "8001:8000"
    volumes:
      - chroma_data:/chroma/chroma
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_PORT=8000
    networks:
      - ai-seo-network
    restart: unless-stopped

networks:
  ai-seo-network:
    driver: bridge
    name: ai-seo-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  chroma_data:
    driver: local