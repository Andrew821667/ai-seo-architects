#!/usr/bin/env python3
"""
üß™ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å–∏—Å—Ç–µ–º—ã AI SEO Architects
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤, –∞–≥–µ–Ω—Ç–æ–≤, API –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
"""

import asyncio
import time
import json
from datetime import datetime
from typing import Dict, Any, List
import traceback
from dataclasses import dataclass
from enum import Enum

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
from fastapi.testclient import TestClient

# –ò–º–ø–æ—Ä—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
from api.main import app
from agents import AGENT_CLASSES, get_agent_instance
from core.orchestrator import AgentOrchestrator
from core.config import config
from core.data_providers.factory import DataProviderFactory
from core.mcp.agent_manager import MCPAgentManager
from core.interfaces.data_models import LeadInput, TaskType, AgentTask

class TestStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã —Ç–µ—Å—Ç–æ–≤"""
    PENDING = "pending"
    RUNNING = "running"
    PASSED = "passed"
    FAILED = "failed"
    SKIPPED = "skipped"

@dataclass
class TestResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞"""
    name: str
    status: TestStatus
    duration: float
    details: Dict[str, Any]
    error: str = None

class ComprehensiveSystemTester:
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä —Å–∏—Å—Ç–µ–º—ã AI SEO Architects"""
    
    def __init__(self):
        self.results: List[TestResult] = []
        self.start_time = time.time()
        
    def log(self, message: str, level: str = "INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å timestamp"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")
    
    async def run_all_tests(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        self.log("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AI SEO Architects", "INFO")
        
        # 1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        await self.test_core_components()
        
        # 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Data Providers
        await self.test_data_providers()
        
        # 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö 14 –∞–≥–µ–Ω—Ç–æ–≤
        await self.test_all_agents()
        
        # 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MCP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        await self.test_mcp_integration()
        
        # 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints
        await self.test_api_endpoints()
        
        # 6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await self.test_orchestrator()
        
        # 7. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
        await self.test_integration_scenarios()
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        return self.generate_report()
    
    async def test_core_components(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        self.log("üì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        
        # –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        await self.run_test("config_loading", self._test_config_loading)
        
        # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤
        await self.run_test("agent_imports", self._test_agent_imports)
        
        # –¢–µ—Å—Ç –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await self.run_test("orchestrator_init", self._test_orchestrator_init)
    
    async def test_data_providers(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
        self.log("üóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Data Providers...")
        
        # –¢–µ—Å—Ç Static Provider
        await self.run_test("static_provider", self._test_static_provider)
        
        # –¢–µ—Å—Ç Factory
        await self.run_test("provider_factory", self._test_provider_factory)
    
    async def test_all_agents(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö 14 –∞–≥–µ–Ω—Ç–æ–≤"""
        self.log("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö 14 –∞–≥–µ–Ω—Ç–æ–≤...")
        
        for agent_name, agent_class in AGENT_CLASSES.items():
            await self.run_test(f"agent_{agent_name}", 
                              lambda ac=agent_class, an=agent_name: self._test_single_agent(ac, an))
    
    async def test_mcp_integration(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MCP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        self.log("üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MCP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
        
        await self.run_test("mcp_manager", self._test_mcp_manager)
        await self.run_test("mcp_agent_creation", self._test_mcp_agent_creation)
    
    async def test_api_endpoints(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints"""
        self.log("üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FastAPI endpoints...")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ endpoints
        await self.run_test("api_health", self._test_api_health)
        await self.run_test("api_auth", self._test_api_auth)
        await self.run_test("api_agents", self._test_api_agents)
        await self.run_test("api_tasks", self._test_api_tasks)
    
    async def test_orchestrator(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        self.log("üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
        
        await self.run_test("orchestrator_workflow", self._test_orchestrator_workflow)
    
    async def test_integration_scenarios(self):
        """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏"""
        self.log("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤...")
        
        await self.run_test("lead_processing_scenario", self._test_lead_processing_scenario)
        await self.run_test("seo_audit_scenario", self._test_seo_audit_scenario)
    
    async def run_test(self, test_name: str, test_func):
        """–ó–∞–ø—É—Å–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        start_time = time.time()
        
        try:
            self.log(f"‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_name}")
            details = await test_func()
            duration = time.time() - start_time
            
            result = TestResult(
                name=test_name,
                status=TestStatus.PASSED,
                duration=duration,
                details=details or {}
            )
            self.log(f"‚úÖ –¢–µ—Å—Ç {test_name} –ü–†–û–ô–î–ï–ù –∑–∞ {duration:.2f}—Å")
            
        except Exception as e:
            duration = time.time() - start_time
            error_details = traceback.format_exc()
            
            result = TestResult(
                name=test_name,
                status=TestStatus.FAILED,
                duration=duration,
                details={"error_traceback": error_details},
                error=str(e)
            )
            self.log(f"‚ùå –¢–µ—Å—Ç {test_name} –ü–†–û–í–ê–õ–ï–ù: {str(e)}")
        
        self.results.append(result)
    
    # ===== –¢–ï–°–¢–´ –ë–ê–ó–û–í–´–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í =====
    
    async def _test_config_loading(self):
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        from core.config import load_config, get_config
        
        loaded_config = load_config()
        get_config_result = get_config()
        
        assert loaded_config is not None, "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞"
        assert get_config_result is not None, "get_config() –≤–µ—Ä–Ω—É–ª None"
        assert hasattr(loaded_config, 'DATA_PROVIDER_TYPE'), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç DATA_PROVIDER_TYPE"
        
        return {
            "provider_type": loaded_config.DATA_PROVIDER_TYPE,
            "executive_model": loaded_config.EXECUTIVE_MODEL,
            "management_model": loaded_config.MANAGEMENT_MODEL
        }
    
    async def _test_agent_imports(self):
        """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
        assert len(AGENT_CLASSES) == 14, f"–û–∂–∏–¥–∞–ª–æ—Å—å 14 –∞–≥–µ–Ω—Ç–æ–≤, –Ω–∞–π–¥–µ–Ω–æ {len(AGENT_CLASSES)}"
        
        imported_agents = []
        for name, agent_class in AGENT_CLASSES.items():
            assert agent_class is not None, f"–ê–≥–µ–Ω—Ç {name} –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω"
            imported_agents.append(name)
        
        return {
            "total_agents": len(AGENT_CLASSES),
            "imported_agents": imported_agents
        }
    
    async def _test_orchestrator_init(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        orchestrator = AgentOrchestrator()
        
        assert orchestrator is not None, "–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ —Å–æ–∑–¥–∞–Ω"
        assert hasattr(orchestrator, 'agents'), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞—Ç—Ä–∏–±—É—Ç agents"
        assert hasattr(orchestrator, 'create_workflow_graph'), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–µ—Ç–æ–¥ create_workflow_graph"
        
        return {"orchestrator_created": True}
    
    # ===== –¢–ï–°–¢–´ DATA PROVIDERS =====
    
    async def _test_static_provider(self):
        """–¢–µ—Å—Ç Static Data Provider"""
        provider = DataProviderFactory.create_provider("static")
        
        assert provider is not None, "Static provider –Ω–µ —Å–æ–∑–¥–∞–Ω"
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è SEO –¥–∞–Ω–Ω—ã—Ö
        seo_data = await provider.get_seo_data("example.com")
        assert seo_data is not None, "SEO –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã"
        assert seo_data.domain == "example.com", "–ù–µ–≤–µ—Ä–Ω—ã–π –¥–æ–º–µ–Ω –≤ SEO –¥–∞–Ω–Ω—ã—Ö"
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞
        client_data = await provider.get_client_data("client_001")
        assert client_data is not None, "–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã"
        
        return {
            "provider_type": type(provider).__name__,
            "seo_data_confidence": seo_data.confidence_score,
            "client_lead_score": client_data.lead_score
        }
    
    async def _test_provider_factory(self):
        """–¢–µ—Å—Ç Provider Factory"""
        # –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        available_providers = DataProviderFactory.get_available_providers()
        assert "static" in available_providers, "Static provider –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        provider = DataProviderFactory.create_provider("static")
        assert provider is not None, "–ü—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ factory"
        
        # –¢–µ—Å—Ç singleton behavior
        provider2 = DataProviderFactory.create_provider("static")
        assert provider is provider2, "Singleton pattern –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
        
        return {
            "available_providers": available_providers,
            "singleton_works": provider is provider2
        }
    
    # ===== –¢–ï–°–¢–´ –ê–ì–ï–ù–¢–û–í =====
    
    async def _test_single_agent(self, agent_class, agent_name):
        """–¢–µ—Å—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞"""
        # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∞–≥–µ–Ω—Ç–∞
        agent = get_agent_instance(agent_name)
        assert agent is not None, f"–ê–≥–µ–Ω—Ç {agent_name} –Ω–µ —Å–æ–∑–¥–∞–Ω"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤
        assert hasattr(agent, 'process_task'), f"–£ –∞–≥–µ–Ω—Ç–∞ {agent_name} –Ω–µ—Ç –º–µ—Ç–æ–¥–∞ process_task"
        assert hasattr(agent, 'agent_id'), f"–£ –∞–≥–µ–Ω—Ç–∞ {agent_name} –Ω–µ—Ç agent_id"
        
        # –¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ (mock)
        test_task = {
            "task_type": "test",
            "input_data": {"test": "data"},
            "domain": "example.com"
        }
        
        try:
            result = await agent.process_task(test_task)
            task_executed = True
            task_error = None
        except Exception as e:
            task_executed = False
            task_error = str(e)
        
        return {
            "agent_name": agent_name,
            "agent_class": agent_class.__name__,
            "agent_id": getattr(agent, 'agent_id', 'unknown'),
            "task_executed": task_executed,
            "task_error": task_error
        }
    
    # ===== –¢–ï–°–¢–´ MCP =====
    
    async def _test_mcp_manager(self):
        """–¢–µ—Å—Ç MCP Manager"""
        manager = MCPAgentManager()
        assert manager is not None, "MCP Manager –Ω–µ —Å–æ–∑–¥–∞–Ω"
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤
        agent_types = await manager.get_available_agent_types()
        assert len(agent_types) > 0, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤"
        
        return {
            "manager_created": True,
            "available_agent_types": len(agent_types),
            "agent_types": agent_types[:5]  # –ü–µ—Ä–≤—ã–µ 5 –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
        }
    
    async def _test_mcp_agent_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ MCP"""
        manager = MCPAgentManager()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
        agents = await manager.create_agents_by_category("executive", limit=1)
        assert len(agents) > 0, "–ê–≥–µ–Ω—Ç—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã —á–µ—Ä–µ–∑ MCP"
        
        agent = list(agents.values())[0]
        assert agent is not None, "–°–æ–∑–¥–∞–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç –ø—É—Å—Ç"
        
        return {
            "agents_created": len(agents),
            "first_agent_id": list(agents.keys())[0],
            "creation_successful": True
        }
    
    # ===== –¢–ï–°–¢–´ API =====
    
    async def _test_api_health(self):
        """–¢–µ—Å—Ç API health endpoint"""
        with TestClient(app) as client:
            response = client.get("/health")
            
            assert response.status_code == 200, f"Health endpoint –≤–µ—Ä–Ω—É–ª {response.status_code}"
            
            health_data = response.json()
            assert "status" in health_data, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ status –≤ health –¥–∞–Ω–Ω—ã—Ö"
            
            return {
                "status_code": response.status_code,
                "health_status": health_data.get("status"),
                "has_metrics": "metrics" in health_data
            }
    
    async def _test_api_auth(self):
        """–¢–µ—Å—Ç API –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        with TestClient(app) as client:
            # –¢–µ—Å—Ç –ª–æ–≥–∏–Ω–∞
            login_response = client.post("/auth/login", json={
                "username": "admin",
                "password": "secret"
            })
            
            login_success = login_response.status_code == 200
            token = None
            
            if login_success:
                token_data = login_response.json()
                token = token_data.get("access_token")
            
            return {
                "login_status_code": login_response.status_code,
                "login_successful": login_success,
                "token_received": token is not None
            }
    
    async def _test_api_agents(self):
        """–¢–µ—Å—Ç API –∞–≥–µ–Ω—Ç–æ–≤"""
        with TestClient(app) as client:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤
            agents_response = client.get("/api/agents/")
            
            agents_success = agents_response.status_code == 200
            agents_count = 0
            
            if agents_success:
                agents_data = agents_response.json()
                agents_count = len(agents_data.get("agents", []))
            
            return {
                "agents_endpoint_status": agents_response.status_code,
                "agents_listed": agents_success,
                "agents_count": agents_count
            }
    
    async def _test_api_tasks(self):
        """–¢–µ—Å—Ç API –∑–∞–¥–∞—á"""
        with TestClient(app) as client:
            # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
            task_data = {
                "agent_id": "lead_qualification_agent",
                "task_type": "lead_analysis",
                "input_data": {
                    "company_name": "Test Company",
                    "industry": "Technology"
                }
            }
            
            task_response = client.post("/api/tasks/", json=task_data)
            
            return {
                "task_creation_status": task_response.status_code,
                "task_creation_successful": task_response.status_code in [200, 201, 202]
            }
    
    # ===== –¢–ï–°–¢–´ –û–†–ö–ï–°–¢–†–ê–¢–û–†–ê =====
    
    async def _test_orchestrator_workflow(self):
        """–¢–µ—Å—Ç workflow –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        orchestrator = AgentOrchestrator()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∞ workflow
        workflow = orchestrator.create_workflow_graph()
        assert workflow is not None, "Workflow –≥—Ä–∞—Ñ –Ω–µ —Å–æ–∑–¥–∞–Ω"
        
        # –ö–æ–º–ø–∏–ª—è—Ü–∏—è workflow
        compiled = orchestrator.compile_workflow()
        assert compiled is not None, "Workflow –Ω–µ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω"
        
        return {
            "workflow_created": True,
            "workflow_compiled": True
        }
    
    # ===== –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´ =====
    
    async def _test_lead_processing_scenario(self):
        """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∏–¥–∞"""
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ª–∏–¥–∞
        lead_data = LeadInput(
            company_name="Test Corp",
            industry="SaaS",
            estimated_revenue="$1M+",
            monthly_budget="$10K",
            timeline="3 months",
            pain_points=["SEO issues", "Low traffic"]
        )
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ª–∏–¥–æ–≤
        lead_agent = get_agent_instance("lead_qualification_agent")
        
        if lead_agent:
            try:
                result = await lead_agent.process_task({
                    "task_type": "lead_analysis",
                    "input_data": lead_data.dict()
                })
                processing_successful = True
                lead_score = result.get("lead_score", 0) if result else 0
            except Exception as e:
                processing_successful = False
                lead_score = 0
        else:
            processing_successful = False
            lead_score = 0
        
        return {
            "lead_created": True,
            "agent_available": lead_agent is not None,
            "processing_successful": processing_successful,
            "lead_score": lead_score
        }
    
    async def _test_seo_audit_scenario(self):
        """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç SEO –∞—É–¥–∏—Ç–∞"""
        # –ü–æ–ª—É—á–µ–Ω–∏–µ SEO –∞—É–¥–∏—Ç–æ—Ä–∞
        seo_agent = get_agent_instance("technical_seo_auditor")
        
        if seo_agent:
            try:
                result = await seo_agent.process_task({
                    "task_type": "seo_audit",
                    "input_data": {"domain": "example.com"}
                })
                audit_successful = True
                audit_score = result.get("audit_score", 0) if result else 0
            except Exception as e:
                audit_successful = False
                audit_score = 0
        else:
            audit_successful = False
            audit_score = 0
        
        return {
            "seo_agent_available": seo_agent is not None,
            "audit_successful": audit_successful,
            "audit_score": audit_score
        }
    
    def generate_report(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        total_duration = time.time() - self.start_time
        
        passed_tests = [r for r in self.results if r.status == TestStatus.PASSED]
        failed_tests = [r for r in self.results if r.status == TestStatus.FAILED]
        
        success_rate = len(passed_tests) / len(self.results) * 100 if self.results else 0
        
        report = {
            "summary": {
                "total_tests": len(self.results),
                "passed": len(passed_tests),
                "failed": len(failed_tests),
                "success_rate": round(success_rate, 2),
                "total_duration": round(total_duration, 2)
            },
            "test_results": [
                {
                    "name": r.name,
                    "status": r.status.value,
                    "duration": round(r.duration, 3),
                    "error": r.error,
                    "details": r.details
                }
                for r in self.results
            ],
            "failed_tests_summary": [
                {"name": r.name, "error": r.error}
                for r in failed_tests
            ]
        }
        
        return report

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ AI SEO Architects - Comprehensive System Test")
    print("=" * 60)
    
    tester = ComprehensiveSystemTester()
    report = await tester.run_all_tests()
    
    print("\n" + "=" * 60)
    print("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ü–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Æ")
    print("=" * 60)
    
    summary = report["summary"]
    print(f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {summary['total_tests']}")
    print(f"   ‚Ä¢ –ü—Ä–æ–π–¥–µ–Ω–æ: {summary['passed']} ‚úÖ")
    print(f"   ‚Ä¢ –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {summary['failed']} ‚ùå")
    print(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {summary['success_rate']}%")
    print(f"   ‚Ä¢ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {summary['total_duration']:.2f} —Å–µ–∫")
    
    if report["failed_tests_summary"]:
        print(f"\n‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã:")
        for failed in report["failed_tests_summary"]:
            print(f"   ‚Ä¢ {failed['name']}: {failed['error']}")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    report_file = f"COMPREHENSIVE_SYSTEM_TEST_REPORT_{timestamp}.json"
    
    with open(report_file, 'w', encoding='utf-8') as f:
        json.dump(report, f, ensure_ascii=False, indent=2)
    
    print(f"\nüìÑ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç
    if summary["success_rate"] >= 80:
        print("\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        return 0
    else:
        print("\n‚ö†Ô∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–´–Ø–í–ò–õ–û –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´!")
        return 1

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    exit(exit_code)