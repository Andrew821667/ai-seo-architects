#!/usr/bin/env python3
"""
ü§ñ Comprehensive —Ç–µ—Å—Ç –≤—Å–µ—Ö 14 –∞–≥–µ–Ω—Ç–æ–≤ AI SEO Architects —Å LLM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã OpenAI API —Å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏
"""

import asyncio
import os
import json
from datetime import datetime
from typing import Dict, Any

# Executive Level (2 –∞–≥–µ–Ω—Ç–∞)
from agents.executive.chief_seo_strategist import ChiefSEOStrategistAgent
from agents.executive.business_development_director import BusinessDevelopmentDirectorAgent

# Management Level (4 –∞–≥–µ–Ω—Ç–∞)
from agents.management.task_coordination import TaskCoordinationAgent
from agents.management.sales_operations_manager import SalesOperationsManagerAgent
from agents.management.technical_seo_operations_manager import TechnicalSEOOperationsManagerAgent
from agents.management.client_success_manager import ClientSuccessManagerAgent

# Operational Level (8 –∞–≥–µ–Ω—Ç–æ–≤)
from agents.operational.lead_qualification import LeadQualificationAgent
from agents.operational.proposal_generation import ProposalGenerationAgent
from agents.operational.sales_conversation import SalesConversationAgent
from agents.operational.technical_seo_auditor import TechnicalSEOAuditorAgent
from agents.operational.content_strategy import ContentStrategyAgent
from agents.operational.link_building import LinkBuildingAgent
from agents.operational.competitive_analysis import CompetitiveAnalysisAgent
from agents.operational.reporting import ReportingAgent

class ComprehensiveLLMTester:
    """Comprehensive —Ç–µ—Å—Ç–µ—Ä –¥–ª—è –≤—Å–µ—Ö 14 –∞–≥–µ–Ω—Ç–æ–≤"""
    
    def __init__(self):
        self.results = {}
        self.test_data_sets = self._prepare_test_data()
        
    def _prepare_test_data(self) -> Dict[str, Dict[str, Any]]:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∞–≥–µ–Ω—Ç–æ–≤"""
        return {
            # Executive Level Test Data
            "executive": {
                "input_data": {
                    "company_name": "MegaCorp Industries",
                    "industry": "manufacturing", 
                    "annual_revenue": 5000000000,
                    "employee_count": 15000,
                    "market_share_percent": 12,
                    "business_goals": "Expand digital presence, increase B2B lead generation",
                    "current_challenges": "Poor online visibility, outdated digital infrastructure",
                    "strategic_timeline": "18 months",
                    "budget_range": "50000000"
                }
            },
            
            # Management Level Test Data
            "management": {
                "input_data": {
                    "current_leads": 150,
                    "qualified_leads": 45,
                    "proposals_sent": 25,
                    "deals_won": 8,
                    "team_size": 12,
                    "monthly_revenue": 2500000,
                    "target_metrics": {
                        "conversion_rate": 0.35,
                        "pipeline_velocity": 0.80,
                        "team_performance": 85
                    }
                }
            },
            
            # Operational Level Test Data  
            "operational": {
                "input_data": {
                    "company_name": "TechStart Solutions",
                    "industry": "fintech",
                    "domain": "techstart-solutions.ru",
                    "company_size": "250",
                    "budget_range": "300000",
                    "timeline": "6 months",
                    "contact_role": "Marketing Director",
                    "pain_points": "Low organic traffic, poor conversion rates",
                    "goals": "Increase organic traffic by 200%, improve lead quality",
                    "current_seo": "Basic optimization, no content strategy",
                    "competitors": ["competitor1.com", "competitor2.com"],
                    "target_keywords": ["fintech solutions", "digital banking", "payment processing"]
                }
            }
        }

    async def test_agent(self, agent_class, agent_name: str, test_data: Dict[str, Any]) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞"""
        print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º {agent_name}...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
            agent = agent_class()
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É
            if hasattr(agent, 'process_task_with_retry'):
                result = await agent.process_task_with_retry(test_data)
            else:
                result = await agent.process_task(test_data)
            
            print(f"  üìä –£—Å–ø–µ—Ö: {result.get('success', False)}")
            if result.get('model_used'):
                print(f"  ü§ñ –ú–æ–¥–µ–ª—å: {result.get('model_used')}")
            if result.get('tokens_used'):
                tokens = result.get('tokens_used', {})
                print(f"  üî¢ –¢–æ–∫–µ–Ω—ã: {tokens.get('total_tokens', 'N/A')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ fallback —Ä–µ–∂–∏–º–∞
            result_data = result.get('result', {})
            fallback_used = False
            if isinstance(result_data, dict):
                fallback_used = result_data.get('fallback_used') or result_data.get('fallback_mode')
            elif result.get('fallback_mode'):
                fallback_used = True
            
            if fallback_used:
                print(f"  ‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback —Ä–µ–∂–∏–º")
            
            return {
                "agent": agent_name,
                "success": result.get('success', False),
                "model_used": result.get('model_used'),
                "tokens_used": result.get('tokens_used', {}),
                "fallback_mode": fallback_used,
                "response_size": len(str(result.get('result', ''))),
                "error": result.get('error')
            }
            
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            return {
                "agent": agent_name,
                "success": False,
                "error": str(e),
                "fallback_mode": False
            }

    async def test_executive_agents(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º Executive –∞–≥–µ–Ω—Ç–æ–≤"""
        print("\n" + "="*60)
        print("üè¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï EXECUTIVE –£–†–û–í–ù–Ø (2/14)")
        print("="*60)
        
        executive_agents = [
            (ChiefSEOStrategistAgent, "Chief SEO Strategist"),
            (BusinessDevelopmentDirectorAgent, "Business Development Director")
        ]
        
        for agent_class, agent_name in executive_agents:
            result = await self.test_agent(agent_class, agent_name, self.test_data_sets["executive"])
            self.results[agent_name] = result

    async def test_management_agents(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º Management –∞–≥–µ–Ω—Ç–æ–≤"""
        print("\n" + "="*60)
        print("üìã –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï MANAGEMENT –£–†–û–í–ù–Ø (4/14)")
        print("="*60)
        
        management_agents = [
            (TaskCoordinationAgent, "Task Coordination Agent"),
            (SalesOperationsManagerAgent, "Sales Operations Manager"),
            (TechnicalSEOOperationsManagerAgent, "Technical SEO Operations Manager"),
            (ClientSuccessManagerAgent, "Client Success Manager")
        ]
        
        for agent_class, agent_name in management_agents:
            result = await self.test_agent(agent_class, agent_name, self.test_data_sets["management"])
            self.results[agent_name] = result

    async def test_operational_agents(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º Operational –∞–≥–µ–Ω—Ç–æ–≤"""
        print("\n" + "="*60)
        print("‚öôÔ∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï OPERATIONAL –£–†–û–í–ù–Ø (8/14)")
        print("="*60)
        
        operational_agents = [
            (LeadQualificationAgent, "Lead Qualification Agent"),
            (ProposalGenerationAgent, "Proposal Generation Agent"),
            (SalesConversationAgent, "Sales Conversation Agent"),
            (TechnicalSEOAuditorAgent, "Technical SEO Auditor Agent"),
            (ContentStrategyAgent, "Content Strategy Agent"),
            (LinkBuildingAgent, "Link Building Agent"),
            (CompetitiveAnalysisAgent, "Competitive Analysis Agent"),
            (ReportingAgent, "Reporting Agent")
        ]
        
        for agent_class, agent_name in operational_agents:
            result = await self.test_agent(agent_class, agent_name, self.test_data_sets["operational"])
            self.results[agent_name] = result

    async def check_openai_api_key(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ OpenAI API –∫–ª—é—á–∞"""
        api_key = os.getenv("OPENAI_API_KEY")
        if api_key:
            print(f"‚úÖ OPENAI_API_KEY –Ω–∞–π–¥–µ–Ω: {api_key[:10]}...{api_key[-4:]}")
            return True
        else:
            print("‚ö†Ô∏è OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è fallback —Ä–µ–∂–∏–º")
            return False

    def generate_final_report(self, has_api_key: bool):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"""
        print("\n" + "="*80)
        print("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢: LLM –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –í–°–ï–• 14 –ê–ì–ï–ù–¢–û–í")
        print("="*80)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º
        executive_results = [r for name, r in self.results.items() if "Chief" in name or "Director" in name]
        management_results = [r for name, r in self.results.items() if any(x in name for x in ["Task", "Sales Operations", "Technical SEO Operations", "Client Success"])]
        operational_results = [r for name, r in self.results.items() if name not in [r["agent"] for r in executive_results + management_results]]
        
        print(f"\nüè¢ EXECUTIVE –£–†–û–í–ï–ù–¨ (2 –∞–≥–µ–Ω—Ç–∞):")
        self._print_level_stats(executive_results)
        
        print(f"\nüìã MANAGEMENT –£–†–û–í–ï–ù–¨ (4 –∞–≥–µ–Ω—Ç–∞):")
        self._print_level_stats(management_results)
        
        print(f"\n‚öôÔ∏è OPERATIONAL –£–†–û–í–ï–ù–¨ (8 –∞–≥–µ–Ω—Ç–æ–≤):")
        self._print_level_stats(operational_results)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_agents = len(self.results)
        successful_agents = sum(1 for r in self.results.values() if r["success"])
        llm_agents = sum(1 for r in self.results.values() if r.get("model_used") and not r.get("fallback_mode"))
        fallback_agents = sum(1 for r in self.results.values() if r.get("fallback_mode"))
        
        success_rate = (successful_agents / total_agents) * 100 if total_agents > 0 else 0
        llm_usage_rate = (llm_agents / total_agents) * 100 if total_agents > 0 else 0
        
        print(f"\nüéØ –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   –í—Å–µ–≥–æ –∞–≥–µ–Ω—Ç–æ–≤: {total_agents}/14")
        print(f"   –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {successful_agents}/{total_agents} ({success_rate:.1f}%)")
        print(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ LLM: {llm_agents}/{total_agents} ({llm_usage_rate:.1f}%)")
        print(f"   Fallback —Ä–µ–∂–∏–º: {fallback_agents}/{total_agents}")
        
        # –¢–æ–∫–µ–Ω—ã –∏ –º–æ–¥–µ–ª–∏
        total_tokens = sum(r.get("tokens_used", {}).get("total_tokens", 0) for r in self.results.values())
        models_used = set(r.get("model_used") for r in self.results.values() if r.get("model_used"))
        
        if total_tokens > 0:
            print(f"\nüí∞ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –†–ï–°–£–†–°–û–í:")
            print(f"   –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: {total_tokens:,}")
            print(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏: {', '.join(models_used)}")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        if has_api_key and success_rate >= 95 and llm_usage_rate >= 80:
            print(f"\nüéâ –û–¢–õ–ò–ß–ù–û! –í—Å–µ –∞–≥–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã —Å LLM")
            return 0
        elif success_rate >= 95:
            print(f"\n‚úÖ –•–û–†–û–®–û! Fallback —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return 0
        else:
            print(f"\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ LLM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
            return 1

    def _print_level_stats(self, results):
        """–ü–µ—á–∞—Ç–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —É—Ä–æ–≤–Ω—è –∞–≥–µ–Ω—Ç–æ–≤"""
        successful = sum(1 for r in results if r["success"])
        total = len(results)
        llm_usage = sum(1 for r in results if r.get("model_used") and not r.get("fallback_mode"))
        
        for result in results:
            status = "‚úÖ" if result["success"] else "‚ùå"
            llm_status = "ü§ñ" if result.get("model_used") and not result.get("fallback_mode") else "‚ö†Ô∏è"
            print(f"   {status} {llm_status} {result['agent']}")
            
        print(f"   üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {successful}/{total} ({(successful/total)*100:.1f}%)")
        print(f"   ü§ñ LLM –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {llm_usage}/{total} ({(llm_usage/total)*100:.1f}%)")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ AI SEO ARCHITECTS - COMPREHENSIVE LLM INTEGRATION TEST")
    print("–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ 14 –∞–≥–µ–Ω—Ç–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ OpenAI API –≤—ã–∑–æ–≤–∞–º–∏")
    print(f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now()}")
    
    tester = ComprehensiveLLMTester()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
    has_api_key = await tester.check_openai_api_key()
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ —É—Ä–æ–≤–Ω–∏
        await tester.test_executive_agents()
        await tester.test_management_agents() 
        await tester.test_operational_agents()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        exit_code = tester.generate_final_report(has_api_key)
        
        print(f"\n‚è±Ô∏è –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now()}")
        return exit_code
        
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")
        return 1

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    exit(exit_code)