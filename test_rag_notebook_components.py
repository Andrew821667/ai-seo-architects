#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ RAG –Ω–æ—É—Ç–±—É–∫–∞
–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫–æ–¥–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –≤ Google Colab
"""

import sys
import asyncio
import numpy as np
from typing import Dict, Any, List, Optional, Tuple
from dataclasses import dataclass
import json
from datetime import datetime

print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï RAG –ù–û–£–¢–ë–£–ö–ê –ö–û–ú–ü–û–ù–ï–ù–¢–û–í")
print("=" * 50)

# –¢–µ—Å—Ç 1: –ò–º–∏—Ç–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
def test_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π"""
    try:
        import asyncio
        import numpy as np
        from typing import Dict, Any, List
        from dataclasses import dataclass
        print("‚úÖ –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã - OK")
        return True
    except ImportError as e:
        print(f"‚ùå –¢–µ—Å—Ç 1: –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ - {e}")
        return False

# –¢–µ—Å—Ç 2: –ò–º–∏—Ç–∞—Ü–∏—è FAISS —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
def test_faiss_simulation():
    """–¢–µ—Å—Ç –∏–º–∏—Ç–∞—Ü–∏–∏ FAISS –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ FAISS"""
    try:
        class MockFAISSIndex:
            def __init__(self, dim):
                self.dim = dim
                self.vectors = []
                self.ntotal = 0
            
            def add(self, vector):
                self.vectors.append(vector)
                self.ntotal += 1
            
            def search(self, query_vector, k):
                # –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ distances –∏ indices
                if not self.vectors:
                    return np.array([[1.0]]), np.array([[0]])
                
                distances = np.random.random((1, min(k, len(self.vectors))))
                indices = np.array([list(range(min(k, len(self.vectors))))])
                return distances, indices
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º mock FAISS
        index = MockFAISSIndex(1536)
        test_vector = np.random.random((1, 1536)).astype('float32')
        index.add(test_vector)
        
        distances, indices = index.search(test_vector, 1)
        
        assert index.ntotal == 1
        assert len(distances[0]) >= 1
        assert len(indices[0]) >= 1
        
        print("‚úÖ –¢–µ—Å—Ç 2: FAISS —Å–∏–º—É–ª—è—Ü–∏—è - OK")
        return True
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç 2: –û—à–∏–±–∫–∞ FAISS —Å–∏–º—É–ª—è—Ü–∏–∏ - {e}")
        return False

# –¢–µ—Å—Ç 3: –ö–ª–∞—Å—Å KnowledgeChunk
@dataclass
class KnowledgeChunk:
    content: str
    metadata: Dict[str, Any]
    embedding: Optional[np.ndarray] = None

def test_knowledge_chunk():
    """–¢–µ—Å—Ç –∫–ª–∞—Å—Å–∞ KnowledgeChunk"""
    try:
        chunk = KnowledgeChunk(
            content="–¢–µ—Å—Ç–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è",
            metadata={"source": "test", "priority": "high"},
            embedding=np.random.random(1536)
        )
        
        assert chunk.content == "–¢–µ—Å—Ç–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è"
        assert chunk.metadata["source"] == "test"
        assert chunk.embedding is not None
        assert len(chunk.embedding) == 1536
        
        print("‚úÖ –¢–µ—Å—Ç 3: KnowledgeChunk –∫–ª–∞—Å—Å - OK")
        return True
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç 3: –û—à–∏–±–∫–∞ KnowledgeChunk - {e}")
        return False

# –¢–µ—Å—Ç 4: Mock RAGVectorStore
class MockRAGVectorStore:
    def __init__(self, agent_id: str, embedding_dim: int = 1536):
        self.agent_id = agent_id
        self.embedding_dim = embedding_dim
        self.chunks: List[KnowledgeChunk] = []
        self.metadata_store: Dict[int, Dict[str, Any]] = {}
        
    async def add_knowledge(self, content: str, metadata: Dict[str, Any] = None):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏—è –≤ mock —Ö—Ä–∞–Ω–∏–ª–∏—â–µ"""
        fake_embedding = np.random.random(self.embedding_dim).astype('float32')
        chunk = KnowledgeChunk(content=content, metadata=metadata or {}, embedding=fake_embedding)
        
        chunk_id = len(self.chunks)
        self.chunks.append(chunk)
        self.metadata_store[chunk_id] = chunk.metadata
        
        return chunk_id
    
    async def search(self, query: str, top_k: int = 3) -> List[Tuple[str, float, Dict[str, Any]]]:
        """Mock –ø–æ–∏—Å–∫"""
        if len(self.chunks) == 0:
            return [("–ù–µ—Ç –∑–Ω–∞–Ω–∏–π –≤ –±–∞–∑–µ", 1.0, {})]
        
        results = []
        for i, chunk in enumerate(self.chunks[:top_k]):
            similarity = 0.95 - i * 0.1  # –ò–º–∏—Ç–∞—Ü–∏—è —É–±—ã–≤–∞—é—â–µ–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
            results.append((chunk.content, similarity, chunk.metadata))
        return results
    
    def get_stats(self) -> Dict[str, Any]:
        return {
            "agent_id": self.agent_id,
            "total_chunks": len(self.chunks),
            "embedding_dim": self.embedding_dim,
            "ready": len(self.chunks) > 0
        }

def test_mock_vector_store():
    """–¢–µ—Å—Ç mock –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
    try:
        async def run_test():
            store = MockRAGVectorStore("test_agent")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞–Ω–∏—è
            await store.add_knowledge("–¢–µ—Å—Ç–æ–≤–æ–µ –∑–Ω–∞–Ω–∏–µ 1", {"source": "test"})
            await store.add_knowledge("–¢–µ—Å—Ç–æ–≤–æ–µ –∑–Ω–∞–Ω–∏–µ 2", {"source": "test"})
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
            results = await store.search("—Ç–µ—Å—Ç", top_k=2)
            
            assert len(results) == 2
            assert results[0][1] > results[1][1]  # –ü–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–µ–Ω
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = store.get_stats()
            assert stats["total_chunks"] == 2
            assert stats["ready"] == True
            
            return True
        
        result = asyncio.run(run_test())
        if result:
            print("‚úÖ –¢–µ—Å—Ç 4: Mock RAGVectorStore - OK")
            return True
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç 4: –û—à–∏–±–∫–∞ Mock RAGVectorStore - {e}")
        return False

# –¢–µ—Å—Ç 5: Mock BaseRAGAgent
class MockBaseRAGAgent:
    def __init__(self, agent_id: str, agent_level: str = "operational"):
        self.agent_id = agent_id
        self.agent_level = agent_level
        self.agent_name = self._generate_agent_name()
        self.openai_client = None  # Mock –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        self.vector_store = None
        self.rag_enabled = False
        
    def _generate_agent_name(self) -> str:
        name_mapping = {
            "lead_qualification": "Lead Qualification Agent",
            "technical_seo_auditor": "Technical SEO Auditor",
            "chief_seo_strategist": "Chief SEO Strategist",
        }
        return name_mapping.get(self.agent_id, self.agent_id.replace('_', ' ').title())
    
    async def initialize_rag(self) -> bool:
        """Mock –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG"""
        try:
            self.vector_store = MockRAGVectorStore(self.agent_id)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è
            await self.vector_store.add_knowledge(
                f"–ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è –¥–ª—è {self.agent_id}",
                {"source": "base_knowledge", "priority": "high"}
            )
            await self.vector_store.add_knowledge(
                f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞ {self.agent_id}",
                {"source": "expertise", "priority": "medium"}
            )
            
            self.rag_enabled = True
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RAG –¥–ª—è {self.agent_id}: {e}")
            return False
    
    async def get_rag_context(self, query: str, max_context_length: int = 2000) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ RAG –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        if not self.rag_enabled or not self.vector_store:
            return "–ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - RAG –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
        
        try:
            search_results = await self.vector_store.search(query, top_k=3)
            
            context_parts = []
            total_length = 0
            
            for content, similarity, metadata in search_results:
                if total_length + len(content) > max_context_length:
                    break
                context_parts.append(f"[–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {similarity:.2f}] {content}")
                total_length += len(content)
            
            return "\n\n".join(context_parts) if context_parts else "–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
                
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {str(e)}"
    
    async def process_task(self, task_data: Dict[str, Any]) -> Dict[str, Any]:
        """Mock –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏"""
        # –ü–æ–ª—É—á–∞–µ–º RAG –∫–æ–Ω—Ç–µ–∫—Å—Ç
        query = " ".join([f"{k}: {v}" for k, v in task_data.items()])
        rag_context = await self.get_rag_context(query)
        
        return {
            "success": True,
            "result": f"Mock –æ—Ç–≤–µ—Ç –æ—Ç {self.agent_name} —Å RAG –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º",
            "rag_context_used": rag_context,
            "rag_enabled": self.rag_enabled,
            "fallback_mode": True
        }

def test_mock_rag_agent():
    """–¢–µ—Å—Ç mock RAG –∞–≥–µ–Ω—Ç–∞"""
    try:
        async def run_test():
            agent = MockBaseRAGAgent("technical_seo_auditor")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º RAG
            init_result = await agent.initialize_rag()
            assert init_result == True
            assert agent.rag_enabled == True
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            context = await agent.get_rag_context("Core Web Vitals")
            assert len(context) > 0
            assert "–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å:" in context
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–¥–∞—á–∏
            task_data = {
                "website": "example.com",
                "request": "–ø—Ä–æ–≤–µ—Å—Ç–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞—É–¥–∏—Ç"
            }
            
            result = await agent.process_task(task_data)
            assert result["success"] == True
            assert result["rag_enabled"] == True
            assert "rag_context_used" in result
            
            return True
        
        result = asyncio.run(run_test())
        if result:
            print("‚úÖ –¢–µ—Å—Ç 5: Mock BaseRAGAgent - OK")
            return True
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç 5: –û—à–∏–±–∫–∞ Mock BaseRAGAgent - {e}")
        return False

# –¢–µ—Å—Ç 6: –ü–æ–ª–Ω—ã–π workflow —Å–∏–º—É–ª—è—Ü–∏—è
def test_workflow_simulation():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ workflow"""
    try:
        async def run_workflow_test():
            # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–≥–µ–Ω—Ç–æ–≤
            agents = {
                'lead_qualification': MockBaseRAGAgent("lead_qualification"),
                'technical_seo_auditor': MockBaseRAGAgent("technical_seo_auditor"),
                'chief_seo_strategist': MockBaseRAGAgent("chief_seo_strategist", "executive")
            }
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º RAG –¥–ª—è –≤—Å–µ—Ö
            init_results = []
            for agent in agents.values():
                result = await agent.initialize_rag()
                init_results.append(result)
            
            assert all(init_results), "–ù–µ –≤—Å–µ –∞–≥–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã"
            
            # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
            client_data = {
                "company_name": "Test Company",
                "budget_range": "500000",
                "website": "test.com",
                "goals": "–£–≤–µ–ª–∏—á–∏—Ç—å —Ç—Ä–∞—Ñ–∏–∫"
            }
            
            # –ü—Ä–æ–≥–æ–Ω—è–µ–º —á–µ—Ä–µ–∑ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
            workflow_results = []
            for agent_id, agent in agents.items():
                result = await agent.process_task(client_data)
                workflow_results.append((agent_id, result))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            success_count = sum(1 for _, result in workflow_results if result.get('success'))
            assert success_count == len(agents), f"–£—Å–ø–µ—à–Ω–æ —Ç–æ–ª—å–∫–æ {success_count}/{len(agents)} –∞–≥–µ–Ω—Ç–æ–≤"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ RAG –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è
            rag_used = sum(1 for _, result in workflow_results if result.get('rag_enabled'))
            assert rag_used == len(agents), "RAG –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –Ω–µ –≤—Å–µ–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏"
            
            return True
        
        result = asyncio.run(run_workflow_test())
        if result:
            print("‚úÖ –¢–µ—Å—Ç 6: Workflow —Å–∏–º—É–ª—è—Ü–∏—è - OK")
            return True
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç 6: –û—à–∏–±–∫–∞ Workflow - {e}")
        return False

# –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
def test_performance():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    try:
        async def performance_test():
            start_time = datetime.now()
            
            # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ –∏ –º–Ω–æ–≥–æ –∑–Ω–∞–Ω–∏–π
            agent = MockBaseRAGAgent("performance_test")
            await agent.initialize_rag()
            
            # –î–æ–±–∞–≤–ª—è–µ–º 100 —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –∑–Ω–∞–Ω–∏–π
            for i in range(100):
                await agent.vector_store.add_knowledge(
                    f"–ó–Ω–∞–Ω–∏–µ –Ω–æ–º–µ—Ä {i} —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
                    {"id": i, "category": f"cat_{i % 10}"}
                )
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º 10 –ø–æ–∏—Å–∫–æ–≤
            for i in range(10):
                await agent.vector_store.search(f"–∑–∞–ø—Ä–æ—Å {i}", top_k=5)
            
            end_time = datetime.now()
            elapsed = (end_time - start_time).total_seconds()
            
            stats = agent.vector_store.get_stats()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –¥–æ–±–∞–≤–∏–ª–æ—Å—å
            assert stats["total_chunks"] >= 102  # 2 –±–∞–∑–æ–≤—ã—Ö + 100 –Ω–æ–≤—ã—Ö
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±—ã—Å—Ç—Ä–æ –¥–ª—è mock)
            assert elapsed < 5.0, f"–°–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–æ: {elapsed} —Å–µ–∫—É–Ω–¥"
            
            print(f"‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {stats['total_chunks']} –∑–Ω–∞–Ω–∏–π, {elapsed:.3f}—Å")
            return True
        
        result = asyncio.run(performance_test())
        if result:
            print("‚úÖ –¢–µ—Å—Ç 7: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - OK")
            return True
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç 7: –û—à–∏–±–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ - {e}")
        return False

# –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    tests = [
        ("–ò–º–ø–æ—Ä—Ç—ã", test_imports),
        ("FAISS —Å–∏–º—É–ª—è—Ü–∏—è", test_faiss_simulation),
        ("KnowledgeChunk", test_knowledge_chunk),
        ("MockRAGVectorStore", test_mock_vector_store),
        ("MockBaseRAGAgent", test_mock_rag_agent),
        ("Workflow —Å–∏–º—É–ª—è—Ü–∏—è", test_workflow_simulation),
        ("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", test_performance)
    ]
    
    print(f"\nüöÄ –ó–ê–ü–£–°–ö {len(tests)} –¢–ï–°–¢–û–í")
    print("-" * 40)
    
    passed = 0
    failed = 0
    
    for test_name, test_func in tests:
        print(f"\nüìã –¢–µ—Å—Ç: {test_name}")
        try:
            if test_func():
                passed += 1
            else:
                failed += 1
        except Exception as e:
            print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            failed += 1
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
    print(f"‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: {failed}")
    print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {passed/(passed+failed)*100:.1f}%")
    
    if failed == 0:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ù–æ—É—Ç–±—É–∫ –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É –≤ Google Colab!")
        return True
    else:
        print(f"\n‚ö†Ô∏è {failed} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ—à–ª–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")
        return False

if __name__ == "__main__":
    success = run_all_tests()
    sys.exit(0 if success else 1)