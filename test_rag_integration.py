#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–ª—è AI SEO Architects
"""

import asyncio
import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from knowledge.knowledge_manager import knowledge_manager
from agents.operational.lead_qualification import LeadQualificationAgent
from core.config import config


async def test_knowledge_manager():
    """–¢–µ—Å—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑–Ω–∞–Ω–∏–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ KnowledgeManager...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –±–∞–∑ –∑–Ω–∞–Ω–∏–π
    results = knowledge_manager.initialize_all_agents_knowledge()
    
    success_count = sum(results.values())
    total_count = len(results)
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:")
    print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}/{total_count}")
    print(f"   ‚ùå –ù–µ—É–¥–∞—á–Ω–æ: {total_count - success_count}/{total_count}")
    
    if success_count == 0:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω—É –±–∞–∑—É –∑–Ω–∞–Ω–∏–π!")
        return False
    
    # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –∑–Ω–∞–Ω–∏–π
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –∑–Ω–∞–Ω–∏–π...")
    
    test_queries = [
        ("lead_qualification", "lead scoring BANT methodology"),
        ("technical_seo_auditor", "Core Web Vitals optimization"),
        ("content_strategy", "keyword research E-E-A-T"),
        ("sales_conversation", "objection handling SPIN selling")
    ]
    
    for agent_name, query in test_queries:
        if results.get(agent_name):
            context = knowledge_manager.get_knowledge_context(agent_name, query, k=2)
            if context:
                print(f"   ‚úÖ {agent_name}: –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç ({len(context)} —Å–∏–º–≤–æ–ª–æ–≤)")
                print(f"      –§—Ä–∞–≥–º–µ–Ω—Ç: {context[:100]}...")
            else:
                print(f"   ‚ö†Ô∏è {agent_name}: –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            print(f"   ‚ùå {agent_name}: –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    return success_count > 0


async def test_agent_rag_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ RAG —Å –∞–≥–µ–Ω—Ç–æ–º"""
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –∞–≥–µ–Ω—Ç–∞–º–∏...")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ —Å RAG
    agent = LeadQualificationAgent()
    
    print(f"üìã –ê–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω:")
    print(f"   ID: {agent.agent_id}")
    print(f"   –£—Ä–æ–≤–µ–Ω—å: {agent.agent_level}")  
    print(f"   RAG –≤–∫–ª—é—á–µ–Ω: {agent.rag_enabled}")
    
    if not agent.rag_enabled:
        print("‚ùå RAG –Ω–µ –≤–∫–ª—é—á–µ–Ω –¥–ª—è –∞–≥–µ–Ω—Ç–∞!")
        return False
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∑–Ω–∞–Ω–∏–π
    test_query = "lead qualification BANT scoring methodology enterprise clients"
    context = await agent.get_knowledge_context(test_query)
    
    if context:
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–Ω–∞–Ω–∏–π ({len(context)} —Å–∏–º–≤–æ–ª–æ–≤)")
        print(f"   –§—Ä–∞–≥–º–µ–Ω—Ç: {context[:200]}...")
        
        # –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ —Å RAG
        test_prompt = "–ö–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä—É–π —ç—Ç–æ–≥–æ –ª–∏–¥–∞"
        test_data = {"company": "TechCorp", "industry": "fintech"}
        
        enhanced_prompt = agent.format_prompt_with_rag(test_prompt, test_data)
        
        print(f"\nüìù –ü—Ä–æ–º–ø—Ç –æ–±–æ–≥–∞—â–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∑–Ω–∞–Ω–∏–π:")
        print(f"   –î–ª–∏–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞: {len(enhanced_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"   –°–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç: {'–ö–û–ù–¢–ï–ö–°–¢ –ó–ù–ê–ù–ò–ô' in enhanced_prompt}")
        
        return True
    else:
        print("‚ùå –ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–Ω–∞–Ω–∏–π –Ω–µ –ø–æ–ª—É—á–µ–Ω!")
        return False


async def test_full_agent_task_with_rag():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π –∑–∞–¥–∞—á–∏ –∞–≥–µ–Ω—Ç–∞ —Å RAG"""
    print("\n‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —Å RAG...")
    
    agent = LeadQualificationAgent()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–∞
    task_data = {
        "input_data": {
            "company_name": "TechCorp Solutions",
            "industry": "fintech", 
            "company_size": "mid-market",
            "budget_range": "500000-1000000",
            "timeline": "Q1 2025",
            "email": "contact@techcorp.com",
            "contact_role": "CTO"
        },
        "task_type": "lead_analysis",
        "priority": "high"
    }
    
    try:
        start_time = datetime.now()
        result = await agent.process_task(task_data)
        end_time = datetime.now()
        
        processing_time = (end_time - start_time).total_seconds()
        
        print(f"‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ:")
        print(f"   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {processing_time:.2f}s")
        print(f"   –°—Ç–∞—Ç—É—Å: {result.get('success', False)}")
        
        if 'lead_score' in result:
            print(f"   Lead Score: {result['lead_score']}/100")
        
        if 'qualification_level' in result:
            print(f"   –ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è: {result['qualification_level']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É RAG
        rag_stats = agent.get_rag_stats()
        print(f"üìä RAG —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   RAG –≤–∫–ª—é—á–µ–Ω: {rag_stats['rag_enabled']}")
        print(f"   –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–∞: {rag_stats['knowledge_context_length']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ AI SEO Architects - RAG Integration Testing")
    print("=" * 60)
    print(f"üïí –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().isoformat()}")
    print(f"üìÅ RAG –≤–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {config.ENABLE_RAG}")
    print(f"üìä RAG –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
    print(f"   Chunk size: {config.RAG_CHUNK_SIZE}")
    print(f"   Chunk overlap: {config.RAG_CHUNK_OVERLAP}")
    print(f"   Top K: {config.RAG_TOP_K}")
    print(f"   Similarity threshold: {config.RAG_SIMILARITY_THRESHOLD}")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not config.OPENAI_API_KEY:
        print("‚ö†Ô∏è OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å")
    
    test_results = []
    
    # –¢–µ—Å—Ç 1: –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–Ω–∞–Ω–∏–π
    result1 = await test_knowledge_manager()
    test_results.append(("KnowledgeManager", result1))
    
    if not result1:
        print("\n‚ùå –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        return
    
    # –¢–µ—Å—Ç 2: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è RAG —Å –∞–≥–µ–Ω—Ç–æ–º
    result2 = await test_agent_rag_integration()
    test_results.append(("Agent RAG Integration", result2))
    
    # –¢–µ—Å—Ç 3: –ü–æ–ª–Ω–∞—è –∑–∞–¥–∞—á–∞ —Å RAG
    result3 = await test_full_agent_task_with_rag()
    test_results.append(("Full Task with RAG", result3))
    
    # –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print("=" * 60)
    
    for test_name, result in test_results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"   {test_name:<25} {status}")
    
    success_count = sum(1 for _, result in test_results if result)
    total_count = len(test_results)
    
    print(f"\nüéØ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{total_count} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if success_count == total_count:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã RAG –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("üöÄ RAG —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
    
    print(f"üïí –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().isoformat()}")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()