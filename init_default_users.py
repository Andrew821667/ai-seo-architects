#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ PostgreSQL
–°–æ–∑–¥–∞–µ—Ç admin, manager, operator –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ –±–∞–∑–µ
"""

import asyncio
import uuid
from datetime import datetime
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from passlib.context import CryptContext

from api.database.connection import get_db_connection
from api.database.models import User as UserModel


# –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")


def get_password_hash(password: str) -> str:
    """–•–µ—à–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å"""
    return pwd_context.hash(password)


# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_USERS = [
    {
        "id": uuid.uuid4(),
        "username": "admin",
        "email": "admin@ai-seo-architects.com",
        "full_name": "System Administrator",
        "password_hash": get_password_hash("secret"),
        "role": "admin",
        "permissions": [
            "agents:read", "agents:write", "agents:delete",
            "campaigns:read", "campaigns:write", "campaigns:delete",
            "clients:read", "clients:write", "clients:delete",
            "analytics:read", "system:admin"
        ],
        "is_active": True,
        "created_at": datetime.now(),
        "updated_at": datetime.now()
    },
    {
        "id": uuid.uuid4(),
        "username": "manager",
        "email": "manager@ai-seo-architects.com",
        "full_name": "SEO Manager",
        "password_hash": get_password_hash("secret"),
        "role": "manager",
        "permissions": [
            "agents:read", "agents:write",
            "campaigns:read", "campaigns:write",
            "clients:read", "clients:write",
            "analytics:read"
        ],
        "is_active": True,
        "created_at": datetime.now(),
        "updated_at": datetime.now()
    },
    {
        "id": uuid.uuid4(),
        "username": "operator",
        "email": "operator@ai-seo-architects.com", 
        "full_name": "SEO Operator",
        "password_hash": get_password_hash("secret"),
        "role": "operator",
        "permissions": [
            "agents:read",
            "campaigns:read",
            "clients:read",
            "analytics:read"
        ],
        "is_active": True,
        "created_at": datetime.now(),
        "updated_at": datetime.now()
    }
]


async def init_default_users():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ PostgreSQL"""
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...")
    
    try:
        async with get_db_connection() as db:
            created_count = 0
            
            for user_data in DEFAULT_USERS:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                result = await db.execute(
                    select(UserModel).where(UserModel.username == user_data["username"])
                )
                existing_user = result.scalar_one_or_none()
                
                if existing_user:
                    print(f"   ‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['username']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    continue
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                new_user = UserModel(**user_data)
                db.add(new_user)
                created_count += 1
                
                print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data['username']} ({user_data['role']})")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if created_count > 0:
                await db.commit()
                print(f"\nüéâ –°–æ–∑–¥–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {created_count}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                print("\nüìã –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:")
                print("   Username: admin     | Password: secret | Role: admin")
                print("   Username: manager   | Password: secret | Role: manager")
                print("   Username: operator  | Password: secret | Role: operator")
                print("\n‚ö†Ô∏è  –í–ê–ñ–ù–û: –°–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª–∏ –≤ production –æ–∫—Ä—É–∂–µ–Ω–∏–∏!")
            else:
                print("\nüìã –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        raise


async def check_users_status():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ"""
    print("\nüìä –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
    
    try:
        async with get_db_connection() as db:
            result = await db.execute(select(UserModel))
            users = result.scalars().all()
            
            if not users:
                print("   üì≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            print(f"   üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
            
            for user in users:
                status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if user.is_active else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
                last_login = user.last_login.strftime("%Y-%m-%d %H:%M") if user.last_login else "–ù–∏–∫–æ–≥–¥–∞"
                
                print(f"   - {user.username:10} | {user.role:8} | {status} | –í—Ö–æ–¥: {last_login}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîê AI SEO Architects - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("=" * 60)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await init_default_users()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        await check_users_status()
        
        print("\n‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1
    
    return 0


if __name__ == "__main__":
    try:
        exit_code = asyncio.run(main())
        exit(exit_code)
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        exit(1)
    except Exception as e:
        print(f"\nüí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        exit(1)