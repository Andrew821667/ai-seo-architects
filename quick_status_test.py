#!/usr/bin/env python3
"""
üöÄ –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö 14 –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ LLM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ Python path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

async def quick_agent_test():
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
    print("üß™ –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –í–°–ï–• 14 –ê–ì–ï–ù–¢–û–í")
    print("=" * 60)
    
    agents_to_test = [
        # Executive Level
        ("agents.executive.chief_seo_strategist", "ChiefSEOStrategistAgent"),
        ("agents.executive.business_development_director", "BusinessDevelopmentDirectorAgent"),
        
        # Management Level  
        ("agents.management.task_coordination", "TaskCoordinationAgent"),
        ("agents.management.sales_operations_manager", "SalesOperationsManagerAgent"),
        ("agents.management.technical_seo_operations_manager", "TechnicalSEOOperationsManagerAgent"),
        ("agents.management.client_success_manager", "ClientSuccessManagerAgent"),
        
        # Operational Level
        ("agents.operational.lead_qualification", "LeadQualificationAgent"),
        ("agents.operational.proposal_generation", "ProposalGenerationAgent"),
        ("agents.operational.sales_conversation", "SalesConversationAgent"),
        ("agents.operational.technical_seo_auditor", "TechnicalSEOAuditorAgent"),
        ("agents.operational.content_strategy", "ContentStrategyAgent"),
        ("agents.operational.link_building", "LinkBuildingAgent"),
        ("agents.operational.competitive_analysis", "CompetitiveAnalysisAgent"),
        ("agents.operational.reporting", "ReportingAgent")
    ]
    
    successful = 0
    failed = 0
    
    for module_path, class_name in agents_to_test:
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å
            module = __import__(module_path, fromlist=[class_name])
            agent_class = getattr(module, class_name)
            
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–≥–µ–Ω—Ç–∞
            agent = agent_class()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
            has_agent_id = hasattr(agent, 'agent_id') and agent.agent_id
            has_openai_client = hasattr(agent, 'openai_client')
            has_process_method = hasattr(agent, 'process_task')
            has_system_prompt = hasattr(agent, 'get_system_prompt')
            
            if has_agent_id and has_process_method:
                print(f"‚úÖ {class_name} - OK (ID: {agent.agent_id})")
                if has_openai_client:
                    print(f"   ü§ñ OpenAI –≥–æ—Ç–æ–≤")
                if has_system_prompt:
                    print(f"   üí¨ System prompt –≥–æ—Ç–æ–≤")
                successful += 1
            else:
                print(f"‚ö†Ô∏è {class_name} - –ß–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                failed += 1
                
        except Exception as e:
            print(f"‚ùå {class_name} - –û—à–∏–±–∫–∞: {str(e)[:50]}")
            failed += 1
    
    print("\n" + "=" * 60)
    print(f"üìä –ò–¢–û–ì–ò –ë–´–°–¢–†–û–ô –ü–†–û–í–ï–†–ö–ò:")
    print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful}/14 ({(successful/14)*100:.1f}%)")
    print(f"   ‚ùå –û—à–∏–±–∫–∏: {failed}/14")
    
    if successful == 14:
        print(f"üéâ –í–°–ï 14 –ê–ì–ï–ù–¢–û–í –ì–û–¢–û–í–´ –ö –†–ê–ë–û–¢–ï!")
        return 0
    else:
        print(f"‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
        return 1

if __name__ == "__main__":
    exit_code = asyncio.run(quick_agent_test())
    sys.exit(exit_code)