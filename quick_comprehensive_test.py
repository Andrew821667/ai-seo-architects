#!/usr/bin/env python3
"""
üöÄ –ë—ã—Å—Ç—Ä—ã–π –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å–∏—Å—Ç–µ–º—ã AI SEO Architects
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
"""

import asyncio
import time
import json
from datetime import datetime
from typing import Dict, Any, List
import traceback

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
from fastapi.testclient import TestClient

# –ò–º–ø–æ—Ä—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
from api.main import app
from agents import AGENT_CLASSES
from core.orchestrator import AgentOrchestrator
from core.config import config
from core.data_providers.factory import DataProviderFactory
from core.mcp.agent_manager import MCPAgentManager

class QuickSystemTester:
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç–µ—Ä —Å–∏—Å—Ç–µ–º—ã AI SEO Architects"""
    
    def __init__(self):
        self.results = {}
        self.start_time = time.time()
        
    def log(self, message: str, level: str = "INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å timestamp"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")
    
    async def run_all_tests(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        self.log("üöÄ –ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AI SEO Architects")
        
        # 1. –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.results['core'] = await self.test_core_components()
        
        # 2. Data Providers
        self.results['data_providers'] = await self.test_data_providers()
        
        # 3. –í—ã–±–æ—Ä–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤ (–ø–æ –æ–¥–Ω–æ–º—É —Å –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è)
        self.results['agents'] = await self.test_sample_agents()
        
        # 4. MCP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
        self.results['mcp'] = await self.test_mcp_basic()
        
        # 5. API endpoints
        self.results['api'] = await self.test_api_basic()
        
        # 6. –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
        self.results['orchestrator'] = await self.test_orchestrator_basic()
        
        return self.generate_report()
    
    async def test_core_components(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        self.log("üì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        results = {}
        
        try:
            # –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            from core.config import load_config, get_config
            loaded_config = load_config()
            get_config_result = get_config()
            
            results['config'] = {
                'status': 'success',
                'provider_type': loaded_config.DATA_PROVIDER_TYPE,
                'models': f"{loaded_config.EXECUTIVE_MODEL}, {loaded_config.MANAGEMENT_MODEL}"
            }
            self.log("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            results['config'] = {'status': 'failed', 'error': str(e)}
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        
        try:
            # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤
            assert len(AGENT_CLASSES) == 14, f"–û–∂–∏–¥–∞–ª–æ—Å—å 14 –∞–≥–µ–Ω—Ç–æ–≤, –Ω–∞–π–¥–µ–Ω–æ {len(AGENT_CLASSES)}"
            results['agent_imports'] = {
                'status': 'success',
                'total_agents': len(AGENT_CLASSES),
                'agents': list(AGENT_CLASSES.keys())[:5]  # –ü–µ—Ä–≤—ã–µ 5 –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
            }
            self.log(f"‚úÖ –ò–º–ø–æ—Ä—Ç –∞–≥–µ–Ω—Ç–æ–≤: {len(AGENT_CLASSES)} –∞–≥–µ–Ω—Ç–æ–≤")
            
        except Exception as e:
            results['agent_imports'] = {'status': 'failed', 'error': str(e)}
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∞–≥–µ–Ω—Ç–æ–≤: {e}")
        
        return results
    
    async def test_data_providers(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
        self.log("üóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Data Providers...")
        results = {}
        
        try:
            # –¢–µ—Å—Ç Static Provider
            provider = DataProviderFactory.create_provider("static")
            assert provider is not None, "Static provider –Ω–µ —Å–æ–∑–¥–∞–Ω"
            
            # –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è)
            seo_data = await provider.get_seo_data("example.com")
            assert seo_data is not None, "SEO –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã"
            
            results['static_provider'] = {
                'status': 'success',
                'provider_type': type(provider).__name__,
                'confidence_score': seo_data.confidence_score,
                'domain': seo_data.domain
            }
            self.log("‚úÖ Static Provider —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
        except Exception as e:
            results['static_provider'] = {'status': 'failed', 'error': str(e)}
            self.log(f"‚ùå –û—à–∏–±–∫–∞ Static Provider: {e}")
        
        try:
            # –¢–µ—Å—Ç Factory
            available_providers = DataProviderFactory.get_available_providers()
            assert "static" in available_providers, "Static provider –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            
            results['factory'] = {
                'status': 'success',
                'available_providers': available_providers
            }
            self.log("‚úÖ Provider Factory —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
        except Exception as e:
            results['factory'] = {'status': 'failed', 'error': str(e)}
            self.log(f"‚ùå –û—à–∏–±–∫–∞ Provider Factory: {e}")
        
        return results
    
    async def test_sample_agents(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–æ—á–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ (–ø–æ –æ–¥–Ω–æ–º—É —Å –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è)"""
        self.log("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–æ—á–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤...")
        results = {}
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ –æ–¥–Ω–æ–º—É –∞–≥–µ–Ω—Ç—É —Å –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è
        sample_agents = {
            'executive': 'chief_seo_strategist',
            'management': 'task_coordination', 
            'operational': 'lead_qualification'
        }
        
        for level, agent_id in sample_agents.items():
            try:
                from agents import get_agent_instance
                agent = get_agent_instance(agent_id)
                
                if agent is not None:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
                    has_process_task = hasattr(agent, 'process_task')
                    has_agent_id = hasattr(agent, 'agent_id')
                    
                    results[f'{level}_agent'] = {
                        'status': 'success',
                        'agent_id': agent_id,
                        'has_process_task': has_process_task,
                        'has_agent_id': has_agent_id,
                        'agent_class': type(agent).__name__
                    }
                    self.log(f"‚úÖ {level.title()} –∞–≥–µ–Ω—Ç ({agent_id}) —Å–æ–∑–¥–∞–Ω")
                else:
                    results[f'{level}_agent'] = {
                        'status': 'failed',
                        'error': '–ê–≥–µ–Ω—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω'
                    }
                    self.log(f"‚ùå {level.title()} –∞–≥–µ–Ω—Ç ({agent_id}) –Ω–µ —Å–æ–∑–¥–∞–Ω")
                    
            except Exception as e:
                results[f'{level}_agent'] = {
                    'status': 'failed',
                    'error': str(e)
                }
                self.log(f"‚ùå –û—à–∏–±–∫–∞ {level} –∞–≥–µ–Ω—Ç–∞: {e}")
        
        return results
    
    async def test_mcp_basic(self):
        """–ë–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MCP"""
        self.log("üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MCP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
        results = {}
        
        try:
            manager = MCPAgentManager()
            assert manager is not None, "MCP Manager –Ω–µ —Å–æ–∑–¥–∞–Ω"
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤
            agent_types = await manager.get_available_agent_types()
            
            results['mcp_manager'] = {
                'status': 'success',
                'available_types': len(agent_types),
                'sample_types': agent_types[:3] if agent_types else []
            }
            self.log(f"‚úÖ MCP Manager: {len(agent_types)} —Ç–∏–ø–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤")
            
        except Exception as e:
            results['mcp_manager'] = {'status': 'failed', 'error': str(e)}
            self.log(f"‚ùå –û—à–∏–±–∫–∞ MCP: {e}")
        
        return results
    
    async def test_api_basic(self):
        """–ë–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API"""
        self.log("üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FastAPI...")
        results = {}
        
        try:
            with TestClient(app) as client:
                # Health endpoint
                health_response = client.get("/health")
                health_success = health_response.status_code == 200
                
                results['health_endpoint'] = {
                    'status': 'success' if health_success else 'failed',
                    'status_code': health_response.status_code,
                    'response_data': health_response.json() if health_success else None
                }
                
                if health_success:
                    self.log("‚úÖ API Health endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç")
                else:
                    self.log(f"‚ùå API Health endpoint: {health_response.status_code}")
                
                # Auth endpoint
                try:
                    auth_response = client.post("/auth/login", json={
                        "username": "admin",
                        "password": "secret"
                    })
                    auth_success = auth_response.status_code == 200
                    
                    results['auth_endpoint'] = {
                        'status': 'success' if auth_success else 'failed',
                        'status_code': auth_response.status_code
                    }
                    
                    if auth_success:
                        self.log("‚úÖ API Auth endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    else:
                        self.log(f"‚ùå API Auth endpoint: {auth_response.status_code}")
                        
                except Exception as e:
                    results['auth_endpoint'] = {'status': 'failed', 'error': str(e)}
                    self.log(f"‚ùå –û—à–∏–±–∫–∞ Auth endpoint: {e}")
                
        except Exception as e:
            results['api_basic'] = {'status': 'failed', 'error': str(e)}
            self.log(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")
        
        return results
    
    async def test_orchestrator_basic(self):
        """–ë–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        self.log("üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
        results = {}
        
        try:
            orchestrator = AgentOrchestrator()
            assert orchestrator is not None, "–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ —Å–æ–∑–¥–∞–Ω"
            
            # –°–æ–∑–¥–∞–Ω–∏–µ workflow –≥—Ä–∞—Ñ–∞
            workflow = orchestrator.create_workflow_graph()
            assert workflow is not None, "Workflow –≥—Ä–∞—Ñ –Ω–µ —Å–æ–∑–¥–∞–Ω"
            
            # –ö–æ–º–ø–∏–ª—è—Ü–∏—è workflow
            compiled = orchestrator.compile_workflow()
            assert compiled is not None, "Workflow –Ω–µ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω"
            
            results['orchestrator'] = {
                'status': 'success',
                'workflow_created': True,
                'workflow_compiled': True
            }
            self.log("‚úÖ –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
        except Exception as e:
            results['orchestrator'] = {'status': 'failed', 'error': str(e)}
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        
        return results
    
    def generate_report(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        total_duration = time.time() - self.start_time
        
        # –ü–æ–¥—Å—á–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∏ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
        total_tests = 0
        passed_tests = 0
        failed_tests = 0
        
        for category, tests in self.results.items():
            for test_name, test_result in tests.items():
                total_tests += 1
                if isinstance(test_result, dict) and test_result.get('status') == 'success':
                    passed_tests += 1
                else:
                    failed_tests += 1
        
        success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
        
        report = {
            "summary": {
                "total_tests": total_tests,
                "passed": passed_tests,
                "failed": failed_tests,
                "success_rate": round(success_rate, 2),
                "total_duration": round(total_duration, 2),
                "timestamp": datetime.now().isoformat()
            },
            "detailed_results": self.results,
            "system_status": "healthy" if success_rate >= 80 else "degraded" if success_rate >= 60 else "critical"
        }
        
        return report

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ AI SEO Architects - Quick Comprehensive Test")
    print("=" * 60)
    
    tester = QuickSystemTester()
    report = await tester.run_all_tests()
    
    print("\n" + "=" * 60)
    print("üìä –û–¢–ß–ï–¢ –ü–û –ë–´–°–¢–†–û–ú–£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Æ")
    print("=" * 60)
    
    summary = report["summary"]
    print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {summary['total_tests']}")
    print(f"   ‚Ä¢ –ü—Ä–æ–π–¥–µ–Ω–æ: {summary['passed']} ‚úÖ")
    print(f"   ‚Ä¢ –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {summary['failed']} ‚ùå")
    print(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {summary['success_rate']}%")
    print(f"   ‚Ä¢ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {summary['total_duration']:.2f} —Å–µ–∫")
    print(f"   ‚Ä¢ –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {report['system_status']}")
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\nüìã –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    for category, tests in report["detailed_results"].items():
        print(f"\nüîπ {category.upper()}:")
        for test_name, result in tests.items():
            if isinstance(result, dict):
                status = result.get('status', 'unknown')
                icon = "‚úÖ" if status == 'success' else "‚ùå"
                print(f"   {icon} {test_name}: {status}")
                if status == 'failed' and 'error' in result:
                    print(f"      Error: {result['error']}")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    report_file = f"QUICK_SYSTEM_TEST_REPORT_{timestamp}.json"
    
    with open(report_file, 'w', encoding='utf-8') as f:
        json.dump(report, f, ensure_ascii=False, indent=2)
    
    print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç
    if summary["success_rate"] >= 80:
        print("\nüéâ –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
        return 0
    elif summary["success_rate"] >= 60:
        print("\n‚ö†Ô∏è –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢ –° –ù–ï–ö–û–¢–û–†–´–ú–ò –ü–†–û–ë–õ–ï–ú–ê–ú–ò")
        return 0
    else:
        print("\nüö® –°–ò–°–¢–ï–ú–ê –ò–ú–ï–ï–¢ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´!")
        return 1

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    exit(exit_code)