#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π Docker –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã AI SEO Architects
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç PostgreSQL, Redis, Nginx, FastAPI, Prometheus, Grafana
"""

import asyncio
import aiohttp
import asyncpg
import redis.asyncio as redis
import sys
import os
import json
import time
from datetime import datetime
from typing import Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PATH
sys.path.append(os.path.dirname(os.path.abspath(__file__)))


class InfrastructureTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Docker –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
    
    def __init__(self):
        self.results = {}
        self.base_url = "http://localhost"
        self.api_url = f"{self.base_url}:8000"
        
        # Connection strings
        self.postgres_url = "postgresql://ai_seo_user:secure_password_change_me@localhost:5432/ai_seo_architects"
        self.redis_url = "redis://localhost:6379/0"
        
    async def test_postgresql(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ —Å—Ö–µ–º—ã"""
        print("\nüóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PostgreSQL...")
        
        result = {
            'service': 'postgresql',
            'status': 'unknown',
            'connection': False,
            'schema_exists': False,
            'tables_count': 0,
            'agents_count': 0,
            'error': None
        }
        
        try:
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
            conn = await asyncpg.connect(self.postgres_url)
            result['connection'] = True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ö–µ–º—ã ai_seo
            schema_exists = await conn.fetchval(
                "SELECT EXISTS(SELECT 1 FROM information_schema.schemata WHERE schema_name = 'ai_seo')"
            )
            result['schema_exists'] = schema_exists
            
            if schema_exists:
                # –°—á–∏—Ç–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ —Å—Ö–µ–º–µ ai_seo
                tables_count = await conn.fetchval(
                    "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'ai_seo'"
                )
                result['tables_count'] = tables_count
                
                # –°—á–∏—Ç–∞–µ–º –∞–≥–µ–Ω—Ç–æ–≤
                try:
                    agents_count = await conn.fetchval("SELECT COUNT(*) FROM ai_seo.agents")
                    result['agents_count'] = agents_count
                except:
                    pass
            
            await conn.close()
            result['status'] = 'healthy'
            print(f"   ‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: OK")
            print(f"   ‚úÖ –°—Ö–µ–º–∞ ai_seo: {'–ï—Å—Ç—å' if schema_exists else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
            print(f"   ‚úÖ –¢–∞–±–ª–∏—Ü: {result['tables_count']}")
            print(f"   ‚úÖ –ê–≥–µ–Ω—Ç–æ–≤: {result['agents_count']}")
            
        except Exception as e:
            result['error'] = str(e)
            result['status'] = 'unhealthy'
            print(f"   ‚ùå PostgreSQL –æ—à–∏–±–∫–∞: {e}")
        
        return result
    
    async def test_redis(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
        print("\nüî¥ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Redis...")
        
        result = {
            'service': 'redis',
            'status': 'unknown',
            'connection': False,
            'set_get_test': False,
            'info': {},
            'error': None
        }
        
        try:
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
            r = redis.from_url(self.redis_url)
            
            # Ping test
            ping_result = await r.ping()
            result['connection'] = ping_result
            
            # Set/Get test
            test_key = "infrastructure_test"
            test_value = {"timestamp": datetime.now().isoformat(), "test": True}
            
            await r.set(test_key, json.dumps(test_value), ex=60)  # TTL 60 —Å–µ–∫—É–Ω–¥
            retrieved_value = await r.get(test_key)
            
            if retrieved_value:
                retrieved_data = json.loads(retrieved_value)
                result['set_get_test'] = retrieved_data.get('test', False)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Redis
            info = await r.info()
            result['info'] = {
                'redis_version': info.get('redis_version', 'unknown'),
                'used_memory_human': info.get('used_memory_human', 'unknown'),
                'connected_clients': info.get('connected_clients', 0)
            }
            
            # Cleanup
            await r.delete(test_key)
            await r.close()
            
            result['status'] = 'healthy'
            print(f"   ‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: OK")
            print(f"   ‚úÖ Set/Get —Ç–µ—Å—Ç: {'OK' if result['set_get_test'] else 'FAIL'}")
            print(f"   ‚úÖ –í–µ—Ä—Å–∏—è: {result['info']['redis_version']}")
            
        except Exception as e:
            result['error'] = str(e)
            result['status'] = 'unhealthy'
            print(f"   ‚ùå Redis –æ—à–∏–±–∫–∞: {e}")
        
        return result
    
    async def test_api_server(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FastAPI —Å–µ—Ä–≤–µ—Ä–∞"""
        print("\nüöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FastAPI —Å–µ—Ä–≤–µ—Ä–∞...")
        
        result = {
            'service': 'api_server',
            'status': 'unknown',
            'health_check': False,
            'docs_accessible': False,
            'dashboard_accessible': False,
            'response_times': {},
            'error': None
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                
                # Health check
                start_time = time.time()
                async with session.get(f"{self.api_url}/health") as resp:
                    if resp.status == 200:
                        result['health_check'] = True
                        health_data = await resp.json()
                        result['health_data'] = health_data
                    result['response_times']['health'] = time.time() - start_time
                
                # API Docs
                start_time = time.time()
                async with session.get(f"{self.api_url}/api/docs") as resp:
                    result['docs_accessible'] = resp.status == 200
                    result['response_times']['docs'] = time.time() - start_time
                
                # Dashboard
                start_time = time.time()
                async with session.get(f"{self.api_url}/dashboard") as resp:
                    result['dashboard_accessible'] = resp.status == 200
                    result['response_times']['dashboard'] = time.time() - start_time
            
            result['status'] = 'healthy' if result['health_check'] else 'unhealthy'
            print(f"   ‚úÖ Health check: {'OK' if result['health_check'] else 'FAIL'}")
            print(f"   ‚úÖ API Docs: {'OK' if result['docs_accessible'] else 'FAIL'}")
            print(f"   ‚úÖ Dashboard: {'OK' if result['dashboard_accessible'] else 'FAIL'}")
            print(f"   ‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {result['response_times']['health']:.3f}s")
            
        except Exception as e:
            result['error'] = str(e)
            result['status'] = 'unhealthy'
            print(f"   ‚ùå API —Å–µ—Ä–≤–µ—Ä –æ—à–∏–±–∫–∞: {e}")
        
        return result
    
    async def test_nginx(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Nginx reverse proxy"""
        print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Nginx...")
        
        result = {
            'service': 'nginx',
            'status': 'unknown',
            'reverse_proxy': False,
            'health_forwarding': False,
            'static_serving': False,
            'error': None
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø–æ—Ä—Ç 80 (Nginx)
                try:
                    async with session.get(f"{self.base_url}/health") as resp:
                        if resp.status == 200:
                            result['reverse_proxy'] = True
                            result['health_forwarding'] = True
                except:
                    pass
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
                try:
                    async with session.get(f"{self.base_url}/dashboard") as resp:
                        result['static_serving'] = resp.status == 200
                except:
                    pass
            
            result['status'] = 'healthy' if result['reverse_proxy'] else 'unhealthy'
            print(f"   ‚úÖ Reverse proxy: {'OK' if result['reverse_proxy'] else 'FAIL'}")
            print(f"   ‚úÖ Health forwarding: {'OK' if result['health_forwarding'] else 'FAIL'}")
            print(f"   ‚úÖ Static serving: {'OK' if result['static_serving'] else 'FAIL'}")
            
        except Exception as e:
            result['error'] = str(e)
            result['status'] = 'unhealthy'
            print(f"   ‚ùå Nginx –æ—à–∏–±–∫–∞: {e}")
        
        return result
    
    async def test_monitoring(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Prometheus –∏ Grafana"""
        print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        
        result = {
            'service': 'monitoring',
            'status': 'unknown',
            'prometheus': False,
            'grafana': False,
            'error': None
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                
                # Prometheus
                try:
                    async with session.get("http://localhost:9090/api/v1/query?query=up") as resp:
                        result['prometheus'] = resp.status == 200
                except:
                    pass
                
                # Grafana
                try:
                    async with session.get("http://localhost:3000/api/health") as resp:
                        result['grafana'] = resp.status == 200
                except:
                    pass
            
            result['status'] = 'healthy' if result['prometheus'] and result['grafana'] else 'partial'
            print(f"   ‚úÖ Prometheus: {'OK' if result['prometheus'] else 'FAIL'}")
            print(f"   ‚úÖ Grafana: {'OK' if result['grafana'] else 'FAIL'}")
            
        except Exception as e:
            result['error'] = str(e)
            result['status'] = 'unhealthy'
            print(f"   ‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—à–∏–±–∫–∞: {e}")
        
        return result
    
    async def run_comprehensive_test(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        print("üê≥ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï DOCKER –ò–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–´")
        print("=" * 70)
        print(f"üïí –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().isoformat()}")
        
        # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
        test_results = {
            'timestamp': datetime.now().isoformat(),
            'tests': {}
        }
        
        test_results['tests']['postgresql'] = await self.test_postgresql()
        test_results['tests']['redis'] = await self.test_redis()
        test_results['tests']['api_server'] = await self.test_api_server()
        test_results['tests']['nginx'] = await self.test_nginx()
        test_results['tests']['monitoring'] = await self.test_monitoring()
        
        # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        total_services = len(test_results['tests'])
        healthy_services = sum(1 for test in test_results['tests'].values() if test['status'] == 'healthy')
        partial_services = sum(1 for test in test_results['tests'].values() if test['status'] == 'partial')
        
        # –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
        print("\n" + "=" * 70)
        print("üìã –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
        print("=" * 70)
        
        for service_name, test_result in test_results['tests'].items():
            status = test_result['status']
            if status == 'healthy':
                icon = "‚úÖ"
            elif status == 'partial':
                icon = "‚ö†Ô∏è"
            else:
                icon = "‚ùå"
            
            print(f"   {icon} {service_name.upper()}: {status}")
        
        success_rate = (healthy_services / total_services) * 100
        print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   üéØ –†–∞–±–æ—Ç–∞—é—â–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤: {healthy_services}/{total_services} ({success_rate:.1f}%)")
        print(f"   ‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö: {partial_services}")
        print(f"   ‚ùå –ù–µ—Ä–∞–±–æ—Ç–∞—é—â–∏—Ö: {total_services - healthy_services - partial_services}")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        if success_rate >= 90:
            grade = "A+"
            status = "üéâ –û–¢–õ–ò–ß–ù–û!"
            message = "–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ production"
        elif success_rate >= 80:
            grade = "A"
            status = "‚úÖ –•–û–†–û–®–û!"
            message = "–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"
        elif success_rate >= 60:
            grade = "B"
            status = "‚ö†Ô∏è –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û"
            message = "–ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è"
        else:
            grade = "C"
            status = "‚ùå –ö–†–ò–¢–ò–ß–ù–û"
            message = "–°–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π"
        
        print(f"\nüèÜ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê:")
        print(f"   {status} –û—Ü–µ–Ω–∫–∞: {grade} ({success_rate:.1f}%)")
        print(f"   üí¨ {message}")
        
        test_results['summary'] = {
            'total_services': total_services,
            'healthy_services': healthy_services,
            'partial_services': partial_services,
            'success_rate': success_rate,
            'grade': grade,
            'status': status,
            'message': message
        }
        
        print(f"\nüïí –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {datetime.now().isoformat()}")
        
        return test_results


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        tester = InfrastructureTester()
        results = await tester.run_comprehensive_test()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
        success_rate = results['summary']['success_rate']
        if success_rate >= 80:
            sys.exit(0)
        else:
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\nüëã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())