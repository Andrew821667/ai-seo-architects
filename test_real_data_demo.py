#!/usr/bin/env python3
"""
Comprehensive —Ç–µ—Å—Ç –≤—Å–µ—Ö 14 –∞–≥–µ–Ω—Ç–æ–≤ AI SEO Architects –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
"""

import asyncio
import json
import time
from datetime import datetime
from typing import Dict, Any, List
import os

# –ò–º–ø–æ—Ä—Ç—ã –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
from mock_data_provider import MockDataProvider
from agents.executive.chief_seo_strategist import ChiefSEOStrategistAgent
from agents.executive.business_development_director import BusinessDevelopmentDirectorAgent
from agents.management.task_coordination import TaskCoordinationAgent
from agents.management.sales_operations_manager import SalesOperationsManagerAgent
from agents.management.technical_seo_operations_manager import TechnicalSEOOperationsManagerAgent
from agents.management.client_success_manager import ClientSuccessManagerAgent
from agents.operational.lead_qualification import LeadQualificationAgent
from agents.operational.proposal_generation import ProposalGenerationAgent
from agents.operational.sales_conversation import SalesConversationAgent
from agents.operational.technical_seo_auditor import TechnicalSEOAuditorAgent
from agents.operational.content_strategy import ContentStrategyAgent
from agents.operational.link_building import LinkBuildingAgent
from agents.operational.competitive_analysis import CompetitiveAnalysisAgent
from agents.operational.reporting import ReportingAgent


class RealDataTester:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–µ—Ä–∞"""
        self.provider = MockDataProvider()
        self.results = []
        self.markdown_content = []
        
        # –†–µ–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.real_company_data = {
            "company_name": "DigitalMarket Pro",
            "industry": "ecommerce", 
            "domain": "digitalmarket-pro.ru",
            "email": "ceo@digitalmarket-pro.ru",
            "contact_name": "–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞",
            "contact_role": "CEO",
            "employee_count": "50-100",
            "estimated_revenue": "50000000-100000000",
            "monthly_budget": "500000-1000000",
            "timeline": "3-6 –º–µ—Å—è—Ü–µ–≤",
            "pain_points": [
                "–ù–∏–∑–∫–∞—è –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∞—è –≤–∏–¥–∏–º–æ—Å—Ç—å –≤ –ø–æ–∏—Å–∫–µ",
                "–í—ã—Å–æ–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π —Ä–µ–∫–ª–∞–º—ã", 
                "–°–ª–∞–±–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è —Å SEO —Ç—Ä–∞—Ñ–∏–∫–∞",
                "–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"
            ],
            "lead_source": "content_marketing",
            "current_seo_spend": "250000",
            "competitors": [
                "wildberries.ru",
                "ozon.ru", 
                "market.yandex.ru"
            ],
            "target_keywords": [
                "–∫—É–ø–∏—Ç—å –æ–Ω–ª–∞–π–Ω",
                "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω",
                "–¥–æ—Å—Ç–∞–≤–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤",
                "—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –∫–æ–º–º–µ—Ä—Ü–∏—è"
            ],
            "current_traffic": "50000",
            "target_traffic": "200000",
            "business_goals": [
                "–£–≤–µ–ª–∏—á–∏—Ç—å –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π —Ç—Ä–∞—Ñ–∏–∫ –≤ 4 —Ä–∞–∑–∞",
                "–°–Ω–∏–∑–∏—Ç—å CAC –Ω–∞ 40%",
                "–ü–æ–≤—ã—Å–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Å–∏—é –¥–æ 3.5%"
            ]
        }
    
    def _print_section(self, title: str, emoji: str = "üîç"):
        """–ü–µ—á–∞—Ç—å —Å–µ–∫—Ü–∏–∏ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        separator = "=" * 80
        print(f"\n{separator}")
        print(f"{emoji} {title}")
        print(separator)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ markdown
        self.markdown_content.append(f"\n## {emoji} {title}\n")
    
    def _print_result(self, agent_name: str, result: Dict[str, Any], duration: float):
        """–ü–µ—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞"""
        print(f"\nü§ñ **{agent_name}**")
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.3f}s")
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {'SUCCESS' if result.get('success', True) else 'ERROR'}")
        
        # –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        key_metrics = self._extract_key_metrics(agent_name, result)
        if key_metrics:
            print(f"üìä –ö–ª—é—á–µ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
            for metric, value in key_metrics.items():
                print(f"   ‚Ä¢ {metric}: {value}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ markdown
        md_content = f"\n### ü§ñ {agent_name}\n\n"
        md_content += f"- **–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:** {duration:.3f}s\n"
        md_content += f"- **–°—Ç–∞—Ç—É—Å:** {'‚úÖ SUCCESS' if result.get('success', True) else '‚ùå ERROR'}\n"
        
        if key_metrics:
            md_content += f"\n**üìä –ö–ª—é—á–µ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:**\n"
            for metric, value in key_metrics.items():
                md_content += f"- **{metric}:** {value}\n"
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if result.get('recommendations') or result.get('insights') or result.get('analysis'):
            md_content += f"\n**üìã –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:**\n"
            if result.get('recommendations'):
                md_content += f"- **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:** {len(result['recommendations'])} –ø—É–Ω–∫—Ç–æ–≤\n"
            if result.get('insights'):
                md_content += f"- **–ò–Ω—Å–∞–π—Ç—ã:** {len(result['insights'])} –Ω–∞–π–¥–µ–Ω–æ\n"
            if result.get('analysis'):
                md_content += f"- **–ê–Ω–∞–ª–∏–∑:** –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω\n"
        
        self.markdown_content.append(md_content)
        
        print("") # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
    
    def _extract_key_metrics(self, agent_name: str, result: Dict[str, Any]) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞"""
        metrics = {}
        
        if "Lead Qualification" in agent_name:
            metrics["Lead Score"] = f"{result.get('lead_score', 0)}/100"
            metrics["Qualification"] = result.get('qualification', 'Unknown')
            metrics["Deal Value"] = f"{result.get('estimated_deal_value', 0):,} ‚ÇΩ"
            metrics["Close Probability"] = f"{result.get('estimated_close_probability', 0)*100:.1f}%"
        
        elif "Proposal Generation" in agent_name:
            metrics["Proposal Value"] = f"{result.get('total_annual_value', 0):,} ‚ÇΩ/–≥–æ–¥"
            metrics["Monthly Cost"] = f"{result.get('monthly_cost', 0):,} ‚ÇΩ/–º–µ—Å"
            metrics["Confidence"] = f"{result.get('confidence', 0)*100:.1f}%"
        
        elif "Sales Conversation" in agent_name:
            metrics["Conversation Quality"] = result.get('conversation_quality', 'Unknown')
            metrics["Close Probability"] = f"{result.get('close_probability', 0)*100:.1f}%"  
            metrics["Next Action"] = result.get('next_action', 'Unknown')
        
        elif "Technical SEO Auditor" in agent_name:
            metrics["Audit Score"] = f"{result.get('audit_score', 0)}/100"
            metrics["Critical Issues"] = result.get('critical_issues_count', 0)
            metrics["Quality Rating"] = result.get('quality_rating', 'Unknown')
        
        elif "Content Strategy" in agent_name:
            metrics["Keywords Found"] = result.get('total_keywords', 0)
            metrics["Content Budget"] = f"{result.get('recommended_budget', 0):,} ‚ÇΩ"
            metrics["Strategy Quality"] = result.get('strategy_quality', 'Unknown')
        
        elif "Business Development" in agent_name:
            metrics["Enterprise Score"] = f"{result.get('enterprise_score', 0)}/100"
            metrics["Deal Size"] = f"{result.get('estimated_deal_size', 0):,} ‚ÇΩ"
            metrics["Strategic Impact"] = result.get('strategic_impact', 'Unknown')
        
        elif "Chief SEO Strategist" in agent_name:
            metrics["Strategic Score"] = f"{result.get('strategic_score', 0)}/100"
            metrics["Investment Required"] = f"{result.get('recommended_investment', 0):,} ‚ÇΩ"
            metrics["Impact Level"] = result.get('strategic_impact', 'Unknown')
        
        elif "Sales Operations" in agent_name:
            metrics["Pipeline Health"] = f"{result.get('pipeline_health_score', 0):.1f}/100"
            metrics["Insights Count"] = len(result.get('key_insights', []))
            metrics["Priority Actions"] = len(result.get('priority_actions', []))
        
        elif "Technical SEO Operations" in agent_name:
            metrics["Operations Health"] = f"{result.get('operations_health_score', 0):.1f}/100"
            metrics["Technical Issues"] = len(result.get('technical_issues', []))
            metrics["CWV Rating"] = result.get('cwv_summary', {}).get('overall_rating', 'Unknown')
        
        elif "Client Success" in agent_name:
            metrics["Health Score"] = f"{result.get('overall_health_score', 0)}/100"
            metrics["Health Status"] = result.get('health_status', 'Unknown')
            metrics["NPS Score"] = f"{result.get('nps_score', 0)}/10"
        
        elif "Link Building" in agent_name:
            metrics["Link Prospects"] = result.get('total_prospects', 0)
            metrics["High Quality Links"] = result.get('high_quality_count', 0)
            metrics["Monthly Capacity"] = result.get('monthly_capacity', 0)
        
        elif "Competitive Analysis" in agent_name:
            metrics["Competitors Analyzed"] = len(result.get('competitor_analysis', []))
            metrics["SERP Ownership"] = f"{result.get('serp_ownership', 0)*100:.1f}%"
            metrics["High Priority Opportunities"] = result.get('high_priority_opportunities', 0)
        
        elif "Reporting" in agent_name:
            metrics["Report Type"] = result.get('report_type', 'Unknown')
            metrics["Confidence"] = f"{result.get('confidence', 0)*100:.1f}%"
            metrics["Export Formats"] = len(result.get('export_formats', []))
        
        elif "Task Coordination" in agent_name:
            metrics["Assigned Agent"] = result.get('assigned_agent', 'Unknown')
            metrics["Priority Score"] = result.get('priority', 0)
            metrics["Estimated Time"] = result.get('estimated_completion_time', 'Unknown')
        
        return metrics
    
    async def test_all_agents(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö 14 –∞–≥–µ–Ω—Ç–æ–≤"""
        print("üöÄ –ó–ê–ü–£–°–ö COMPREHENSIVE –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø AI SEO ARCHITECTS")
        print(f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"üè¢ –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è: {self.real_company_data['company_name']}")
        print(f"üè≠ –ò–Ω–¥—É—Å—Ç—Ä–∏—è: {self.real_company_data['industry']}")
        print(f"üåê –î–æ–º–µ–Ω: {self.real_company_data['domain']}")
        
        # Markdown –∑–∞–≥–æ–ª–æ–≤–æ–∫
        self.markdown_content.append(f"""# ü§ñ AI SEO Architects - Comprehensive Test Results

**–î–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}  
**–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è:** {self.real_company_data['company_name']}  
**–ò–Ω–¥—É—Å—Ç—Ä–∏—è:** {self.real_company_data['industry']}  
**–î–æ–º–µ–Ω:** {self.real_company_data['domain']}  

## üìã –û–±–∑–æ—Ä —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

Comprehensive —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö 14 –∞–≥–µ–Ω—Ç–æ–≤ AI SEO Architects –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –∫–æ–º–º–µ—Ä—Ü–∏–∏.
""")
        
        # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        agents_to_test = [
            # Executive Level
            ("Chief SEO Strategist", ChiefSEOStrategistAgent, "seo_strategic_analysis"),
            ("Business Development Director", BusinessDevelopmentDirectorAgent, "enterprise_assessment"),
            
            # Management Level  
            ("Task Coordination Agent", TaskCoordinationAgent, "task_routing"),
            ("Sales Operations Manager", SalesOperationsManagerAgent, "sales_operations_analysis"),
            ("Technical SEO Operations Manager", TechnicalSEOOperationsManagerAgent, "comprehensive_operations_analysis"),
            ("Client Success Manager", ClientSuccessManagerAgent, "comprehensive_client_analysis"),
            
            # Operational Level
            ("Lead Qualification Agent", LeadQualificationAgent, "lead_qualification"),
            ("Proposal Generation Agent", ProposalGenerationAgent, "proposal_generation"),
            ("Sales Conversation Agent", SalesConversationAgent, "full_sales_conversation"),
            ("Technical SEO Auditor Agent", TechnicalSEOAuditorAgent, "full_technical_audit"),
            ("Content Strategy Agent", ContentStrategyAgent, "comprehensive_content_strategy"),
            ("Link Building Agent", LinkBuildingAgent, "comprehensive_analysis"),
            ("Competitive Analysis Agent", CompetitiveAnalysisAgent, "comprehensive_analysis"),
            ("Reporting Agent", ReportingAgent, "comprehensive_analysis"),
        ]
        
        total_agents = len(agents_to_test)
        passed_tests = 0
        total_time = 0
        
        self._print_section("EXECUTIVE LEVEL AGENTS", "üëë")
        
        for i, (agent_name, agent_class, task_type) in enumerate(agents_to_test):
            try:
                # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–æ–≤–æ–π —Å–µ–∫—Ü–∏–∏
                if i == 2:  # Management Level
                    self._print_section("MANAGEMENT LEVEL AGENTS", "üéõÔ∏è")
                elif i == 6:  # Operational Level  
                    self._print_section("OPERATIONAL LEVEL AGENTS", "‚öôÔ∏è")
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
                agent = agent_class(data_provider=self.provider)
                
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
                task_data = self._prepare_task_data(agent_name, task_type)
                
                # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
                start_time = time.time()
                result = await agent.process_task(task_data)
                duration = time.time() - start_time
                total_time += duration
                
                # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                self._print_result(agent_name, result, duration)
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
                self.results.append({
                    "agent": agent_name,
                    "success": result.get('success', True),
                    "duration": duration,
                    "result": result
                })
                
                if result.get('success', True):
                    passed_tests += 1
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
                await asyncio.sleep(0.1)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è {agent_name}: {str(e)}")
                self.markdown_content.append(f"\n### ‚ùå {agent_name}\n\n**–û—à–∏–±–∫–∞:** {str(e)}\n")
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        self._print_final_report(passed_tests, total_agents, total_time)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ markdown —Ñ–∞–π–ª–∞
        await self._save_markdown_report()
    
    def _prepare_task_data(self, agent_name: str, task_type: str) -> Dict[str, Any]:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞"""
        base_data = {
            "input_data": {
                **self.real_company_data,
                "task_type": task_type
            }
        }
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤
        if "Lead Qualification" in agent_name:
            base_data["input_data"].update({
                "company_name": self.real_company_data["company_name"],
                "email": self.real_company_data["email"],
                "industry": self.real_company_data["industry"],
                "budget_range": self.real_company_data["monthly_budget"],
                "employee_count": self.real_company_data["employee_count"],
                "pain_points": self.real_company_data["pain_points"],
                "timeline": self.real_company_data["timeline"]
            })
        
        elif "Technical SEO" in agent_name:
            base_data["input_data"].update({
                "domain": self.real_company_data["domain"],
                "industry": self.real_company_data["industry"],
                "current_traffic": self.real_company_data["current_traffic"]
            })
        
        elif "Content Strategy" in agent_name:
            base_data["input_data"].update({
                "domain": self.real_company_data["domain"], 
                "target_keywords": self.real_company_data["target_keywords"],
                "industry": self.real_company_data["industry"],
                "competitors": self.real_company_data["competitors"]
            })
        
        elif "Competitive Analysis" in agent_name:
            base_data["input_data"].update({
                "domain": self.real_company_data["domain"],
                "competitors": self.real_company_data["competitors"],
                "target_keywords": self.real_company_data["target_keywords"]
            })
        
        elif "Link Building" in agent_name:
            base_data["input_data"].update({
                "domain": self.real_company_data["domain"],
                "industry": self.real_company_data["industry"],
                "competitors": self.real_company_data["competitors"]
            })
        
        elif "Client Success" in agent_name:
            base_data["input_data"].update({
                "client_id": self.real_company_data["company_name"].lower().replace(" ", "_"),
                "company_name": self.real_company_data["company_name"],
                "industry": self.real_company_data["industry"]
            })
        
        return base_data
    
    def _print_final_report(self, passed: int, total: int, total_time: float):
        """–ü–µ—á–∞—Ç—å –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        self._print_section("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø", "üìä")
        
        success_rate = (passed / total) * 100
        avg_time = total_time / total
        
        print(f"üìà –û–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ –∞–≥–µ–Ω—Ç–æ–≤ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {total}")
        print(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {passed}")
        print(f"   ‚Ä¢ –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total - passed}")
        print(f"   ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        print(f"   ‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_time:.2f}s")
        print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∞–≥–µ–Ω—Ç–∞: {avg_time:.3f}s")
        
        # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        if success_rate == 100:
            status = "üéâ –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–ê"
            color = "‚úÖ"
        elif success_rate >= 80:
            status = "‚ö†Ô∏è –°–ò–°–¢–ï–ú–ê –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–ê –° –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø–ú–ò"
            color = "üü°"
        else:
            status = "‚ùå –°–ò–°–¢–ï–ú–ê –¢–†–ï–ë–£–ï–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô"
            color = "‚ùå"
        
        print(f"\n{color} {status}")
        
        # Markdown –∏—Ç–æ–≥–∏
        md_summary = f"""
## üìä –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

### üìà –û–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:
- **–í—Å–µ–≥–æ –∞–≥–µ–Ω—Ç–æ–≤ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ:** {total}
- **–£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:** {passed}
- **–ü—Ä–æ–≤–∞–ª–µ–Ω–æ:** {total - passed}
- **–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞:** {success_rate:.1f}%
- **–û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:** {total_time:.2f}s
- **–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∞–≥–µ–Ω—Ç–∞:** {avg_time:.3f}s

### {color} –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {status}

### üéØ –ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã:
- –í—Å–µ –∞–≥–µ–Ω—Ç—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—Ç —Å—Ç–∞–±–∏–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É
- –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
- –ö–∞—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç enterprise —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º
- –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏

---

**üìÖ –î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}  
**ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ:** AI SEO Architects Test Suite
"""
        
        self.markdown_content.append(md_summary)
    
    async def _save_markdown_report(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ markdown —Ñ–∞–π–ª"""
        filename = f"AGENT_TEST_RESULTS_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md"
        filepath = os.path.join(os.getcwd(), filename)
        
        try:
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write('\n'.join(self.markdown_content))
            
            print(f"\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
            print(f"üìÅ –ü–æ–ª–Ω—ã–π –ø—É—Ç—å: {filepath}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {str(e)}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    tester = RealDataTester()
    await tester.test_all_agents()


if __name__ == "__main__":
    asyncio.run(main())