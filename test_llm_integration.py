#!/usr/bin/env python3
"""
ü§ñ –¢–µ—Å—Ç LLM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ –∞–≥–µ–Ω—Ç–∞—Ö AI SEO Architects
–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã OpenAI API —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏
"""

import asyncio
import os
from datetime import datetime

# –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ –∞–≥–µ–Ω—Ç—ã
from agents.operational.lead_qualification import LeadQualificationAgent
from agents.operational.technical_seo_auditor import TechnicalSEOAuditorAgent

async def test_lead_qualification_llm():
    """–¢–µ—Å—Ç Lead Qualification Agent —Å —Ä–µ–∞–ª—å–Ω—ã–º OpenAI API"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Lead Qualification Agent —Å LLM...")
    
    # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
    agent = LeadQualificationAgent()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–∞
    test_data = {
        "input_data": {
            "company_name": "TechCorp Solutions",
            "industry": "fintech",
            "company_size": "500",
            "budget_range": "500000",
            "timeline": "3 months",
            "contact_role": "CMO",
            "email": "cmo@techcorp.com",
            "pain_points": "Low search visibility, poor lead generation",
            "goals": "Increase organic traffic by 300%",
            "current_seo": "Basic on-page optimization only"
        }
    }
    
    print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –∞–≥–µ–Ω—Ç—É: {test_data['input_data']['company_name']}")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É
    result = await agent.process_task_with_retry(test_data)
    
    print(f"üì• –†–µ–∑—É–ª—å—Ç–∞—Ç: {result['success']}")
    if result["success"]:
        print(f"ü§ñ –ú–æ–¥–µ–ª—å: {result.get('model_used', 'unknown')}")
        print(f"üî¢ –¢–æ–∫–µ–Ω—ã: {result.get('tokens_used', {})}")
        print(f"üìÑ –û—Ç–≤–µ—Ç (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤): {str(result.get('result', ''))[:200]}...")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', 'unknown')}")
        if result.get('fallback_mode'):
            print("‚úÖ Fallback —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    return result

async def test_technical_seo_llm():
    """–¢–µ—Å—Ç Technical SEO Auditor Agent —Å —Ä–µ–∞–ª—å–Ω—ã–º OpenAI API"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Technical SEO Auditor Agent —Å LLM...")
    
    # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
    agent = TechnicalSEOAuditorAgent()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–∞–π—Ç–∞
    test_data = {
        "input_data": {
            "domain": "example-ecommerce.com",
            "task_type": "full_technical_audit",
            "site_type": "e-commerce",
            "technology": "WordPress + WooCommerce",
            "current_issues": "Slow loading, poor mobile experience",
            "business_goals": "Improve search rankings and user experience",
            "target_audience": "Online shoppers"
        }
    }
    
    print(f"üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏—Ç –¥–ª—è –¥–æ–º–µ–Ω–∞: {test_data['input_data']['domain']}")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É
    result = await agent.process_task_with_retry(test_data)
    
    print(f"üì• –†–µ–∑—É–ª—å—Ç–∞—Ç: {result['success']}")
    if result["success"]:
        print(f"ü§ñ –ú–æ–¥–µ–ª—å: {result.get('model_used', 'unknown')}")
        print(f"üî¢ –¢–æ–∫–µ–Ω—ã: {result.get('tokens_used', {})}")
        print(f"üìÑ –û—Ç–≤–µ—Ç (–ø–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤): {str(result.get('result', ''))[:300]}...")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', 'unknown')}")
        if result.get('fallback_mode'):
            print("‚úÖ Fallback —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    return result

async def test_openai_api_key():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ OpenAI API –∫–ª—é—á–∞"""
    api_key = os.getenv("OPENAI_API_KEY")
    if api_key:
        print(f"‚úÖ OPENAI_API_KEY –Ω–∞–π–¥–µ–Ω: {api_key[:10]}...{api_key[-4:]}")
        return True
    else:
        print("‚ö†Ô∏è OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è fallback —Ä–µ–∂–∏–º")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è LLM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    print("üöÄ AI SEO Architects - LLM Integration Test")
    print("=" * 60)
    print(f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now()}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
    has_api_key = await test_openai_api_key()
    
    results = {
        "lead_qualification": None,
        "technical_seo": None,
        "api_key_present": has_api_key
    }
    
    try:
        # –¢–µ—Å—Ç Lead Qualification
        results["lead_qualification"] = await test_lead_qualification_llm()
        
        # –¢–µ—Å—Ç Technical SEO Auditor  
        results["technical_seo"] = await test_technical_seo_llm()
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")
        return 1
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ LLM –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
    print("=" * 60)
    
    successful_tests = 0
    total_tests = 2
    
    if results["lead_qualification"] and results["lead_qualification"]["success"]:
        print("‚úÖ Lead Qualification Agent: LLM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
        successful_tests += 1
    else:
        print("‚ùå Lead Qualification Agent: –ü—Ä–æ–±–ª–µ–º—ã —Å LLM")
    
    if results["technical_seo"] and results["technical_seo"]["success"]:
        print("‚úÖ Technical SEO Auditor: LLM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")  
        successful_tests += 1
    else:
        print("‚ùå Technical SEO Auditor: –ü—Ä–æ–±–ª–µ–º—ã —Å LLM")
    
    success_rate = (successful_tests / total_tests) * 100
    print(f"\nüéØ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å LLM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {success_rate:.1f}% ({successful_tests}/{total_tests})")
    
    if has_api_key and success_rate >= 100:
        print("üéâ –û–¢–õ–ò–ß–ù–û! –í—Å–µ –∞–≥–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç OpenAI API —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏")
        return 0
    elif not has_api_key and success_rate >= 100:
        print("‚úÖ –•–û–†–û–®–û! Fallback —Ä–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–Ω—É–∂–µ–Ω OPENAI_API_KEY –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)")
        return 0
    else:
        print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å LLM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π")
        return 1

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    exit(exit_code)