"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Lead Qualification ‚Üí Proposal Generation
AI SEO Architects - Milestone 3 - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
"""

import asyncio
import json
from datetime import datetime
from core.config import AIAgentsConfig
from agents.operational.lead_qualification import LeadQualificationAgent
from agents.operational.proposal_generation import ProposalGenerationAgent

async def test_proposal_integration():
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: Lead Qualification ‚Üí Proposal Generation"""
    
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Lead Qualification ‚Üí Proposal Generation")
    print("=" * 70)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = AIAgentsConfig()
    data_provider = config.get_data_provider()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤
    lead_agent = LeadQualificationAgent(data_provider=data_provider)
    proposal_agent = ProposalGenerationAgent(data_provider=data_provider)
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–∞ (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç LeadData –º–æ–¥–µ–ª–∏)
    test_lead_data = {
        "input_data": {
            "company_name": "TechCorp Solutions",  # –ë—ã–ª–æ: company
            "contact_name": "–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞",
            "email": "anna@techcorp.ru", 
            "phone": "+7-495-123-4567",
            "website": "https://techcorp.ru",
            "company_size": "150 employees",        # –ë—ã–ª–æ: employees (—á–∏—Å–ª–æ)
            "industry": "SaaS",
            "lead_source": "website_form",          # –ë—ã–ª–æ: source
            "current_seo_budget": "45000",          # –°—Ç—Ä–æ–∫–∞ –≤–º–µ—Å—Ç–æ —á–∏—Å–ª–∞
            "goals": [
                "–£–≤–µ–ª–∏—á–∏—Ç—å –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π —Ç—Ä–∞—Ñ–∏–∫",
                "–£–ª—É—á—à–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Å–∏—é —Å —Å–∞–π—Ç–∞", 
                "–ü–æ–≤—ã—Å–∏—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—å –≤ –ø–æ–∏—Å–∫–µ"
            ],
            "pain_points": [
                "–ù–∏–∑–∫–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –ø–æ–∏—Å–∫–µ",
                "–ú–∞–ª–µ–Ω—å–∫–∏–π –ø–æ—Ç–æ–∫ –∑–∞—è–≤–æ–∫ —Å —Å–∞–π—Ç–∞",
                "–í—ã—Å–æ–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π —Ä–µ–∫–ª–∞–º—ã"
            ],
            "timeline": "2-3 –º–µ—Å—è—Ü–∞",
            "budget_range": "50000-100000",
            "decision_making_authority": "yes"       # –ë—ã–ª–æ: decision_maker
        }
    }
    
    print("üìã –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–∞ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ):")
    print(f"   –ö–æ–º–ø–∞–Ω–∏—è: {test_lead_data['input_data']['company_name']}")
    print(f"   –û—Ç—Ä–∞—Å–ª—å: {test_lead_data['input_data']['industry']}")
    print(f"   –†–∞–∑–º–µ—Ä: {test_lead_data['input_data']['company_size']}")
    print(f"   –¢–µ–∫—É—â–∏–π SEO –±—é–¥–∂–µ—Ç: {test_lead_data['input_data']['current_seo_budget']} —Ä—É–±.")
    print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {test_lead_data['input_data']['lead_source']}")
    print()
    
    # –≠—Ç–∞–ø 1: Lead Qualification
    print("üìä –≠–¢–ê–ü 1: –ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è –ª–∏–¥–∞")
    print("-" * 30)
    
    start_time = datetime.now()
    
    try:
        lead_result = await lead_agent.process_task(test_lead_data)
        lead_time = (datetime.now() - start_time).total_seconds()
        
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {lead_time:.2f}—Å")
        print(f"üìä Lead Score: {lead_result.get('final_score')}/100")
        print(f"üìã –ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è: {lead_result.get('classification')}")
        print(f"üéØ –¢–∏–ø –ª–∏–¥–∞: {lead_result.get('lead_type')}")
        print(f"üí∞ –û—Ü–µ–Ω–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${lead_result.get('estimated_deal_value', 0):,}")
        print(f"üîç –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {lead_result.get('confidence_score', 0):.1%}")
        print()
        
        # –≠—Ç–∞–ø 2: Proposal Generation —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
        if lead_result.get("final_score", 0) > 0:
            print("üìÑ –≠–¢–ê–ü 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
            print("-" * 30)
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è proposal agent
            proposal_input = {
                "input_data": {
                    "lead_qualification_result": lead_result,
                    "client_requirements": {
                        "services_interest": ["seo_audit", "monthly_seo", "content_strategy"],
                        "budget_confirmed": True,
                        "timeline_flexibility": "medium"
                    },
                    "proposal_type": "standard",
                    "urgency": "medium"
                }
            }
            
            start_time = datetime.now()
            proposal_result = await proposal_agent.process_task(proposal_input)
            proposal_time = (datetime.now() - start_time).total_seconds()
            
            print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {proposal_time:.2f}—Å")
            
            if proposal_result.get("proposal_data"):
                proposal_data = proposal_result["proposal_data"]
                pricing = proposal_data.get("pricing", {})
                
                print(f"üìÑ Proposal ID: {proposal_data.get('proposal_id')}")
                print(f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—Ä–≤–æ–≥–æ –≥–æ–¥–∞: ${pricing.get('total_annual', 0):,}")
                print(f"üí∞ –ï–¥–∏–Ω–æ—Ä–∞–∑–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: ${pricing.get('total_one_time', 0):,}")
                print(f"üí∞ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: ${pricing.get('total_monthly', 0):,}")
                print(f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {proposal_data.get('confidence_score', 0):.1%}")
                
                # ROI –ø—Ä–æ–µ–∫—Ü–∏–∏
                roi_data = proposal_data.get("roi_projections", {})
                if roi_data and "projections" in roi_data:
                    roi_12m = roi_data["projections"].get("12_months", {})
                    print(f"üìà –ü—Ä–æ–≥–Ω–æ–∑ ROI (12 –º–µ—Å): {roi_12m.get('roi_percentage', 'N/A')}")
                    print(f"üíµ –ü—Ä–æ–≥–Ω–æ–∑ –≤—ã—Ä—É—á–∫–∏: ${roi_12m.get('annual_revenue', 0):,}/–≥–æ–¥")
                
                # –ü–∞–∫–µ—Ç–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                packages = pricing.get("packages", {})
                if packages:
                    print(f"\nüì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã: {len(packages)}")
                    for package_name, package_data in packages.items():
                        one_time = package_data.get('one_time_price', 0)
                        monthly = package_data.get('monthly_price', 0)
                        print(f"   - {package_data['name']}: ${one_time:,} + ${monthly:,}/–º–µ—Å")
                
                print()
                
                # –°—É–º–º–∞—Ä–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
                print("=" * 30)
                print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {lead_time + proposal_time:.2f}—Å")
                print(f"üîÑ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤: ‚úÖ –£—Å–ø–µ—à–Ω–æ")
                print(f"üìà –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {1/(lead_time + proposal_time):.1f} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π/—Å–µ–∫")
                
                # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞
                print(f"\nüéØ –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê")
                print("=" * 20)
                
                lead_score = lead_result.get("final_score", 0)
                confidence = proposal_data.get("confidence_score", 0)
                
                print(f"üìä –ö–∞—á–µ—Å—Ç–≤–æ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏: {'–í—ã—Å–æ–∫–æ–µ' if lead_score >= 70 else '–°—Ä–µ–¥–Ω–µ–µ' if lead_score >= 50 else '–ù–∏–∑–∫–æ–µ'}")
                print(f"üéØ –ö–∞—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {'–í—ã—Å–æ–∫–æ–µ' if confidence >= 0.8 else '–°—Ä–µ–¥–Ω–µ–µ' if confidence >= 0.6 else '–ù–∏–∑–∫–æ–µ'}")
                print(f"üíº –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ: {'‚úÖ –î–∞' if confidence >= 0.7 and lead_score >= 40 else '‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏'}")
                
                # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                next_steps = proposal_data.get("next_steps", [])
                if next_steps:
                    print(f"\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
                    for i, step in enumerate(next_steps[:3], 1):
                        print(f"   {i}. {step}")
                
                return {
                    "lead_result": lead_result,
                    "proposal_result": proposal_result,
                    "total_time": lead_time + proposal_time,
                    "success": True
                }
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:")
                print(f"   {proposal_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                return {
                    "lead_result": lead_result,
                    "proposal_result": proposal_result,
                    "total_time": lead_time,
                    "success": False
                }
        else:
            print("‚ö†Ô∏è –õ–∏–¥ –Ω–µ –ø—Ä–æ—à–µ–ª –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
            return {
                "lead_result": lead_result,
                "proposal_result": None,
                "total_time": lead_time,
                "success": False
            }
            
    except Exception as e:
        lead_time = (datetime.now() - start_time).total_seconds()
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ª–∏–¥–∞: {str(e)}")
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –¥–æ –æ—à–∏–±–∫–∏: {lead_time:.2f}—Å")
        
        return {
            "lead_result": None,
            "proposal_result": None,
            "total_time": lead_time,
            "success": False,
            "error": str(e)
        }

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
    print("üîß –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
    result = asyncio.run(test_proposal_integration())
    
    if result["success"]:
        print(f"\nüèÜ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        print(f"üíæ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞ {result['total_time']:.2f}—Å")
    else:
        print(f"\n‚ö†Ô∏è –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –° –ü–†–û–ë–õ–ï–ú–ê–ú–ò")
        if "error" in result:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
        print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")
