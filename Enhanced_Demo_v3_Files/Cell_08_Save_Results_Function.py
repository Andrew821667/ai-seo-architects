# –Ø–ß–ï–ô–ö–ê 8: –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

print('üíæ –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –§–£–ù–ö–¶–ò–ò –°–û–•–†–ê–ù–ï–ù–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–û–í')
print('=' * 60)

def save_detailed_results(results, token_tracker):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON –∏ markdown —Ñ–∞–π–ª—ã"""
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    # 1. –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON
    detailed_data = {
        "timestamp": datetime.now().isoformat(),
        "demo_results": results,
        "token_usage": {
            "by_level": token_tracker.usage_by_level,
            "by_agent": token_tracker.agent_details,
            "total_cost": token_tracker.get_total_cost(),
            "total_tokens": token_tracker.get_total_tokens()
        },
        "pricing_model": {
            "gpt-4": {"input": 0.01, "output": 0.03},
            "gpt-4o-mini": {"input": 0.00015, "output": 0.0006}
        }
    }
    
    with open(f'demo_results_{timestamp}.json', 'w', encoding='utf-8') as f:
        json.dump(detailed_data, f, ensure_ascii=False, indent=2)
    
    # 2. Executive summary –≤ Markdown
    with open(f'executive_summary_{timestamp}.md', 'w', encoding='utf-8') as f:
        f.write('# üìä AI SEO Architects - Executive Summary\\n\\n')
        f.write(f'**–î–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:** {datetime.now().strftime("%d.%m.%Y %H:%M")}\\n\\n')
        
        f.write('## üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\\n\\n')
        for level in ['executive', 'management', 'operational']:
            level_data = results.get(level)
            if level_data and level_data.get('success'):
                stats = level_data['stats']
                model_type = 'GPT-4' if level == 'executive' else 'GPT-4o-mini'
                
                f.write(f'### {level.capitalize()} Level ({model_type})\\n')
                f.write(f'- **–ê–≥–µ–Ω—Ç–æ–≤ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ:** {stats["successful_tests"]}/{stats["total_tests"]}\\n')
                f.write(f'- **Success Rate:** {stats["success_rate"]:.1f}%\\n')
                f.write(f'- **–°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ:** {stats["avg_quality_score"]:.1f}/100\\n')
                f.write(f'- **–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:** {stats["avg_processing_time"]:.2f}—Å\\n\\n')
        
        f.write('## üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∏ —Ç–æ–∫–µ–Ω—ã\\n\\n')
        total_cost = token_tracker.get_total_cost()
        total_tokens = token_tracker.get_total_tokens()
        
        f.write(f'- **–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:** ${total_cost:.4f}\\n')
        f.write(f'- **–í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤:** {total_tokens:,}\\n')
        f.write(f'- **–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ —Ç–æ–∫–µ–Ω:** ${total_cost/max(1, total_tokens):.8f}\\n\\n')
        
        f.write('### –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —É—Ä–æ–≤–Ω—è–º:\\n\\n')
        for level, usage in token_tracker.usage_by_level.items():
            if usage['requests'] > 0:
                model_type = 'GPT-4' if level == 'executive' else 'GPT-4o-mini'
                f.write(f'**{level.capitalize()} ({model_type}):**\\n')
                f.write(f'- Input —Ç–æ–∫–µ–Ω—ã: {usage["input"]:,}\\n')
                f.write(f'- Output —Ç–æ–∫–µ–Ω—ã: {usage["output"]:,}\\n')
                f.write(f'- –°—Ç–æ–∏–º–æ—Å—Ç—å: ${usage["cost"]:.4f}\\n')
                f.write(f'- –ó–∞–ø—Ä–æ—Å—ã: {usage["requests"]}\\n\\n')
    
    # 3. Billing summary –¥–ª—è –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏–∏
    with open(f'billing_summary_{timestamp}.csv', 'w', encoding='utf-8') as f:
        f.write('Level,Model,Input_Tokens,Output_Tokens,Cost_USD,Requests\\n')
        for level, usage in token_tracker.usage_by_level.items():
            if usage['requests'] > 0:
                model_type = 'GPT-4' if level == 'executive' else 'GPT-4o-mini'
                f.write(f'{level},{model_type},{usage["input"]},{usage["output"]},{usage["cost"]:.6f},{usage["requests"]}\\n')
    
    print(f'üìÅ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:')
    print(f'‚îú‚îÄ demo_results_{timestamp}.json - –¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
    print(f'‚îú‚îÄ executive_summary_{timestamp}.md - –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç')
    print(f'‚îî‚îÄ billing_summary_{timestamp}.csv - –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏–∏')

print('‚úÖ –§—É–Ω–∫—Ü–∏—è save_detailed_results –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞!')
print('üéØ –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ —Å–ª–µ–¥—É—é—â–µ–π —è—á–µ–π–∫–µ!')