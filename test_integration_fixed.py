"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±—ã—Å—Ç—Ä—ã–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ Lead Agent
"""

import asyncio
from datetime import datetime
from core.config import AIAgentsConfig
from agents.operational.lead_qualification import LeadQualificationAgent
from agents.operational.proposal_generation import ProposalGenerationAgent

def fix_lead_result(lead_result):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∫–ª—é—á–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ Lead Agent –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    
    if "qualification_result" in lead_result:
        qual_result = lead_result["qualification_result"]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–ª—é—á–∏
        lead_result["final_score"] = qual_result.get("lead_score")
        lead_result["classification"] = qual_result.get("qualification") 
        lead_result["estimated_deal_value"] = qual_result.get("estimated_value", 0)
        
        # Lead ID –µ—Å–ª–∏ –Ω–µ—Ç
        if "lead_id" not in lead_result:
            lead_result["lead_id"] = f"LEAD-{datetime.now().strftime('%Y%m%d-%H%M%S')}"
        
        # Lead data –µ—Å–ª–∏ –Ω–µ—Ç
        if "lead_data" not in lead_result and "enriched_data" in lead_result:
            lead_result["lead_data"] = lead_result["enriched_data"]
    
    return lead_result

async def test_integration_with_fix():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–∞ –ª–µ—Ç—É"""
    
    print("üöÄ –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° –ë–´–°–¢–†–´–ú –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï–ú")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    config = AIAgentsConfig()
    data_provider = config.get_data_provider()
    
    lead_agent = LeadQualificationAgent(data_provider=data_provider)
    proposal_agent = ProposalGenerationAgent(data_provider=data_provider)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = {
        "input_data": {
            "company_name": "TechCorp Solutions",
            "contact_name": "–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞", 
            "email": "anna@techcorp.ru",
            "phone": "+7-495-123-4567",
            "website": "https://techcorp.ru",
            "company_size": "150 employees",
            "industry": "SaaS",
            "lead_source": "website_form",
            "current_seo_budget": "45000",
            "goals": ["–£–≤–µ–ª–∏—á–∏—Ç—å —Ç—Ä–∞—Ñ–∏–∫"],
            "pain_points": ["–ù–∏–∑–∫–∏–µ –ø–æ–∑–∏—Ü–∏–∏"],
            "timeline": "2-3 –º–µ—Å—è—Ü–∞",
            "budget_range": "50000-100000",
            "decision_making_authority": "yes"
        }
    }
    
    # –≠—Ç–∞–ø 1: Lead Qualification —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
    print("üìä –≠–¢–ê–ü 1: Lead Qualification (—Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º)")
    print("-" * 40)
    
    start_time = datetime.now()
    lead_result = await lead_agent.process_task(test_data)
    lead_time = (datetime.now() - start_time).total_seconds()
    
    # üîß –ò–°–ü–†–ê–í–õ–Ø–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢
    lead_result = fix_lead_result(lead_result)
    
    print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {lead_time:.2f}—Å")
    print(f"üìä Lead Score: {lead_result.get('final_score')}/100")  # –¢–µ–ø–µ—Ä—å –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å!
    print(f"üìã –ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è: {lead_result.get('classification')}")   # –¢–µ–ø–µ—Ä—å –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å!
    print(f"üéØ –¢–∏–ø –ª–∏–¥–∞: {lead_result.get('lead_type')}")
    print(f"üí∞ –û—Ü–µ–Ω–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${lead_result.get('estimated_deal_value', 0):,}")  # –¢–µ–ø–µ—Ä—å –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å!
    print(f"üîç –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {lead_result.get('confidence_score', 0):.1%}")
    print()
    
    # –≠—Ç–∞–ø 2: Proposal Generation –µ—Å–ª–∏ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞
    if lead_result.get("final_score", 0) > 0:
        print("üìÑ –≠–¢–ê–ü 2: Proposal Generation")
        print("-" * 30)
        
        proposal_input = {
            "input_data": {
                "lead_qualification_result": lead_result,
                "client_requirements": {
                    "services_interest": ["seo_audit", "monthly_seo", "content_strategy"],
                    "budget_confirmed": True,
                    "timeline_flexibility": "medium"
                },
                "proposal_type": "standard", 
                "urgency": "medium"
            }
        }
        
        start_time = datetime.now()
        proposal_result = await proposal_agent.process_task(proposal_input)
        proposal_time = (datetime.now() - start_time).total_seconds()
        
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {proposal_time:.2f}—Å")
        
        if proposal_result.get("proposal_data"):
            proposal_data = proposal_result["proposal_data"]
            pricing = proposal_data.get("pricing", {})
            
            print(f"üìÑ Proposal ID: {proposal_data.get('proposal_id')}")
            print(f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${pricing.get('total_annual', 0):,}/–≥–æ–¥")
            print(f"üí∞ –ï–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ: ${pricing.get('total_one_time', 0):,}")
            print(f"üí∞ –ï–∂–µ–º–µ—Å—è—á–Ω–æ: ${pricing.get('total_monthly', 0):,}")
            print(f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {proposal_data.get('confidence_score', 0):.1%}")
            
            # ROI –ø—Ä–æ–µ–∫—Ü–∏–∏
            roi_data = proposal_data.get("roi_projections", {})
            if roi_data and "projections" in roi_data:
                roi_12m = roi_data["projections"].get("12_months", {})
                print(f"üìà ROI –ø—Ä–æ–≥–Ω–æ–∑ (12 –º–µ—Å): {roi_12m.get('roi_percentage', 'N/A')}")
                print(f"üíµ –ü—Ä–æ–≥–Ω–æ–∑ –≤—ã—Ä—É—á–∫–∏: ${roi_12m.get('annual_revenue', 0):,}")
            
            print("\nüèÜ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –†–ê–ë–û–¢–ê–ï–¢ –£–°–ü–ï–®–ù–û!")
            print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {lead_time + proposal_time:.2f}—Å")
            print(f"üéØ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ production: ‚úÖ –î–ê")
            
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ Proposal Generation: {proposal_result.get('error')}")
            return False
    else:
        print("‚ö†Ô∏è –õ–∏–¥ –Ω–µ –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
        return False

if __name__ == "__main__":
    success = asyncio.run(test_integration_with_fix())
    if success:
        print("\nüöÄ MILESTONE 3 - –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù!")
    else:
        print("\nüîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")
