"""
Redis client –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è JWT —Ç–æ–∫–µ–Ω–∞–º–∏
"""

import os
import json
import logging
from typing import Optional, Any, Dict, List
from datetime import datetime, timedelta
try:
    import redis.asyncio as redis
    from redis.asyncio import ConnectionPool
    REDIS_AVAILABLE = True
except ImportError:
    # Mock Redis –¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ Redis –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    REDIS_AVAILABLE = False
    
    class MockRedis:
        def __init__(self, *args, **kwargs):
            self._data = {}
        
        async def set(self, key: str, value: str, ex=None):
            self._data[key] = {"value": value, "expires": None}
            return True
        
        async def get(self, key: str):
            item = self._data.get(key)
            return item["value"] if item else None
        
        async def delete(self, key: str):
            return self._data.pop(key, None) is not None
        
        async def exists(self, key: str):
            return key in self._data
        
        async def ping(self):
            return True
        
        async def close(self):
            pass
        
        async def keys(self, pattern: str):
            import fnmatch
            return [k for k in self._data.keys() if fnmatch.fnmatch(k, pattern)]
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏
    redis = type('redis', (), {
        'Redis': MockRedis,
        'ConnectionPool': lambda **kwargs: None
    })()
    
    class MockConnectionPool:
        @staticmethod
        def from_url(url: str, **kwargs):
            return MockConnectionPool()
    
    ConnectionPool = MockConnectionPool

logger = logging.getLogger(__name__)


class RedisManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
    
    def __init__(self):
        self.redis_client: Optional[redis.Redis] = None
        self.connection_pool: Optional[ConnectionPool] = None
        self._initialized = False
    
    async def initialize(self, redis_url: str = None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis"""
        if self._initialized:
            return
            
        if not REDIS_AVAILABLE:
            logger.warning("Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock Redis")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º mock –≤–µ—Ä—Å–∏—é
            self.connection_pool = ConnectionPool.from_url("")
            self.redis_client = MockRedis()
            self._initialized = True
            return
            
        # –ü–æ–ª—É—á–µ–Ω–∏–µ URL Redis
        if not redis_url:
            redis_url = self._get_redis_url()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ connection pool
        self.connection_pool = ConnectionPool.from_url(
            redis_url,
            decode_responses=True,
            max_connections=20,
            retry_on_timeout=True,
            health_check_interval=30
        )
        
        # –°–æ–∑–¥–∞–Ω–∏–µ Redis client
        self.redis_client = redis.Redis(connection_pool=self.connection_pool)
        
        self._initialized = True
        logger.info("‚úÖ Redis –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _get_redis_url(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ URL Redis –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        # Production —Ä–µ–∂–∏–º (Docker)
        if os.getenv("ENVIRONMENT") == "production":
            return (
                f"redis://"
                f"{os.getenv('REDIS_HOST', 'redis')}:"
                f"{os.getenv('REDIS_PORT', '6379')}"
                f"/{os.getenv('REDIS_DB', '0')}"
            )
        
        # Development —Ä–µ–∂–∏–º
        return (
            f"redis://"
            f"{os.getenv('DEV_REDIS_HOST', 'localhost')}:"
            f"{os.getenv('DEV_REDIS_PORT', '6379')}"
            f"/{os.getenv('DEV_REDIS_DB', '0')}"
        )
    
    async def health_check(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Redis"""
        try:
            if not self._initialized:
                return False
            
            if not REDIS_AVAILABLE:
                # Mock Redis –≤—Å–µ–≥–¥–∞ "–∑–¥–æ—Ä–æ–≤"
                return True
                
            result = await self.redis_client.ping()
            return result is True
        except Exception as e:
            logger.error(f"Redis health check failed: {e}")
            return False
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π Redis"""
        if self.redis_client:
            await self.redis_client.close()
            await self.connection_pool.disconnect()
            self._initialized = False
            logger.info("üîí Redis –æ—Ç–∫–ª—é—á–µ–Ω")


class CacheManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, redis_manager: RedisManager):
        self.redis_manager = redis_manager
        self.default_ttl = 3600  # 1 —á–∞—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    async def get(self, key: str) -> Optional[Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞"""
        try:
            if not self.redis_manager._initialized:
                await self.redis_manager.initialize()
                
            value = await self.redis_manager.redis_client.get(key)
            if value:
                return json.loads(value)
            return None
        except Exception as e:
            logger.warning(f"Cache get error for key {key}: {e}")
            return None
    
    async def set(self, key: str, value: Any, ttl: int = None) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫—ç—à"""
        try:
            if not self.redis_manager._initialized:
                await self.redis_manager.initialize()
                
            ttl = ttl or self.default_ttl
            json_value = json.dumps(value, default=str)
            
            result = await self.redis_manager.redis_client.setex(
                key, ttl, json_value
            )
            return result is True
        except Exception as e:
            logger.warning(f"Cache set error for key {key}: {e}")
            return False
    
    async def delete(self, key: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞"""
        try:
            if not self.redis_manager._initialized:
                await self.redis_manager.initialize()
                
            result = await self.redis_manager.redis_client.delete(key)
            return result > 0
        except Exception as e:
            logger.warning(f"Cache delete error for key {key}: {e}")
            return False
    
    async def exists(self, key: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞ –≤ –∫—ç—à–µ"""
        try:
            if not self.redis_manager._initialized:
                await self.redis_manager.initialize()
                
            result = await self.redis_manager.redis_client.exists(key)
            return result > 0
        except Exception as e:
            logger.warning(f"Cache exists error for key {key}: {e}")
            return False
    
    async def get_keys_pattern(self, pattern: str) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–µ–π –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É"""
        try:
            if not self.redis_manager._initialized:
                await self.redis_manager.initialize()
                
            keys = await self.redis_manager.redis_client.keys(pattern)
            return keys
        except Exception as e:
            logger.warning(f"Cache keys pattern error for {pattern}: {e}")
            return []


class TokenManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä JWT refresh —Ç–æ–∫–µ–Ω–æ–≤"""
    
    def __init__(self, redis_manager: RedisManager):
        self.redis_manager = redis_manager
        self.token_prefix = "refresh_token:"
        self.user_tokens_prefix = "user_tokens:"
    
    async def store_refresh_token(
        self, 
        user_id: str, 
        token_hash: str, 
        expires_in: timedelta
    ) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ refresh —Ç–æ–∫–µ–Ω–∞"""
        try:
            if not self.redis_manager._initialized:
                await self.redis_manager.initialize()
            
            token_key = f"{self.token_prefix}{token_hash}"
            user_tokens_key = f"{self.user_tokens_prefix}{user_id}"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω —Å user_id
            token_data = {
                "user_id": user_id,
                "created_at": datetime.now().isoformat(),
                "expires_at": (datetime.now() + expires_in).isoformat()
            }
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º pipeline –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            pipe = self.redis_manager.redis_client.pipeline()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
            pipe.setex(
                token_key, 
                int(expires_in.total_seconds()), 
                json.dumps(token_data, default=str)
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            pipe.sadd(user_tokens_key, token_hash)
            pipe.expire(user_tokens_key, int(expires_in.total_seconds()))
            
            await pipe.execute()
            return True
            
        except Exception as e:
            logger.error(f"Error storing refresh token: {e}")
            return False
    
    async def get_refresh_token(self, token_hash: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö refresh —Ç–æ–∫–µ–Ω–∞"""
        try:
            if not self.redis_manager._initialized:
                await self.redis_manager.initialize()
                
            token_key = f"{self.token_prefix}{token_hash}"
            token_data = await self.redis_manager.redis_client.get(token_key)
            
            if token_data:
                return json.loads(token_data)
            return None
            
        except Exception as e:
            logger.error(f"Error getting refresh token: {e}")
            return None
    
    async def revoke_refresh_token(self, token_hash: str) -> bool:
        """–û—Ç–∑—ã–≤ refresh —Ç–æ–∫–µ–Ω–∞"""
        try:
            if not self.redis_manager._initialized:
                await self.redis_manager.initialize()
                
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è user_id
            token_data = await self.get_refresh_token(token_hash)
            if not token_data:
                return False
                
            user_id = token_data.get("user_id")
            token_key = f"{self.token_prefix}{token_hash}"
            user_tokens_key = f"{self.user_tokens_prefix}{user_id}"
            
            # –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω –∞—Ç–æ–º–∞—Ä–Ω–æ
            pipe = self.redis_manager.redis_client.pipeline()
            pipe.delete(token_key)
            pipe.srem(user_tokens_key, token_hash)
            await pipe.execute()
            
            return True
            
        except Exception as e:
            logger.error(f"Error revoking refresh token: {e}")
            return False
    
    async def revoke_user_tokens(self, user_id: str) -> bool:
        """–û—Ç–∑—ã–≤ –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            if not self.redis_manager._initialized:
                await self.redis_manager.initialize()
                
            user_tokens_key = f"{self.user_tokens_prefix}{user_id}"
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            token_hashes = await self.redis_manager.redis_client.smembers(user_tokens_key)
            
            if not token_hashes:
                return True
            
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            pipe = self.redis_manager.redis_client.pipeline()
            
            for token_hash in token_hashes:
                token_key = f"{self.token_prefix}{token_hash}"
                pipe.delete(token_key)
            
            pipe.delete(user_tokens_key)
            await pipe.execute()
            
            return True
            
        except Exception as e:
            logger.error(f"Error revoking user tokens: {e}")
            return False


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
redis_manager = RedisManager()
cache_manager = CacheManager(redis_manager)
token_manager = TokenManager(redis_manager)


async def init_redis():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    await redis_manager.initialize()


async def close_redis():
    """–ó–∞–∫—Ä—ã—Ç–∏–µ Redis –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    await redis_manager.close()


def get_cache_manager() -> CacheManager:
    """Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è cache manager –≤ FastAPI"""
    return cache_manager


def get_token_manager() -> TokenManager:
    """Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è token manager –≤ FastAPI"""
    return token_manager