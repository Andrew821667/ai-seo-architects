"""
FastAPI Backend –¥–ª—è AI SEO Architects
–û—Å–Ω–æ–≤–Ω–æ–π API —Å–µ—Ä–≤–µ—Ä —Å REST endpoints –∏ WebSocket –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
"""

from fastapi import FastAPI, HTTPException, Depends, WebSocket, WebSocketDisconnect
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse
from fastapi.staticfiles import StaticFiles
from contextlib import asynccontextmanager
import uvicorn
import asyncio
from typing import Dict, List, Any, Optional
import json
from datetime import datetime
import logging
import os

from .monitoring.logger import setup_structured_logging, get_logger
from .monitoring.metrics import MetricsCollector, get_metrics
from .routes import agents, campaigns, clients, analytics, auth, tasks
from .websocket.manager import ConnectionManager
from .auth.security import get_current_user
from .models.responses import APIResponse, HealthResponse
from .database.connection import init_database, close_database, db_manager
from .database.redis_client import init_redis, close_redis, redis_manager
from core.mcp.agent_manager import get_mcp_agent_manager
from core.base_agent import BaseAgent

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_structured_logging()
logger = get_logger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
connection_manager = ConnectionManager()
metrics_collector = MetricsCollector()
agent_manager = None


@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # Startup
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ AI SEO Architects API Server...")
    
    global agent_manager
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
        await init_database()
        logger.info("‚úÖ PostgreSQL –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        await init_redis()
        logger.info("‚úÖ Redis –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MCP –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–≥–µ–Ω—Ç–æ–≤
        agent_manager = await get_mcp_agent_manager()
        logger.info("‚úÖ MCP Agent Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ—Ö 14 –∞–≥–µ–Ω—Ç–æ–≤ —Å MCP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
        agents = await agent_manager.create_all_agents(enable_mcp=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º health check –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
        health_results = await agent_manager.health_check_all_agents()
        healthy_agents = health_results.get("summary", {}).get("healthy_agents", 0)
        
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(agents)} –∞–≥–µ–Ω—Ç–æ–≤, –∑–¥–æ—Ä–æ–≤—ã—Ö: {healthy_agents}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ API —Ä–æ—É—Ç–æ–≤
        app.state.agent_manager = agent_manager
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä –º–µ—Ç—Ä–∏–∫
        asyncio.create_task(metrics_collector.start_collection())
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–µ—Ç—Ä–∏–∫ –∑–∞–ø—É—â–µ–Ω–∞")
        
        logger.info("üéâ API Server –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        raise
    
    yield
    
    # Shutdown
    logger.info("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã API Server...")
    
    if agent_manager:
        await agent_manager.shutdown()
        logger.info("‚úÖ Agent Manager –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
    
    await close_redis()
    logger.info("‚úÖ Redis –æ—Ç–∫–ª—é—á–µ–Ω")
    
    await close_database()
    logger.info("‚úÖ PostgreSQL –æ—Ç–∫–ª—é—á–µ–Ω")
    
    await metrics_collector.stop_collection()
    logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–µ—Ç—Ä–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    logger.info("üëã API Server –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")


# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="AI SEO Architects API",
    description="Enterprise-ready –º—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ SEO-–∞–≥–µ–Ω—Ç—Å—Ç–≤–∞",
    version="1.0.0",
    lifespan=lifespan,
    docs_url="/api/docs",
    redoc_url="/api/redoc"
)

# CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000", "http://localhost:8080"],  # Frontend URLs
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
static_dir = os.path.join(os.path.dirname(__file__), "static")
if os.path.exists(static_dir):
    app.mount("/static", StaticFiles(directory=static_dir), name="static")


# Health Check endpoint
@app.get("/health", response_model=HealthResponse)
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API —Å–µ—Ä–≤–µ—Ä–∞ –∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
        db_healthy = await db_manager.health_check() if db_manager else False
        redis_healthy = await redis_manager.health_check() if redis_manager else False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥–µ–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏ MCP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
        manager_healthy = agent_manager is not None and len(agent_manager.agents) > 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö 14 –∞–≥–µ–Ω—Ç–æ–≤
        agents_status = {}
        if agent_manager:
            try:
                health_results = await agent_manager.health_check_all_agents()
                agents_status = health_results.get("summary", {})
                # –î–æ–±–∞–≤–ª—è–µ–º MCP —Å—Ç–∞—Ç—É—Å
                if hasattr(agent_manager, 'mcp_provider') and agent_manager.mcp_provider:
                    mcp_health = await agent_manager.mcp_provider.health_check()
                    agents_status['mcp_provider'] = mcp_health.get('overall_health', 'unknown')
            except Exception as e:
                logger.error(f"Health check agents error: {e}")
                agents_status = {"error": str(e)}
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        metrics = await metrics_collector.get_current_metrics()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        overall_healthy = all([db_healthy, redis_healthy, manager_healthy])
        status = "healthy" if overall_healthy else "degraded"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–µ
        infrastructure = {
            "database": "healthy" if db_healthy else "unhealthy",
            "redis": "healthy" if redis_healthy else "unhealthy",
            "agent_manager": "healthy" if manager_healthy else "unhealthy"
        }
        
        return HealthResponse(
            status=status,
            timestamp=datetime.now().isoformat(),
            version="1.0.0",
            agents_status=agents_status,
            metrics={**metrics, "infrastructure": infrastructure},
            uptime_seconds=metrics.get("uptime_seconds", 0)
        )
        
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        return HealthResponse(
            status="unhealthy",
            timestamp=datetime.now().isoformat(),
            version="1.0.0",
            error=str(e)
        )


# Root endpoint
@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ API"""
    
    return {
        "message": "AI SEO Architects API",
        "version": "1.0.0",
        "status": "running",
        "docs": "/api/docs",
        "health": "/health",
        "websocket": "/ws/dashboard",
        "dashboard": "/static/dashboard.html"
    }


# Dashboard endpoint
@app.get("/dashboard", response_class=HTMLResponse)
async def dashboard():
    """–î–∞—à–±–æ—Ä–¥ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    try:
        dashboard_path = os.path.join(static_dir, "dashboard.html")
        if os.path.exists(dashboard_path):
            with open(dashboard_path, 'r', encoding='utf-8') as f:
                return HTMLResponse(content=f.read())
        else:
            return HTMLResponse(
                content="""
                <html>
                    <body>
                        <h1>Dashboard –Ω–µ –Ω–∞–π–¥–µ–Ω</h1>
                        <p>–§–∞–π–ª dashboard.html –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ static</p>
                        <a href="/api/docs">API Documentation</a>
                    </body>
                </html>
                """,
                status_code=404
            )
    except Exception as e:
        logger.error(f"Error serving dashboard: {e}")
        return HTMLResponse(
            content=f"<html><body><h1>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞</h1><p>{str(e)}</p></body></html>",
            status_code=500
        )


# WebSocket endpoint –¥–ª—è real-time –¥–∞—à–±–æ—Ä–¥–∞
@app.websocket("/ws/dashboard")
async def websocket_dashboard(websocket: WebSocket, token: str = None):
    """WebSocket –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–∞—à–±–æ—Ä–¥–∞"""
    
    try:
        # TODO: –î–æ–±–∞–≤–∏—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ token
        await connection_manager.connect(websocket, client_id=f"dashboard_{datetime.now().timestamp()}")
        logger.info("üì° WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        initial_data = {
            "type": "initial",
            "data": {
                "timestamp": datetime.now().isoformat(),
                "agents_count": len(agent_manager.agents) if agent_manager else 0,
                "status": "connected"
            }
        }
        
        await connection_manager.send_personal_message(json.dumps(initial_data), websocket)
        
        # –°–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
        while True:
            message = await websocket.receive_text()
            data = json.loads(message)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –æ—Ç –¥–∞—à–±–æ—Ä–¥–∞
            if data.get("type") == "request_metrics":
                metrics = await metrics_collector.get_current_metrics()
                response = {
                    "type": "metrics_update",
                    "data": metrics,
                    "timestamp": datetime.now().isoformat()
                }
                await connection_manager.send_personal_message(json.dumps(response), websocket)
            
            elif data.get("type") == "request_agents_status":
                if agent_manager:
                    health_results = await agent_manager.health_check_all_agents()
                    response = {
                        "type": "agents_status",
                        "data": health_results,
                        "timestamp": datetime.now().isoformat()
                    }
                    await connection_manager.send_personal_message(json.dumps(response), websocket)
                    
    except WebSocketDisconnect:
        logger.info("üì° WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
        connection_manager.disconnect(websocket)
    except Exception as e:
        logger.error(f"WebSocket –æ—à–∏–±–∫–∞: {e}")
        await connection_manager.disconnect(websocket)


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
app.include_router(auth.router, prefix="/auth", tags=["authentication"])
app.include_router(agents.router, prefix="/api/agents", tags=["agents"])
app.include_router(campaigns.router, prefix="/api/campaigns", tags=["campaigns"])
app.include_router(clients.router, prefix="/api/clients", tags=["clients"])
app.include_router(analytics.router, prefix="/api/analytics", tags=["analytics"])
app.include_router(tasks.router, prefix="/api/tasks", tags=["tasks"])


# Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
@app.middleware("http")
async def log_requests(request, call_next):
    """Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    start_time = datetime.now()
    correlation_id = f"req_{start_time.timestamp()}"
    
    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    logger.info(
        "HTTP Request",
        extra={
            "correlation_id": correlation_id,
            "method": request.method,
            "url": str(request.url),
            "client_ip": request.client.host
        }
    )
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
    response = await call_next(request)
    
    # –°—á–∏—Ç–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    processing_time = (datetime.now() - start_time).total_seconds()
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
    logger.info(
        "HTTP Response",
        extra={
            "correlation_id": correlation_id,
            "status_code": response.status_code,
            "processing_time_seconds": processing_time
        }
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
    await metrics_collector.record_request(
        method=request.method,
        endpoint=str(request.url.path),
        status_code=response.status_code,
        duration=processing_time
    )
    
    return response


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    uvicorn.run(
        "api.main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    )