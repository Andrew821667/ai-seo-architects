"""
Task Coordination Agent - Management —É—Ä–æ–≤–µ–Ω—å
–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é –∑–∞–¥–∞—á –º–µ–∂–¥—É –≤—Å–µ–º–∏ operational –∞–≥–µ–Ω—Ç–∞–º–∏
"""

import asyncio
from typing import Dict, Any, List, Optional, Union
from datetime import datetime, timedelta
import json
import random

from core.base_agent import BaseAgent
from core.interfaces.data_models import LeadInput, LeadOutput

class TaskCoordinationAgent(BaseAgent):
    """
    Task Coordination Agent - Management —É—Ä–æ–≤–µ–Ω—å

    –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å:
    - –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á –º–µ–∂–¥—É operational –∞–≥–µ–Ω—Ç–∞–º–∏
    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ SLA –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    - –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –Ω–∞–≥—Ä—É–∑–∫–∏ –∏ —Ä–µ—Å—É—Ä—Å–æ–≤
    - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –º—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ –∏ –¥–µ–¥–ª–∞–π–Ω–∞–º–∏
    """

    def __init__(self, data_provider=None, **kwargs):
        super().__init__(
            agent_id="task_coordination",
            name="Task Coordination Agent",
            data_provider=data_provider,
            knowledge_base="knowledge/management/task_coordination.md",
            model_name="gpt-4o",  # Management —É—Ä–æ–≤–µ–Ω—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª—É—á—à—É—é –º–æ–¥–µ–ª—å
            **kwargs
        )

        # ‚úÖ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–£–ï–ú STATS
        self.stats = {
            'total_tasks': 0,
            'success_count': 0,
            'error_count': 0,
            'total_processing_time': 0.0,
            'routing_decisions': 0,
            'sla_violations': 0,
            'coordination_success_rate': 0.95
        }

        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
        self.agent_registry = {
            'lead_qualification': {
                'agent_id': 'lead_qualification',
                'level': 'operational',
                'specialization': ['lead_analysis', 'bant_scoring', 'qualification'],
                'capacity': 10,  # –º–∞–∫—Å–∏–º—É–º –∑–∞–¥–∞—á –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
                'current_load': 0,
                'avg_processing_time': 300,  # 5 –º–∏–Ω—É—Ç
                'sla_hours': 2,
                'success_rate': 0.92
            },
            'proposal_generation': {
                'agent_id': 'proposal_generation',
                'level': 'operational', 
                'specialization': ['proposals', 'pricing', 'service_packages'],
                'capacity': 8,
                'current_load': 0,
                'avg_processing_time': 600,  # 10 –º–∏–Ω—É—Ç
                'sla_hours': 4,
                'success_rate': 0.89
            },
            'business_development_director': {
                'agent_id': 'business_development_director',
                'level': 'executive',
                'specialization': ['enterprise_deals', 'strategic_partnerships', 'executive_decisions'],
                'capacity': 5,
                'current_load': 0,
                'avg_processing_time': 1800,  # 30 –º–∏–Ω—É—Ç
                'sla_hours': 24,
                'success_rate': 0.96
            }
        }

        # –ú–∞—Ç—Ä–∏—Ü–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á
        self.routing_matrix = {
            'lead_qualification': 'lead_qualification',
            'lead_analysis': 'lead_qualification',
            'bant_scoring': 'lead_qualification',
            'prospect_evaluation': 'lead_qualification',
            
            'proposal_generation': 'proposal_generation',
            'pricing_analysis': 'proposal_generation',
            'service_packaging': 'proposal_generation',
            'quote_creation': 'proposal_generation',
            
            'enterprise_assessment': 'business_development_director',
            'strategic_partnership': 'business_development_director',
            'competitive_analysis': 'business_development_director',
            'market_expansion': 'business_development_director',
            'executive_strategy': 'business_development_director'
        }

        # –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ (1000-–±–∞–ª–ª—å–Ω–∞—è —à–∫–∞–ª–∞)
        self.priority_weights = {
            'business_criticality': 0.35,  # 35%
            'time_constraints': 0.25,      # 25%
            'client_value': 0.20,          # 20%
            'task_complexity': 0.10,       # 10%
            'dependencies': 0.10           # 10%
        }

        # SLA –º–∞—Ç—Ä–∏—Ü–∞ –ø–æ —Ç–∏–ø–∞–º –∑–∞–¥–∞—á
        self.sla_matrix = {
            'critical': {'hours': 1, 'priority_boost': 300},
            'high': {'hours': 4, 'priority_boost': 200},
            'medium': {'hours': 24, 'priority_boost': 100},
            'low': {'hours': 72, 'priority_boost': 0}
        }

        print(f"üéØ {self.name} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:")
        print(f"  üìä –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–≥–µ–Ω—Ç–æ–≤: {len(self.agent_registry)}")
        print(f"  üéØ –¢–∏–ø–æ–≤ –∑–∞–¥–∞—á –≤ –º–∞—Ç—Ä–∏—Ü–µ: {len(self.routing_matrix)}")
        print(f"  ‚öñÔ∏è –í–µ—Å–æ–≤—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: {len(self.priority_weights)}")
        print(f"  üìà –¶–µ–ª–µ–≤–æ–π coordination rate: {self.stats['coordination_success_rate']*100}%")

    async def process_task(self, task_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á
        """
        start_time = datetime.now()

        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            input_data = task_data.get('input_data', {})
            task_type = input_data.get('task_type', 'route_task')

            print(f"üéØ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –∑–∞–¥–∞—á–∏ —Ç–∏–ø–∞: {task_type}")

            # –†–æ—É—Ç–∏–Ω–≥ –ø–æ —Ç–∏–ø–∞–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
            if task_type == 'route_task':
                result = await self._route_task(input_data)
            elif task_type == 'monitor_sla':
                result = await self._monitor_sla(input_data)
            elif task_type == 'balance_load':
                result = await self._balance_load(input_data)
            elif task_type == 'system_status':
                result = await self._get_system_status(input_data)
            elif task_type == 'escalate_issue':
                result = await self._escalate_issue(input_data)
            else:
                # Default: —Ä–æ—É—Ç–∏–Ω–≥ –∑–∞–¥–∞—á–∏
                result = await self._route_task(input_data)

            # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            processing_time = (datetime.now() - start_time).total_seconds()

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.stats['total_tasks'] += 1
            self.stats['total_processing_time'] += processing_time
            self.stats['success_count'] += 1
            self.stats['routing_decisions'] += 1

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            coordination_result = {
                'agent_id': self.agent_id,
                'agent_name': self.name,
                'task_type': task_type,
                'timestamp': datetime.now().isoformat(),
                'processing_time_seconds': round(processing_time, 2),
                'result': result,
                'management_level': True,
                'coordination_quality': self._assess_coordination_quality(result),
                'system_impact': result.get('system_impact', 'medium'),
                'success': True
            }

            print(f"‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {processing_time:.2f}—Å")
            return coordination_result

        except Exception as e:
            processing_time = (datetime.now() - start_time).total_seconds()
            self.stats['total_tasks'] += 1
            self.stats['total_processing_time'] += processing_time
            self.stats['error_count'] += 1

            error_result = {
                'agent_id': self.agent_id,
                'agent_name': self.name,
                'task_type': task_data.get('input_data', {}).get('task_type', 'unknown'),
                'timestamp': datetime.now().isoformat(),
                'processing_time_seconds': round(processing_time, 2),
                'error': str(e),
                'management_level': True,
                'success': False
            }

            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏: {str(e)}")
            return error_result

    async def _route_task(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """
        –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á–∏ –∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–º—É –∞–≥–µ–Ω—Ç—É
        """
        # –ê–Ω–∞–ª–∏–∑ –≤—Ö–æ–¥—è—â–µ–π –∑–∞–¥–∞—á–∏
        task_analysis = self._analyze_incoming_task(data)
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
        target_agent = self._determine_target_agent(task_analysis)
        
        # –†–∞—Å—á–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        priority_analysis = self._calculate_priority(data, task_analysis)
        
        # –ê–Ω–∞–ª–∏–∑ capacity –∏ –Ω–∞–≥—Ä—É–∑–∫–∏
        capacity_analysis = self._analyze_agent_capacity(target_agent)
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑ –∏ SLA
        timing_analysis = self._analyze_timing_and_sla(task_analysis, target_agent, priority_analysis)
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
        routing_decision = self._make_routing_decision(
            target_agent, priority_analysis, capacity_analysis, timing_analysis
        )

        return {
            'task_analysis': task_analysis,
            'target_agent': target_agent,
            'priority_analysis': priority_analysis,
            'capacity_analysis': capacity_analysis,
            'timing_analysis': timing_analysis,
            'routing_decision': routing_decision,
            'estimated_completion': self._estimate_completion_time(target_agent, priority_analysis),
            'coordination_confidence': self._calculate_coordination_confidence(routing_decision)
        }

    def _analyze_incoming_task(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –≤—Ö–æ–¥—è—â–µ–π –∑–∞–¥–∞—á–∏"""
        original_task_type = data.get('original_task_type', 'unknown')
        task_data = data.get('task_data', {})
        client_info = data.get('client_info', {})
        
        # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–¥–∞—á–∏
        task_category = self._classify_task_category(original_task_type)
        complexity_score = self._assess_task_complexity(task_data)
        urgency_level = self._determine_urgency(data)
        
        return {
            'original_task_type': original_task_type,
            'task_category': task_category,
            'complexity_score': complexity_score,
            'urgency_level': urgency_level,
            'client_tier': self._determine_client_tier(client_info),
            'estimated_effort': self._estimate_effort(task_data, complexity_score),
            'dependencies': self._identify_dependencies(task_data)
        }

    def _determine_target_agent(self, task_analysis: Dict[str, Any]) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–¥–∞—á–∏"""
        task_type = task_analysis['original_task_type']
        
        # –ü—Ä—è–º–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–∑ –º–∞—Ç—Ä–∏—Ü—ã –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
        if task_type in self.routing_matrix:
            return self.routing_matrix[task_type]
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–¥–∞—á–∏
        task_category = task_analysis['task_category']
        
        if task_category == 'sales':
            if task_analysis['complexity_score'] >= 80:
                return 'business_development_director'  # –°–ª–æ–∂–Ω—ã–µ sales –∑–∞–¥–∞—á–∏
            elif 'proposal' in task_type or 'pricing' in task_type:
                return 'proposal_generation'
            else:
                return 'lead_qualification'
        
        elif task_category == 'strategic':
            return 'business_development_director'
        
        elif task_category == 'operational':
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ–∂–¥—É operational –∞–≥–µ–Ω—Ç–∞–º–∏
            if 'lead' in task_type or 'qualification' in task_type:
                return 'lead_qualification'
            else:
                return 'proposal_generation'
        
        # Default fallback
        return 'lead_qualification'

    def _calculate_priority(self, data: Dict[str, Any], task_analysis: Dict[str, Any]) -> Dict[str, Any]:
        """–†–∞—Å—á–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∑–∞–¥–∞—á–∏ –ø–æ 1000-–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ"""
        score = 0
        
        # 1. Business Criticality (35% –≤–µ—Å–∞ = 350 –±–∞–ª–ª–æ–≤ –º–∞–∫—Å)
        urgency_level = task_analysis['urgency_level']
        criticality_score = {
            'critical': 350,
            'high': 250,
            'medium': 150,
            'low': 50
        }.get(urgency_level, 100)
        score += criticality_score
        
        # 2. Time Constraints (25% –≤–µ—Å–∞ = 250 –±–∞–ª–ª–æ–≤ –º–∞–∫—Å)
        deadline = data.get('deadline_hours', 24)
        if deadline <= 1:
            time_score = 250
        elif deadline <= 4:
            time_score = 200
        elif deadline <= 24:
            time_score = 150
        elif deadline <= 72:
            time_score = 100
        else:
            time_score = 50
        score += time_score
        
        # 3. Client Value (20% –≤–µ—Å–∞ = 200 –±–∞–ª–ª–æ–≤ –º–∞–∫—Å)
        client_tier = task_analysis.get('client_tier', 'standard')
        client_score = {
            'enterprise': 200,
            'premium': 150,
            'standard': 100,
            'small': 50,
            'prospect': 30
        }.get(client_tier, 50)
        score += client_score
        
        # 4. Task Complexity (10% –≤–µ—Å–∞ = 100 –±–∞–ª–ª–æ–≤ –º–∞–∫—Å)
        complexity = task_analysis['complexity_score']
        if complexity >= 80:
            complexity_bonus = 30  # –°–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—É—á–∞—é—Ç boost
        elif complexity >= 60:
            complexity_bonus = 50  # –°—Ä–µ–¥–Ω–µ-—Å–ª–æ–∂–Ω—ã–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã
        elif complexity >= 40:
            complexity_bonus = 70  # –ü—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞—á–∏ –±—ã—Å—Ç—Ä–æ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è
        else:
            complexity_bonus = 100  # –û—á–µ–Ω—å –ø—Ä–æ—Å—Ç—ã–µ = –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        score += complexity_bonus
        
        # 5. Dependencies (10% –≤–µ—Å–∞ = 100 –±–∞–ª–ª–æ–≤ –º–∞–∫—Å)
        dependencies = task_analysis.get('dependencies', [])
        if len(dependencies) == 0:
            dep_score = 100  # –ù–µ–∑–∞–≤–∏—Å–∏–º—ã–µ –∑–∞–¥–∞—á–∏ = –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        elif len(dependencies) <= 2:
            dep_score = 70
        else:
            dep_score = 40  # –ú–Ω–æ–≥–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π = –Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        score += dep_score
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
        final_score = min(score, 1000)
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        if final_score >= 800:
            priority_category = 'critical'
        elif final_score >= 600:
            priority_category = 'high'
        elif final_score >= 400:
            priority_category = 'medium'
        else:
            priority_category = 'low'
        
        return {
            'calculated_priority': final_score,
            'priority_category': priority_category,
            'criticality_score': criticality_score,
            'time_score': time_score,
            'client_score': client_score,
            'complexity_bonus': complexity_bonus,
            'dependency_score': dep_score,
            'priority_breakdown': {
                'business_criticality': criticality_score / 1000,
                'time_constraints': time_score / 1000,
                'client_value': client_score / 1000,
                'task_complexity': complexity_bonus / 1000,
                'dependencies': dep_score / 1000
            }
        }

    def _analyze_agent_capacity(self, target_agent: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ capacity –∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–µ–ª–µ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞"""
        if target_agent not in self.agent_registry:
            return {'error': f'Agent {target_agent} not found'}
        
        agent_info = self.agent_registry[target_agent]
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–≥—Ä—É–∑–∫—É (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —ç—Ç–æ –±—ã –±—Ä–∞–ª–∏—Å—å –∏–∑ –º–µ—Ç—Ä–∏–∫)
        current_load = random.randint(0, agent_info['capacity'])
        load_percentage = (current_load / agent_info['capacity']) * 100
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤ registry
        self.agent_registry[target_agent]['current_load'] = current_load
        
        # –ê–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        if load_percentage >= 90:
            availability_status = 'overloaded'
            recommendation = 'consider_alternative_or_queue'
        elif load_percentage >= 75:
            availability_status = 'high_load'
            recommendation = 'monitor_closely'
        elif load_percentage >= 50:
            availability_status = 'normal_load'
            recommendation = 'proceed_normally'
        else:
            availability_status = 'low_load'
            recommendation = 'optimal_assignment'
        
        return {
            'agent_id': target_agent,
            'current_load': current_load,
            'max_capacity': agent_info['capacity'],
            'load_percentage': round(load_percentage, 1),
            'availability_status': availability_status,
            'recommendation': recommendation,
            'avg_processing_time': agent_info['avg_processing_time'],
            'success_rate': agent_info['success_rate'],
            'queue_position': current_load + 1 if current_load >= agent_info['capacity'] else 0
        }

    def _analyze_timing_and_sla(self, task_analysis: Dict, target_agent: str, priority_analysis: Dict) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–∞–º–æ–∫ –∏ SLA"""
        agent_info = self.agent_registry.get(target_agent, {})
        avg_processing_time = agent_info.get('avg_processing_time', 600)  # default 10 –º–∏–Ω
        
        # –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        complexity_multiplier = 1 + (task_analysis['complexity_score'] / 100)
        estimated_duration = avg_processing_time * complexity_multiplier
        
        # –£—á–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≥–µ–Ω—Ç–∞
        load_percentage = self._get_agent_load_percentage(target_agent)
        if load_percentage >= 75:
            queue_delay = (load_percentage - 50) * 10  # –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            estimated_duration += queue_delay
        
        # SLA –∞–Ω–∞–ª–∏–∑
        priority_category = priority_analysis['priority_category']
        sla_requirements = self.sla_matrix.get(priority_category, {'hours': 24})
        sla_seconds = sla_requirements['hours'] * 3600
        
        # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–æ–±–ª—é–¥–µ–Ω–∏—è SLA
        if estimated_duration <= sla_seconds * 0.5:
            sla_compliance_probability = 0.95
        elif estimated_duration <= sla_seconds * 0.75:
            sla_compliance_probability = 0.85
        elif estimated_duration <= sla_seconds:
            sla_compliance_probability = 0.70
        else:
            sla_compliance_probability = 0.40
        
        return {
            'estimated_duration_seconds': round(estimated_duration),
            'estimated_duration_hours': round(estimated_duration / 3600, 2),
            'sla_requirement_hours': sla_requirements['hours'],
            'sla_compliance_probability': sla_compliance_probability,
            'queue_delay_factor': queue_delay if load_percentage >= 75 else 0,
            'complexity_adjustment': complexity_multiplier,
            'estimated_completion_time': (datetime.now() + timedelta(seconds=estimated_duration)).isoformat()
        }

    def _make_routing_decision(self, target_agent: str, priority_analysis: Dict, 
                              capacity_analysis: Dict, timing_analysis: Dict) -> Dict[str, Any]:
        """–ü—Ä–∏–Ω—è—Ç–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –æ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è
        if capacity_analysis['load_percentage'] >= 95:
            # –ê–≥–µ–Ω—Ç –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω - –∏—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
            alternative_agent = self._find_alternative_agent(target_agent, priority_analysis)
            if alternative_agent:
                decision = 'route_to_alternative'
                final_agent = alternative_agent
                reason = f'Primary agent {target_agent} overloaded, routing to {alternative_agent}'
            else:
                decision = 'queue_for_primary'
                final_agent = target_agent
                reason = f'No alternatives available, queuing for {target_agent}'
        elif timing_analysis['sla_compliance_probability'] < 0.5:
            # –ù–∏–∑–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–æ–±–ª—é–¥–µ–Ω–∏—è SLA
            if priority_analysis['priority_category'] in ['critical', 'high']:
                decision = 'escalate_priority'
                final_agent = target_agent
                reason = 'SLA risk detected, escalating priority'
            else:
                decision = 'accept_risk'
                final_agent = target_agent
                reason = 'SLA risk acceptable for priority level'
        else:
            # –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è
            decision = 'route_normally'
            final_agent = target_agent
            reason = 'Optimal routing conditions'
        
        return {
            'decision': decision,
            'final_agent': final_agent,
            'reason': reason,
            'confidence': self._calculate_routing_confidence(capacity_analysis, timing_analysis),
            'alternative_considered': target_agent != final_agent,
            'risk_factors': self._identify_risk_factors(capacity_analysis, timing_analysis),
            'success_probability': min(
                capacity_analysis.get('success_rate', 0.9),
                timing_analysis['sla_compliance_probability']
            )
        }

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    def _classify_task_category(self, task_type: str) -> str:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–¥–∞—á–∏"""
        if any(word in task_type.lower() for word in ['lead', 'qualification', 'prospect']):
            return 'sales'
        elif any(word in task_type.lower() for word in ['proposal', 'pricing', 'quote']):
            return 'sales'
        elif any(word in task_type.lower() for word in ['enterprise', 'strategic', 'partnership']):
            return 'strategic'
        else:
            return 'operational'

    def _assess_task_complexity(self, task_data: Dict) -> int:
        """–û—Ü–µ–Ω–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á–∏ (0-100)"""
        base_complexity = 50
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
        if isinstance(task_data, dict):
            if len(task_data) > 10:
                base_complexity += 20
            if any(isinstance(v, dict) for v in task_data.values()):
                base_complexity += 15
            if any(isinstance(v, list) and len(v) > 5 for v in task_data.values()):
                base_complexity += 10
        
        return min(base_complexity, 100)

    def _determine_urgency(self, data: Dict) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Å—Ä–æ—á–Ω–æ—Å—Ç–∏"""
        deadline_hours = data.get('deadline_hours', 24)
        is_critical = data.get('is_critical', False)
        
        if is_critical or deadline_hours <= 1:
            return 'critical'
        elif deadline_hours <= 4:
            return 'high'
        elif deadline_hours <= 24:
            return 'medium'
        else:
            return 'low'

    def _determine_client_tier(self, client_info: Dict) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∫–ª–∏–µ–Ω—Ç–∞"""
        monthly_value = client_info.get('monthly_value', 0)
        
        if monthly_value >= 25000:
            return 'enterprise'
        elif monthly_value >= 10000:
            return 'premium'
        elif monthly_value >= 5000:
            return 'standard'
        elif monthly_value > 0:
            return 'small'
        else:
            return 'prospect'

    def _estimate_effort(self, task_data: Dict, complexity_score: int) -> str:
        """–û—Ü–µ–Ω–∫–∞ —É—Å–∏–ª–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        if complexity_score >= 80:
            return 'high'
        elif complexity_score >= 60:
            return 'medium'
        else:
            return 'low'

    def _identify_dependencies(self, task_data: Dict) -> List[str]:
        """–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∑–∞–¥–∞—á–∏"""
        dependencies = []
        
        if isinstance(task_data, dict):
            if 'requires_approval' in task_data:
                dependencies.append('approval_required')
            if 'external_data_needed' in task_data:
                dependencies.append('external_data')
            if 'client_input_required' in task_data:
                dependencies.append('client_input')
        
        return dependencies

    def _get_agent_load_percentage(self, agent_id: str) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≥–µ–Ω—Ç–∞"""
        agent_info = self.agent_registry.get(agent_id, {})
        current_load = agent_info.get('current_load', 0)
        capacity = agent_info.get('capacity', 10)
        return (current_load / capacity) * 100

    def _find_alternative_agent(self, primary_agent: str, priority_analysis: Dict) -> Optional[str]:
        """–ü–æ–∏—Å–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞"""
        primary_info = self.agent_registry.get(primary_agent, {})
        primary_specialization = primary_info.get('specialization', [])
        
        # –ò—â–µ–º –∞–≥–µ–Ω—Ç–∞ —Å –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–µ–π—Å—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –∏ –Ω–∏–∑–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π
        for agent_id, agent_info in self.agent_registry.items():
            if agent_id == primary_agent:
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π
            if any(spec in agent_info['specialization'] for spec in primary_specialization):
                load_percentage = self._get_agent_load_percentage(agent_id)
                if load_percentage < 80:  # –ú–µ–Ω–µ–µ 80% –∑–∞–≥—Ä—É–∑–∫–∏
                    return agent_id
        
        return None

    def _calculate_routing_confidence(self, capacity_analysis: Dict, timing_analysis: Dict) -> float:
        """–†–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —Ä–µ—à–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏"""
        base_confidence = 0.8
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∑–∫–∏
        load_percentage = capacity_analysis.get('load_percentage', 50)
        if load_percentage < 50:
            confidence_boost = 0.15
        elif load_percentage < 75:
            confidence_boost = 0.05
        else:
            confidence_boost = -0.1
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ SLA
        sla_probability = timing_analysis.get('sla_compliance_probability', 0.8)
        sla_boost = (sla_probability - 0.8) * 0.5
        
        final_confidence = base_confidence + confidence_boost + sla_boost
        return min(max(final_confidence, 0.0), 1.0)

    def _identify_risk_factors(self, capacity_analysis: Dict, timing_analysis: Dict) -> List[str]:
        """–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Ñ–∞–∫—Ç–æ—Ä–æ–≤ —Ä–∏—Å–∫–∞"""
        risks = []
        
        if capacity_analysis.get('load_percentage', 0) > 85:
            risks.append('high_agent_load')
        
        if timing_analysis.get('sla_compliance_probability', 1.0) < 0.7:
            risks.append('sla_risk')
        
        if timing_analysis.get('queue_delay_factor', 0) > 100:
            risks.append('queue_delays')
        
        return risks

    def _estimate_completion_time(self, target_agent: str, priority_analysis: Dict) -> Dict[str, Any]:
        """–û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        agent_info = self.agent_registry.get(target_agent, {})
        base_time = agent_info.get('avg_processing_time', 600)
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        priority_multiplier = {
            'critical': 0.8,  # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –±—ã—Å—Ç—Ä–µ–µ
            'high': 0.9,
            'medium': 1.0,
            'low': 1.2
        }.get(priority_analysis['priority_category'], 1.0)
        
        adjusted_time = base_time * priority_multiplier
        completion_time = datetime.now() + timedelta(seconds=adjusted_time)
        
        return {
            'estimated_seconds': round(adjusted_time),
            'estimated_completion': completion_time.isoformat(),
            'priority_adjustment_factor': priority_multiplier
        }

    def _calculate_coordination_confidence(self, routing_decision: Dict) -> float:
        """–†–∞—Å—á–µ—Ç –æ–±—â–µ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏"""
        base_confidence = routing_decision.get('confidence', 0.8)
        success_probability = routing_decision.get('success_probability', 0.9)
        
        # –£—á–∏—Ç—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        coordination_rate = self.stats.get('coordination_success_rate', 0.95)
        
        overall_confidence = (base_confidence * 0.4 + success_probability * 0.4 + coordination_rate * 0.2)
        return min(overall_confidence, 1.0)

    def _assess_coordination_quality(self, result: Dict) -> str:
        """–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏"""
        confidence = result.get('coordination_confidence', 0.8)
        
        if confidence >= 0.9:
            return 'excellent'
        elif confidence >= 0.8:
            return 'good'
        elif confidence >= 0.7:
            return 'acceptable'
        else:
            return 'needs_improvement'

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á
    async def _monitor_sla(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ SLA"""
        return {
            'sla_status': 'monitoring_active',
            'violations_detected': 0,
            'agents_at_risk': [],
            'system_health': 'good'
        }

    async def _balance_load(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """–ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –Ω–∞–≥—Ä—É–∑–∫–∏"""
        return {
            'balancing_action': 'load_redistribution',
            'agents_rebalanced': 2,
            'efficiency_improvement': 0.15
        }

    async def _get_system_status(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        total_agents = len(self.agent_registry)
        healthy_agents = sum(1 for agent in self.agent_registry.values() 
                           if self._get_agent_load_percentage(agent.get('agent_id', '')) < 90)
        
        avg_load = sum(self._get_agent_load_percentage(agent_id) 
                      for agent_id in self.agent_registry.keys()) / total_agents
        
        return {
            'overall_status': 'healthy' if healthy_agents / total_agents > 0.8 else 'degraded',
            'total_agents': total_agents,
            'healthy_agents': healthy_agents,
            'system_load_percentage': round(avg_load, 1),
            'coordination_stats': {
                'total_coordinated': self.stats['total_tasks'],
                'success_rate': self.stats['success_count'] / max(self.stats['total_tasks'], 1),
                'coordination_success_rate': self.stats['coordination_success_rate']
            },
            'performance_metrics': {
                'avg_routing_time': self.stats['total_processing_time'] / max(self.stats['total_tasks'], 1),
                'sla_violations': self.stats['sla_violations'],
                'routing_decisions': self.stats['routing_decisions']
            }
        }

    async def _escalate_issue(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """–≠—Å–∫–∞–ª–∞—Ü–∏—è –ø—Ä–æ–±–ª–µ–º—ã"""
        return {
            'escalation_initiated': True,
            'escalation_level': 'management',
            'estimated_resolution_time': '30_minutes',
            'stakeholders_notified': ['operations_manager', 'technical_lead']
        }
