"""
ü§ù Client Success Manager Agent

Management-level –∞–≥–µ–Ω—Ç –¥–ª—è –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ —É—Å–ø–µ—Ö–∞, –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—Ç—Ç–æ–∫–∞ 
–∏ —Ä–∞–∑–≤–∏—Ç–∏—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ SEO-–∞–≥–µ–Ω—Ç—Å—Ç–≤–∞.

–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- Churn prediction & prevention
- Onboarding automation  
- Upsell/cross-sell identification
- QBR generation
- Success metrics tracking
"""

import logging
from typing import Dict, Any, List, Optional
from datetime import datetime, timedelta
import random

from core.base_agent import BaseAgent
from core.interfaces.data_models import AgentMetrics

logger = logging.getLogger(__name__)


class ClientSuccessManagerAgent(BaseAgent):
    """
    ü§ù Client Success Manager Agent
    
    Management-level –∞–≥–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–º —É—Å–ø–µ—Ö–æ–º –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—Ç—Ç–æ–∫–∞.
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ª–æ—è–ª—å–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞.
    """
    
    def __init__(self, data_provider=None, **kwargs):
        super().__init__(
            agent_id="client_success_manager",
            name="Client Success Manager",
            agent_level="management",
            data_provider=data_provider,
            **kwargs
        )
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Client Success
        self.churn_risk_threshold = 60  # –ü–æ—Ä–æ–≥ —Ä–∏—Å–∫–∞ –æ—Ç—Ç–æ–∫–∞
        self.upsell_probability_min = 0.40  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        self.health_score_critical = 30  # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∑–¥–æ—Ä–æ–≤—å—è –∫–ª–∏–µ–Ω—Ç–∞
        self.nps_target = 8.0  # –¶–µ–ª–µ–≤–æ–π NPS
        
        # Churn prediction factors
        self.churn_factors = {
            "contract_value": {"weight": 0.25, "threshold_low": 500000},
            "engagement_score": {"weight": 0.20, "threshold_low": 60},
            "payment_delays": {"weight": 0.15, "threshold_high": 2},
            "support_tickets": {"weight": 0.15, "threshold_high": 5},
            "feature_adoption": {"weight": 0.10, "threshold_low": 40},
            "nps_score": {"weight": 0.10, "threshold_low": 7},
            "last_login": {"weight": 0.05, "threshold_high": 14}
        }
        
        # Upsell opportunities matrix
        self.upsell_opportunities = {
            "technical_seo": {
                "package": "Advanced Technical SEO",
                "value": 500000,
                "probability": 0.65
            },
            "content_marketing": {
                "package": "Content Strategy Premium", 
                "value": 300000,
                "probability": 0.55
            },
            "link_building": {
                "package": "Enterprise Link Building",
                "value": 800000,
                "probability": 0.45
            },
            "local_seo": {  
                "package": "Multi-Location SEO",
                "value": 200000,
                "probability": 0.70
            }
        }
        
        logger.info(f"‚úÖ {self.name} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:")
        logger.info(f"   üéØ Churn Risk Threshold: {self.churn_risk_threshold}%")
        logger.info(f"   üí∞ Min Upsell Probability: {self.upsell_probability_min:.0%}")
        logger.info(f"   üö® Critical Health Score: {self.health_score_critical}")
        logger.info(f"   üìä Target NPS: {self.nps_target}")

    def get_system_prompt(self) -> str:
        """–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è Client Success Manager"""
        return f"""–¢—ã - Client Success Manager —É—Ä–æ–≤–Ω—è management, —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–º—É —É—Å–ø–µ—Ö—É –∏ retention.

–¢–í–û–Ø –≠–ö–°–ü–ï–†–¢–ò–ó–ê:
‚Ä¢ Churn Prediction & Prevention - 35%
‚Ä¢ Customer Success Strategy - 25% 
‚Ä¢ Upsell/Cross-sell Optimization - 20%
‚Ä¢ QBR & Reporting - 20%

–ü–û–†–û–ì–û–í–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø:
‚Ä¢ Churn Risk Threshold: {self.churn_risk_threshold}%
‚Ä¢ Min Upsell Probability: {self.upsell_probability_min:.0%}
‚Ä¢ Critical Health Score: {self.health_score_critical}
‚Ä¢ Target NPS: {self.nps_target}

–ó–ê–î–ê–ß–ê: –ü—Ä–æ–≤–µ–¥–∏ comprehensive client success analysis.

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (JSON):
{{
  "client_analysis": {{
    "health_score": "0-100",
    "churn_risk": "0-100",
    "satisfaction_metrics": {{}},
    "engagement_level": "high/medium/low"
  }},
  "retention_strategy": [],
  "upsell_opportunities": [],
  "action_items": [],
  "confidence_score": "0.0-1.0"
}}"""

    async def process_task(self, task_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á Client Success Manager —Å LLM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
        """
        task_type = task_data.get('task_type', 'client_health_assessment')
        input_data = task_data.get('input_data', {})
        
        print(f"üéØ Client Success Manager –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á—É: {task_type}")

        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è LLM
            user_prompt = f"""–ü—Ä–æ–≤–µ–¥–∏ client success analysis:
            
–ó–ê–î–ê–ß–ê: {task_type}
–î–ê–ù–ù–´–ï –ö–õ–ò–ï–ù–¢–ê: 
{input_data}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π —É—Å–ø–µ—Ö –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ retention –∏ upsell."""
            
            # –í—ã–∑—ã–≤–∞–µ–º LLM
            llm_result = await self.process_with_llm(user_prompt, task_data)
            
            if llm_result["success"]:
                try:
                    import re
                    import json
                    llm_content = llm_result["result"]
                    if isinstance(llm_content, str):
                        json_match = re.search(r'\{.*\}', llm_content, re.DOTALL)
                        if json_match:
                            result = json.loads(json_match.group())
                        else:
                            result = self._create_fallback_client_analysis(input_data, task_type)
                    else:
                        result = llm_content
                except (json.JSONDecodeError, AttributeError):
                    result = self._create_fallback_client_analysis(input_data, task_type)
            else:
                result = self._create_fallback_client_analysis(input_data, task_type)
                result["fallback_mode"] = True

            return {
                "success": True,
                "agent": self.agent_id,
                "timestamp": datetime.now().isoformat(),
                "task_type": task_type,
                "result": result,
                "model_used": llm_result.get('model_used') if llm_result["success"] else None
            }
            
        except Exception as e:
            return {
                "success": False,
                "agent": self.agent_id,
                "error": str(e),
                "timestamp": datetime.now().isoformat()
            }

    def _create_fallback_client_analysis(self, input_data: Dict[str, Any], task_type: str) -> Dict[str, Any]:
        """Fallback client success analysis"""
        return {
            "client_analysis": {
                "health_score": 78,
                "churn_risk": 25,
                "satisfaction_metrics": {"nps": 8.2, "csat": 4.1},
                "engagement_level": "high"
            },
            "retention_strategy": [
                "–£—Å–∏–ª–∏—Ç—å –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ —Å –∫–ª–∏–µ–Ω—Ç–æ–º",
                "–ü—Ä–æ–≤–µ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π QBR"
            ],
            "upsell_opportunities": [
                "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ SEO —É—Å–ª—É–≥–∏",
                "–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ geografic coverage"
            ],
            "action_items": [
                "–ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–≤–æ–Ω–æ–∫ —Å –∫–ª–∏–µ–Ω—Ç–æ–º",
                "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å proposal –¥–ª—è upsell"
            ],
            "confidence_score": 0.85,
            "fallback_used": True
        }

    async def _assess_client_health(self, task_data: Dict[str, Any]) -> Dict[str, Any]:
        """–û—Ü–µ–Ω–∫–∞ –æ–±—â–µ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è –∫–ª–∏–µ–Ω—Ç–∞"""
        client_data = task_data.get('client_data', {})
        client_name = client_data.get('company_name', 'Unknown Client')
        
        # –°–∏–º—É–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞
        monthly_value = client_data.get('monthly_value', random.randint(200000, 2000000))
        engagement_score = random.randint(45, 95)
        payment_delays = random.randint(0, 3)
        support_tickets = random.randint(1, 8)
        feature_adoption = random.randint(30, 85)
        nps_score = random.randint(6, 10)
        last_login_days = random.randint(1, 21)
        
        # –†–∞—Å—á–µ—Ç health score
        health_score = self._calculate_health_score({
            'monthly_value': monthly_value,
            'engagement_score': engagement_score,
            'payment_delays': payment_delays,
            'support_tickets': support_tickets,
            'feature_adoption': feature_adoption,
            'nps_score': nps_score,
            'last_login_days': last_login_days
        })
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è
        if health_score >= 80:
            health_status = "excellent"
            health_description = "–ö–ª–∏–µ–Ω—Ç-—á–µ–º–ø–∏–æ–Ω"
        elif health_score >= 60:
            health_status = "good"
            health_description = "–°—Ç–∞–±–∏–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç"
        elif health_score >= 40:
            health_status = "at_risk"
            health_description = "–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è"
        else:
            health_status = "critical"
            health_description = "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫"
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–µ–π—Å—Ç–≤–∏—è–º
        action_recommendations = self._get_health_recommendations(health_score, {
            'engagement_score': engagement_score,
            'payment_delays': payment_delays,
            'support_tickets': support_tickets,
            'nps_score': nps_score
        })
        
        logger.info(f"ü§ù Client Health Assessment –¥–ª—è {client_name}:")
        logger.info(f"   üìä Health Score: {health_score}/100")
        logger.info(f"   üíö Status: {health_status}")
        logger.info(f"   üéØ NPS: {nps_score}/10")
        
        return {
            "success": True,
            "client_name": client_name,
            "health_score": health_score,
            "health_status": health_status,
            "health_description": health_description,
            "metrics": {
                "monthly_value": monthly_value,
                "engagement_score": engagement_score,
                "payment_delays": payment_delays,
                "support_tickets": support_tickets,
                "feature_adoption": feature_adoption,
                "nps_score": nps_score,
                "last_login_days": last_login_days
            },
            "recommendations": action_recommendations,
            "agent": self.name,
            "confidence": round(random.uniform(0.75, 0.95), 2)
        }

    async def _analyze_churn_risk(self, task_data: Dict[str, Any]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–∞ –æ—Ç—Ç–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
        client_data = task_data.get('client_data', {})
        client_name = client_data.get('company_name', 'Unknown Client')
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∏—Å–∫–∞
        monthly_value = client_data.get('monthly_value', random.randint(200000, 2000000))
        engagement_score = random.randint(35, 85)  # –ë–æ–ª–µ–µ –Ω–∏–∑–∫–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∏—Å–∫–∞
        payment_delays = random.randint(0, 4)
        support_tickets = random.randint(2, 12)
        feature_adoption = random.randint(20, 70)
        nps_score = random.randint(4, 9)
        last_login_days = random.randint(1, 30)
        
        # –†–∞—Å—á–µ—Ç churn risk score
        churn_score = self._calculate_churn_risk({
            'monthly_value': monthly_value,
            'engagement_score': engagement_score,
            'payment_delays': payment_delays,
            'support_tickets': support_tickets,
            'feature_adoption': feature_adoption,
            'nps_score': nps_score,
            'last_login_days': last_login_days
        })
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞
        if churn_score <= 30:
            risk_level = "low"
            risk_description = "–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫ –æ—Ç—Ç–æ–∫–∞"
            action_priority = "maintain"
        elif churn_score <= 60:
            risk_level = "medium"
            risk_description = "–°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫ –æ—Ç—Ç–æ–∫–∞"
            action_priority = "engage"
        elif churn_score <= 80:
            risk_level = "high"
            risk_description = "–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –æ—Ç—Ç–æ–∫–∞"
            action_priority = "intervene"
        else:
            risk_level = "critical"
            risk_description = "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫ –æ—Ç—Ç–æ–∫–∞"
            action_priority = "emergency_save"
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–∏–µ —Å–∏–≥–Ω–∞–ª—ã
        warning_signals = self._identify_warning_signals({
            'engagement_score': engagement_score,
            'payment_delays': payment_delays,
            'support_tickets': support_tickets,
            'last_login_days': last_login_days,
            'nps_score': nps_score
        })
        
        # –ü–ª–∞–Ω –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—Ç—Ç–æ–∫–∞
        retention_plan = self._create_retention_plan(risk_level, warning_signals)
        
        logger.info(f"üö® Churn Risk Analysis –¥–ª—è {client_name}:")
        logger.info(f"   üìä Churn Score: {churn_score}/100")
        logger.info(f"   ‚ö†Ô∏è Risk Level: {risk_level}")
        logger.info(f"   üéØ Action Priority: {action_priority}")
        
        return {
            "success": True,
            "client_name": client_name,
            "churn_score": churn_score,
            "risk_level": risk_level,
            "risk_description": risk_description,
            "action_priority": action_priority,
            "warning_signals": warning_signals,
            "retention_plan": retention_plan,
            "metrics": {
                "monthly_value": monthly_value,
                "engagement_score": engagement_score,
                "payment_delays": payment_delays,
                "support_tickets": support_tickets,
                "feature_adoption": feature_adoption,
                "nps_score": nps_score,
                "last_login_days": last_login_days
            },
            "agent": self.name,
            "confidence": round(random.uniform(0.70, 0.90), 2)
        }

    async def _analyze_upsell_opportunities(self, task_data: Dict[str, Any]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è upsell/cross-sell"""
        client_data = task_data.get('client_data', {})
        client_name = client_data.get('company_name', 'Unknown Client')
        
        current_spend = client_data.get('monthly_value', random.randint(500000, 2000000))
        industry = client_data.get('industry', 'general')
        business_type = client_data.get('business_type', 'enterprise')
        
        # –°–∏–º—É–ª—è—Ü–∏—è —Ç–µ–∫—É—â–∏—Ö –º–µ—Ç—Ä–∏–∫ –∫–ª–∏–µ–Ω—Ç–∞
        technical_score = random.randint(45, 85)
        content_score = random.randint(40, 80)
        domain_authority = random.randint(35, 70)
        organic_traffic = random.randint(50000, 500000)
        locations = random.randint(1, 15)
        
        # –ê–Ω–∞–ª–∏–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π upsell
        opportunities = []
        total_potential_value = 0
        
        # Technical SEO upsell
        if current_spend < 1000000 and technical_score < 70:
            opp = self.upsell_opportunities['technical_seo'].copy()
            opp['current_gap'] = 70 - technical_score
            opp['fit_score'] = round(random.uniform(0.60, 0.80), 2)
            opportunities.append(opp)
            total_potential_value += opp['value']
        
        # Content Marketing upsell
        if content_score < 60 and organic_traffic > 100000:
            opp = self.upsell_opportunities['content_marketing'].copy()
            opp['current_gap'] = 60 - content_score  
            opp['fit_score'] = round(random.uniform(0.50, 0.70), 2)
            opportunities.append(opp)
            total_potential_value += opp['value']
        
        # Link Building upsell
        if domain_authority < 50 and current_spend > 2000000:
            opp = self.upsell_opportunities['link_building'].copy()
            opp['current_gap'] = 50 - domain_authority
            opp['fit_score'] = round(random.uniform(0.40, 0.60), 2)
            opportunities.append(opp)
            total_potential_value += opp['value']
        
        # Local SEO upsell
        if business_type == 'local' and locations > 5:
            opp = self.upsell_opportunities['local_seo'].copy()
            opp['locations_potential'] = locations
            opp['fit_score'] = round(random.uniform(0.65, 0.85), 2)
            opportunities.append(opp)
            total_potential_value += opp['value']
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
        opportunities = sorted(opportunities, key=lambda x: x['fit_score'] * x['value'], reverse=True)
        
        # –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ expansion potential
        expansion_percentage = round((total_potential_value / current_spend) * 100, 1)
        
        logger.info(f"üí∞ Upsell Analysis –¥–ª—è {client_name}:")
        logger.info(f"   üìä Current Spend: {current_spend:,} ‚ÇΩ/–º–µ—Å")
        logger.info(f"   üöÄ Opportunities Found: {len(opportunities)}")
        logger.info(f"   üíé Total Potential: {total_potential_value:,} ‚ÇΩ/–º–µ—Å")
        logger.info(f"   üìà Expansion Potential: +{expansion_percentage}%")
        
        return {
            "success": True,
            "client_name": client_name,
            "current_monthly_spend": current_spend,
            "opportunities_count": len(opportunities),
            "total_potential_value": total_potential_value,
            "expansion_percentage": expansion_percentage,
            "opportunities": opportunities,
            "client_metrics": {
                "technical_score": technical_score,
                "content_score": content_score,
                "domain_authority": domain_authority,
                "organic_traffic": organic_traffic,
                "locations": locations
            },
            "recommendations": self._create_upsell_recommendations(opportunities),
            "agent": self.name,
            "confidence": round(random.uniform(0.65, 0.85), 2)
        }

    async def _track_onboarding_progress(self, task_data: Dict[str, Any]) -> Dict[str, Any]:
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
        client_data = task_data.get('client_data', {})
        client_name = client_data.get('company_name', 'Unknown Client')
        onboarding_day = task_data.get('onboarding_day', random.randint(1, 90))
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–∑—ã –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
        if onboarding_day <= 30:
            phase = "foundation"
            phase_name = "Foundation (Days 0-30)"
        elif onboarding_day <= 60:
            phase = "implementation"
            phase_name = "Implementation (Days 31-60)"  
        else:
            phase = "optimization"
            phase_name = "Optimization (Days 61-90)"
        
        # –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º –º–µ—Ç—Ä–∏–∫–∞–º
        progress_metrics = {
            "initial_audit_completion": min(100, max(0, onboarding_day * 3.33)),
            "stakeholder_alignment": min(100, max(0, (onboarding_day - 5) * 4.76)),
            "baseline_metrics": min(100, max(0, (onboarding_day - 10) * 5.56)),
            "team_introductions": min(100, max(0, (onboarding_day - 3) * 3.70)),
            "first_report_delivered": 100 if onboarding_day >= 14 else 0,
            "strategy_approval": 100 if onboarding_day >= 21 else 0,
            "implementation_start": 100 if onboarding_day >= 30 else 0
        }
        
        # –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        overall_progress = round(sum(progress_metrics.values()) / len(progress_metrics), 1)
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
        if overall_progress >= 90:
            status = "excellent"
            status_description = "–û–ø–µ—Ä–µ–∂–∞–µ—Ç –ø–ª–∞–Ω"
        elif overall_progress >= 70:
            status = "on_track"
            status_description = "–í —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø–ª–∞–Ω–æ–º"
        elif overall_progress >= 50:
            status = "delayed"
            status_description = "–ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞"
        else:
            status = "at_risk"
            status_description = "–†–∏—Å–∫ –ø—Ä–æ–≤–∞–ª–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞"
        
        # Next steps recommendations  
        next_steps = self._get_onboarding_next_steps(phase, overall_progress)
        
        # –û–∂–∏–¥–∞–µ–º–∞—è –¥–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        if overall_progress > 0:
            estimated_completion_days = round(90 * (100 / overall_progress))
            days_remaining = max(0, estimated_completion_days - onboarding_day)
        else:
            days_remaining = 90 - onboarding_day
        
        logger.info(f"üöÄ Onboarding Progress –¥–ª—è {client_name}:")
        logger.info(f"   üìÖ Day: {onboarding_day}/90")
        logger.info(f"   üìä Overall Progress: {overall_progress}%")
        logger.info(f"   üéØ Phase: {phase_name}")
        logger.info(f"   ‚úÖ Status: {status}")
        
        return {
            "success": True,
            "client_name": client_name,
            "onboarding_day": onboarding_day,
            "phase": phase,
            "phase_name": phase_name,
            "overall_progress": overall_progress,
            "status": status,
            "status_description": status_description,
            "progress_metrics": progress_metrics,
            "days_remaining": days_remaining,
            "next_steps": next_steps,
            "agent": self.name,
            "confidence": round(random.uniform(0.80, 0.95), 2)
        }

    async def _prepare_qbr(self, task_data: Dict[str, Any]) -> Dict[str, Any]:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å-–æ–±–∑–æ—Ä–∞ (QBR)"""
        client_data = task_data.get('client_data', {})
        client_name = client_data.get('company_name', 'Unknown Client')
        quarter = task_data.get('quarter', 'Q1 2025')
        
        # –°–∏–º—É–ª—è—Ü–∏—è –∫–≤–∞—Ä—Ç–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
        quarterly_metrics = {
            "organic_traffic_growth": round(random.uniform(15, 45), 1),
            "keyword_rankings_improved": random.randint(25, 80),
            "technical_score_improvement": random.randint(10, 35),
            "content_pieces_published": random.randint(12, 36),
            "conversion_rate_lift": round(random.uniform(8, 25), 1),
            "revenue_attributed": random.randint(2500000, 15000000)
        }
        
        # Highlights –∏ achievements
        quarterly_highlights = [
            f"Organic traffic —Ä–æ—Å—Ç –Ω–∞ {quarterly_metrics['organic_traffic_growth']}%",
            f"{quarterly_metrics['keyword_rankings_improved']} keywords –≤ —Ç–æ–ø-10",
            f"Technical SEO score —É–ª—É—á—à–µ–Ω –Ω–∞ {quarterly_metrics['technical_score_improvement']} –ø—É–Ω–∫—Ç–æ–≤"
        ]
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∫–≤–∞—Ä—Ç–∞–ª
        next_quarter_priorities = [
            "–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏",
            "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è Core Web Vitals",
            "–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ —è–¥—Ä–∞"
        ]
        
        # Investment recommendations
        investment_recommendations = {
            "technical_optimization": {
                "budget": random.randint(300000, 800000),
                "focus": "Core Web Vitals, mobile optimization"
            },
            "content_expansion": {
                "budget": random.randint(400000, 1000000),
                "focus": "Premium content, expert articles"
            },
            "link_building": {
                "budget": random.randint(500000, 1200000),
                "focus": "High-authority partnerships"
            }
        }
        
        # Risk assessment
        risk_factors = [
            "Competitive pressure –≤ –∫–ª—é—á–µ–≤—ã—Ö segments",
            "Google algorithm updates impact",
            "Seasonal traffic fluctuations"
        ]
        
        # Success probability –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–≤–∞—Ä—Ç–∞–ª–∞  
        success_probability = round(random.uniform(0.75, 0.92), 2)
        
        logger.info(f"üìä QBR Preparation –¥–ª—è {client_name} ({quarter}):")
        logger.info(f"   üìà Traffic Growth: {quarterly_metrics['organic_traffic_growth']}%")
        logger.info(f"   üéØ Keywords Improved: {quarterly_metrics['keyword_rankings_improved']}")
        logger.info(f"   üí∞ Revenue Attributed: {quarterly_metrics['revenue_attributed']:,} ‚ÇΩ")
        logger.info(f"   üöÄ Success Probability: {success_probability:.0%}")
        
        return {
            "success": True,
            "client_name": client_name,
            "quarter": quarter,
            "quarterly_metrics": quarterly_metrics,
            "quarterly_highlights": quarterly_highlights,
            "next_quarter_priorities": next_quarter_priorities,
            "investment_recommendations": investment_recommendations,
            "risk_factors": risk_factors,
            "success_probability": success_probability,
            "qbr_agenda": {
                "executive_summary": "10 –º–∏–Ω - –∫–ª—é—á–µ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è",
                "performance_deep_dive": "20 –º–∏–Ω - –¥–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", 
                "strategic_roadmap": "15 –º–∏–Ω - –ø–ª–∞–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∫–≤–∞—Ä—Ç–∞–ª",
                "open_discussion": "15 –º–∏–Ω - –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"
            },
            "agent": self.name,
            "confidence": round(random.uniform(0.85, 0.95), 2)
        }

    async def _comprehensive_client_analysis(self, task_data: Dict[str, Any]) -> Dict[str, Any]:
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–ª–∏–µ–Ω—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"""
        client_data = task_data.get('input_data', task_data.get('client_data', {}))
        client_name = client_data.get('company_name', 'Unknown Client')
        
        # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–ª—é—á–µ–≤—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤
        health_analysis = await self._assess_client_health({'client_data': client_data})
        churn_analysis = await self._analyze_churn_risk({'client_data': client_data})
        upsell_analysis = await self._analyze_upsell_opportunities({'client_data': client_data})
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        overall_score = round((
            health_analysis['health_score'] * 0.4 +
            (100 - churn_analysis['churn_score']) * 0.4 +
            min(100, upsell_analysis['expansion_percentage'] * 2) * 0.2
        ), 1)
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞
        if overall_score >= 80:
            client_status = "champion"
            status_description = "–ö–ª–∏–µ–Ω—Ç-—á–µ–º–ø–∏–æ–Ω, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ª–æ—è–ª—å–Ω–æ—Å—Ç—å"
        elif overall_score >= 60:
            client_status = "stable"
            status_description = "–°—Ç–∞–±–∏–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç, —Ö–æ—Ä–æ—à–∏–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã"
        elif overall_score >= 40:
            client_status = "at_risk"
            status_description = "–¢—Ä–µ–±—É–µ—Ç –ø–æ–≤—ã—à–µ–Ω–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è"
        else:
            client_status = "critical"
            status_description = "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –º–µ—Ä—ã"
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        strategic_actions = self._get_strategic_recommendations(
            health_analysis, churn_analysis, upsell_analysis
        )
        
        logger.info(f"üéØ Comprehensive Client Analysis –¥–ª—è {client_name}:")
        logger.info(f"   üìä Overall Score: {overall_score}/100")
        logger.info(f"   üèÜ Client Status: {client_status}")
        logger.info(f"   üí∞ Upsell Potential: {upsell_analysis['total_potential_value']:,} ‚ÇΩ/–º–µ—Å")
        
        return {
            "success": True,
            "client_name": client_name,
            "overall_score": overall_score,
            "client_status": client_status,
            "status_description": status_description,
            "health_analysis": {
                "health_score": health_analysis['health_score'],
                "health_status": health_analysis['health_status']
            },
            "churn_analysis": {
                "churn_score": churn_analysis['churn_score'],
                "risk_level": churn_analysis['risk_level']
            },
            "upsell_analysis": {
                "opportunities_count": upsell_analysis['opportunities_count'],
                "total_potential_value": upsell_analysis['total_potential_value'],
                "expansion_percentage": upsell_analysis['expansion_percentage']
            },
            "strategic_actions": strategic_actions,
            "priority_level": self._determine_priority_level(overall_score),
            "agent": self.name,
            "confidence": round(random.uniform(0.75, 0.90), 2)
        }

    def _calculate_health_score(self, metrics: Dict[str, Any]) -> int:
        """–†–∞—Å—á–µ—Ç health score –∫–ª–∏–µ–Ω—Ç–∞"""
        score = 0
        
        # Financial health (25%)
        if metrics['monthly_value'] >= 1000000:
            score += 25
        elif metrics['monthly_value'] >= 500000:
            score += 20
        else:
            score += 15
        
        # Engagement (20%)
        if metrics['engagement_score'] >= 80:
            score += 20
        elif metrics['engagement_score'] >= 60:
            score += 15
        else:
            score += 10
        
        # Payment behavior (15%)
        if metrics['payment_delays'] == 0:
            score += 15
        elif metrics['payment_delays'] <= 1:
            score += 10
        else:
            score += 5
        
        # Support load (15%)
        if metrics['support_tickets'] <= 2:
            score += 15
        elif metrics['support_tickets'] <= 5:
            score += 10
        else:
            score += 5
        
        # Feature adoption (10%)
        if metrics['feature_adoption'] >= 70:
            score += 10
        elif metrics['feature_adoption'] >= 50:
            score += 8
        else:
            score += 5
        
        # NPS satisfaction (10%)
        if metrics['nps_score'] >= 9:
            score += 10
        elif metrics['nps_score'] >= 7:
            score += 8
        else:
            score += 5
        
        # Activity recency (5%)
        if metrics['last_login_days'] <= 3:
            score += 5
        elif metrics['last_login_days'] <= 7:
            score += 3
        else:
            score += 1
        
        return min(100, score)

    def _calculate_churn_risk(self, metrics: Dict[str, Any]) -> int:
        """–†–∞—Å—á–µ—Ç churn risk score"""
        risk_score = 0
        
        # –ù–∏–∑–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ = higher risk
        if metrics['monthly_value'] < 500000:
            risk_score += 25
        elif metrics['monthly_value'] < 1000000:
            risk_score += 15
        
        # –ù–∏–∑–∫–∏–π engagement = higher risk
        if metrics['engagement_score'] < 40:
            risk_score += 30
        elif metrics['engagement_score'] < 60:
            risk_score += 20
        elif metrics['engagement_score'] < 80:
            risk_score += 10
        
        # Payment delays = higher risk
        risk_score += min(20, metrics['payment_delays'] * 7)
        
        # High support load = higher risk
        if metrics['support_tickets'] > 8:
            risk_score += 20
        elif metrics['support_tickets'] > 5:
            risk_score += 15
        elif metrics['support_tickets'] > 3:
            risk_score += 10
        
        # Low feature adoption = higher risk
        if metrics['feature_adoption'] < 30:
            risk_score += 15
        elif metrics['feature_adoption'] < 50:
            risk_score += 10
        
        # Low NPS = higher risk
        if metrics['nps_score'] <= 6:
            risk_score += 15
        elif metrics['nps_score'] <= 7:
            risk_score += 10
        
        # Inactivity = higher risk
        if metrics['last_login_days'] > 14:
            risk_score += 10
        elif metrics['last_login_days'] > 7:
            risk_score += 5
        
        return min(100, risk_score)

    def _get_health_recommendations(self, health_score: int, metrics: Dict[str, Any]) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ health score"""
        recommendations = []
        
        if health_score >= 80:
            recommendations.extend([
                "Maintain excellent relationship",
                "Identify upsell opportunities", 
                "Request case study/testimonial",
                "Explore referral potential"
            ])
        elif health_score >= 60:
            recommendations.extend([
                "Regular check-ins to maintain satisfaction",
                "Monitor engagement trends",
                "Proactive feature education"
            ])
        elif health_score >= 40:  
            recommendations.extend([
                "Schedule urgent stakeholder meeting",
                "Review and optimize current strategy",
                "Address immediate pain points"
            ])
        else:
            recommendations.extend([
                "Emergency client save protocol",
                "C-level escalation required", 
                "Comprehensive account review",
                "Consider retention offers"
            ])
        
        # Specific recommendations based on weak areas
        if metrics['engagement_score'] < 60:
            recommendations.append("Improve dashboard engagement through training")
        if metrics['payment_delays'] > 1:
            recommendations.append("Address payment process concerns")
        if metrics['support_tickets'] > 5:
            recommendations.append("Investigate recurring support issues")
        if metrics['nps_score'] < 7:
            recommendations.append("Conduct satisfaction survey and feedback session")
        
        return recommendations

    def _identify_warning_signals(self, metrics: Dict[str, Any]) -> List[str]:
        """–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        warnings = []
        
        if metrics['engagement_score'] < 50:
            warnings.append("Low dashboard engagement")
        if metrics['payment_delays'] > 2:
            warnings.append("Recurring payment delays")
        if metrics['support_tickets'] > 7:
            warnings.append("High support ticket volume")
        if metrics['last_login_days'] > 14:
            warnings.append("Extended period of inactivity")
        if metrics['nps_score'] <= 6:
            warnings.append("Low satisfaction score")
        
        return warnings

    def _create_retention_plan(self, risk_level: str, warnings: List[str]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ —É–¥–µ—Ä–∂–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
        if risk_level == "low":
            return {
                "timeline": "30 days",
                "actions": ["Monthly check-in", "Success story sharing", "Feature education"],
                "owner": "CSM",
                "budget": 0
            }
        elif risk_level == "medium":
            return {
                "timeline": "14 days", 
                "actions": ["Executive meeting", "Strategy review", "Quick wins identification"],
                "owner": "CSM + Account Director",
                "budget": 50000
            }
        elif risk_level == "high":
            return {
                "timeline": "7 days",
                "actions": ["Emergency audit", "Senior escalation", "Custom solutions"],
                "owner": "Account Director + VP",
                "budget": 150000
            }
        else:  # critical
            return {
                "timeline": "3 days",
                "actions": ["C-suite escalation", "Complete strategy overhaul", "Win-back campaign"],
                "owner": "VP + CEO",
                "budget": 300000
            }

    def _create_upsell_recommendations(self, opportunities: List[Dict]) -> List[str]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ upsell"""
        if not opportunities:
            return ["No immediate upsell opportunities identified"]
        
        recommendations = []
        
        # –¢–æ–ø-1 opportunity
        top_opp = opportunities[0]
        recommendations.append(f"Priority: {top_opp['package']} (+{top_opp['value']:,} ‚ÇΩ/–º–µ—Å)")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã—Å–æ–∫–∏–µ fit scores
        high_fit_opps = [o for o in opportunities if o['fit_score'] > 0.65]
        if len(high_fit_opps) > 1:
            recommendations.append(f"Bundle opportunity: {len(high_fit_opps)} services with high fit")
        
        # Timing recommendations
        if any(o['fit_score'] > 0.75 for o in opportunities):
            recommendations.append("Timing: Ready for immediate upsell presentation")
        else:
            recommendations.append("Timing: Nurture relationship before upsell approach")
        
        return recommendations

    def _get_onboarding_next_steps(self, phase: str, progress: float) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤ –¥–ª—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞"""
        if phase == "foundation":
            if progress < 50:
                return [
                    "Accelerate initial audit completion",
                    "Schedule stakeholder alignment meeting",
                    "Establish baseline metrics tracking"
                ]
            else:
                return [
                    "Finalize strategy approval",
                    "Prepare implementation roadmap",
                    "Set up communication cadence"
                ]
        elif phase == "implementation":
            if progress < 70:
                return [
                    "Focus on critical technical fixes",
                    "Accelerate content production",
                    "Enhance client team training"
                ]
            else:
                return [
                    "Monitor early performance indicators",
                    "Prepare optimization recommendations", 
                    "Plan success celebration activities"
                ]
        else:  # optimization
            return [
                "Conduct comprehensive performance review",
                "Identify strategy refinement opportunities",
                "Prepare for transition to regular operations",
                "Document lessons learned and best practices"
            ]

    def _get_strategic_recommendations(self, health_analysis: Dict, churn_analysis: Dict, upsell_analysis: Dict) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        recommendations = []
        
        # Health-based recommendations
        if health_analysis['health_score'] >= 80:
            recommendations.append("Champion client: Focus on case studies and referrals")
        elif health_analysis['health_score'] < 40:
            recommendations.append("Critical attention required: Immediate intervention plan")
        
        # Churn-based recommendations  
        if churn_analysis['churn_score'] > 60:
            recommendations.append("High churn risk: Execute retention protocol immediately")
        
        # Upsell-based recommendations
        if upsell_analysis['expansion_percentage'] > 30:
            recommendations.append("Significant upsell potential: Prepare expansion proposal")
        elif upsell_analysis['opportunities_count'] == 0:
            recommendations.append("Limited expansion: Focus on retention and satisfaction")
        
        return recommendations

    def _determine_priority_level(self, overall_score: float) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
        if overall_score >= 80:
            return "champion"
        elif overall_score >= 60:
            return "standard"
        elif overall_score >= 40:
            return "attention_required"
        else:
            return "critical"

    def get_agent_metrics(self) -> AgentMetrics:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞"""
        return AgentMetrics(
            agent_name=self.name,
            agent_type="management",
            version="1.0.0",
            status="active",
            total_tasks_processed=getattr(self, '_tasks_processed', 0),
            success_rate=getattr(self, '_success_rate', 0.0),
            average_response_time=getattr(self, '_avg_response_time', 0.0),
            specialized_metrics={
                "churn_risk_threshold": self.churn_risk_threshold,
                "upsell_probability_min": self.upsell_probability_min,
                "health_score_critical": self.health_score_critical,
                "nps_target": self.nps_target
            }
        )