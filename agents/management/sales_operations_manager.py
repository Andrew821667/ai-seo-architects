"""
Sales Operations Manager Agent –¥–ª—è AI SEO Architects
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ—Ä–æ–Ω–∫–æ–π –ø—Ä–æ–¥–∞–∂, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è sales team, pipeline velocity
"""

from typing import Dict, Any, List, Optional, Union
from datetime import datetime, timedelta
import logging
import asyncio
import json
from enum import Enum

from pydantic import BaseModel, Field, validator
from core.base_agent import BaseAgent

logger = logging.getLogger(__name__)


# =================================================================
# PYDANTIC MODELS –î–õ–Ø SALES OPERATIONS
# =================================================================

class LeadStage(str, Enum):
    """–°—Ç–∞–¥–∏–∏ –≤–æ—Ä–æ–Ω–∫–∏ –ø—Ä–æ–¥–∞–∂"""
    NEW = "new"
    CONTACTED = "contacted"
    QUALIFIED = "qualified"
    PROPOSAL_SENT = "proposal_sent"
    NEGOTIATION = "negotiation"
    CLOSED_WON = "closed_won"
    CLOSED_LOST = "closed_lost"
    NURTURING = "nurturing"


class PipelineMetrics(BaseModel):
    """–ú–µ—Ç—Ä–∏–∫–∏ –≤–æ—Ä–æ–Ω–∫–∏ –ø—Ä–æ–¥–∞–∂"""
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    total_leads: int = Field(..., ge=0, description="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤")
    qualified_leads: int = Field(..., ge=0, description="–ö–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã")
    proposals_sent: int = Field(..., ge=0, description="–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
    deals_won: int = Field(..., ge=0, description="–í—ã–∏–≥—Ä–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏")
    deals_lost: int = Field(..., ge=0, description="–ü—Ä–æ–∏–≥—Ä–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏")
    
    # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
    lead_to_qualified_rate: float = Field(..., ge=0.0, le=1.0, description="–ö–æ–Ω–≤–µ—Ä—Å–∏—è –ª–∏–¥ -> –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π")
    qualified_to_proposal_rate: float = Field(..., ge=0.0, le=1.0, description="–ö–æ–Ω–≤–µ—Ä—Å–∏—è –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π -> –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ")
    proposal_to_win_rate: float = Field(..., ge=0.0, le=1.0, description="–ö–æ–Ω–≤–µ—Ä—Å–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ -> —Å–¥–µ–ª–∫–∞")
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    avg_lead_response_time: float = Field(..., ge=0.0, description="–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ª–∏–¥ (—á–∞—Å—ã)")
    avg_qualification_time: float = Field(..., ge=0.0, description="–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ (—á–∞—Å—ã)")
    avg_proposal_time: float = Field(..., ge=0.0, description="–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (—á–∞—Å—ã)")
    avg_deal_cycle: float = Field(..., ge=0.0, description="–°—Ä–µ–¥–Ω–∏–π —Ü–∏–∫–ª —Å–¥–µ–ª–∫–∏ (–¥–Ω–∏)")
    
    # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    total_pipeline_value: int = Field(..., ge=0, description="–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å pipeline")
    average_deal_size: int = Field(..., ge=0, description="–°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Å–¥–µ–ª–∫–∏")
    monthly_recurring_revenue: int = Field(..., ge=0, description="–ú–µ—Å—è—á–Ω—ã–π —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã–π –¥–æ—Ö–æ–¥")
    
    # –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    pipeline_velocity: float = Field(..., ge=0.0, description="–°–∫–æ—Ä–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è –ø–æ –≤–æ—Ä–æ–Ω–∫–µ")
    lead_quality_score: float = Field(..., ge=0.0, le=100.0, description="–ö–∞—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤")
    sales_efficiency: float = Field(..., ge=0.0, le=1.0, description="–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂")
    
    timestamp: datetime = Field(default_factory=datetime.now)


class SalesTeamPerformance(BaseModel):
    """–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å sales –∫–æ–º–∞–Ω–¥—ã"""
    
    team_member_id: str = Field(..., description="ID —á–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥—ã")
    name: str = Field(..., description="–ò–º—è")
    role: str = Field(..., description="–†–æ–ª—å (SDR, AE, Manager)")
    
    # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    calls_made: int = Field(..., ge=0, description="–ó–≤–æ–Ω–∫–æ–≤ —Å–¥–µ–ª–∞–Ω–æ")
    emails_sent: int = Field(..., ge=0, description="Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    meetings_booked: int = Field(..., ge=0, description="–í—Å—Ç—Ä–µ—á –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    leads_contacted: int = Field(..., ge=0, description="–õ–∏–¥–æ–≤ contacted")
    leads_qualified: int = Field(..., ge=0, description="–õ–∏–¥–æ–≤ –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ")
    proposals_created: int = Field(..., ge=0, description="–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω–æ")
    deals_closed: int = Field(..., ge=0, description="–°–¥–µ–ª–æ–∫ –∑–∞–∫—Ä—ã—Ç–æ")
    
    # –ú–µ—Ç—Ä–∏–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    contact_rate: float = Field(..., ge=0.0, le=1.0, description="–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞")
    qualification_rate: float = Field(..., ge=0.0, le=1.0, description="–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    close_rate: float = Field(..., ge=0.0, le=1.0, description="–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç–∏—è")
    
    # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    revenue_generated: int = Field(..., ge=0, description="–î–æ—Ö–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
    quota_attainment: float = Field(..., ge=0.0, description="–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ (–≤ %)")
    
    period_start: datetime = Field(..., description="–ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞")
    period_end: datetime = Field(..., description="–ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞")


class SalesOperationsResult(BaseModel):
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ sales operations"""
    
    # –û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
    pipeline_health_score: float = Field(..., ge=0.0, le=100.0, description="–ó–¥–æ—Ä–æ–≤—å–µ pipeline")
    pipeline_metrics: PipelineMetrics = Field(..., description="–ú–µ—Ç—Ä–∏–∫–∏ –≤–æ—Ä–æ–Ω–∫–∏")
    
    # –ê–Ω–∞–ª–∏–∑ –∫–æ–º–∞–Ω–¥—ã
    team_performance: List[SalesTeamPerformance] = Field(default_factory=list, description="–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã")
    top_performers: List[str] = Field(default_factory=list, description="–õ—É—á—à–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏")
    improvement_areas: List[str] = Field(default_factory=list, description="–û–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è")
    
    # –ü—Ä–æ–≥–Ω–æ–∑—ã
    revenue_forecast: Dict[str, float] = Field(default_factory=dict, description="–ü—Ä–æ–≥–Ω–æ–∑ –¥–æ—Ö–æ–¥–∞")
    pipeline_forecast: Dict[str, int] = Field(default_factory=dict, description="–ü—Ä–æ–≥–Ω–æ–∑ pipeline")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    optimization_recommendations: List[str] = Field(default_factory=list, description="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
    action_items: List[str] = Field(default_factory=list, description="–î–µ–π—Å—Ç–≤–∏—è –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é")
    
    # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
    bottlenecks: List[str] = Field(default_factory=list, description="–£–∑–∫–∏–µ –º–µ—Å—Ç–∞")
    opportunities: List[str] = Field(default_factory=list, description="–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏")
    risks: List[str] = Field(default_factory=list, description="–†–∏—Å–∫–∏")
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    analysis_timestamp: datetime = Field(default_factory=datetime.now)
    confidence_level: float = Field(..., ge=0.0, le=1.0, description="–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –∞–Ω–∞–ª–∏–∑–µ")
    data_quality_score: float = Field(..., ge=0.0, le=100.0, description="–ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö")


# =================================================================
# –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° –ê–ì–ï–ù–¢–ê
# =================================================================

class SalesOperationsManagerAgent(BaseAgent):
    """–ê–≥–µ–Ω—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è sales –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏"""
    
    def __init__(self, data_provider=None, **kwargs):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Sales Operations Manager –∞–≥–µ–Ω—Ç–∞"""
        super().__init__(
            agent_id="sales_operations_manager",
            name="Sales Operations Manager",
            data_provider=data_provider,
            knowledge_base="knowledge/management/sales_operations_manager.md",
            **kwargs
        )
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫
        self.performance_thresholds = {
            "excellent_pipeline_health": 85,
            "good_pipeline_health": 70,
            "average_pipeline_health": 55,
            "poor_pipeline_health": 40
        }
        
        # Benchmark –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è SEO –∏–Ω–¥—É—Å—Ç—Ä–∏–∏
        self.industry_benchmarks = {
            "lead_to_qualified_rate": 0.25,      # 25% –ª–∏–¥–æ–≤ –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä—É—é—Ç—Å—è
            "qualified_to_proposal_rate": 0.60,   # 60% –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—É—á–∞—é—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
            "proposal_to_win_rate": 0.30,         # 30% –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤—ã–∏–≥—Ä—ã–≤–∞—é—Ç—Å—è
            "avg_deal_cycle_days": 45,             # 45 –¥–Ω–µ–π —Å—Ä–µ–¥–Ω–∏–π —Ü–∏–∫–ª —Å–¥–µ–ª–∫–∏
            "avg_deal_size_rub": 2500000,          # 2.5M ‚ÇΩ —Å—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Å–¥–µ–ª–∫–∏
            "pipeline_velocity": 0.75              # –•–æ—Ä–æ—à–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å pipeline
        }
        
        # –†–æ–ª–∏ –≤ sales –∫–æ–º–∞–Ω–¥–µ
        self.team_roles = {
            "SDR": {
                "focus": "lead_generation",
                "quotas": {"calls_per_day": 50, "emails_per_day": 100, "meetings_per_week": 10}
            },
            "AE": {
                "focus": "deal_closing", 
                "quotas": {"proposals_per_month": 15, "deals_per_quarter": 8}
            },
            "Manager": {
                "focus": "team_coordination",
                "quotas": {"team_performance": 0.80, "pipeline_health": 75}
            }
        }
        
        logger.info(f"üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω {self.name} –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è sales –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏")
    
    async def process_task(self, task_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ sales –æ–ø–µ—Ä–∞—Ü–∏–π
        
        Args:
            task_data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ sales –æ–ø–µ—Ä–∞—Ü–∏–π
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
        """
        try:
            analysis_type = task_data.get("analysis_type", "full_pipeline_analysis")
            input_data = task_data.get("input_data", {})
            
            logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ sales operations: {analysis_type}")
            
            if analysis_type == "pipeline_analysis":
                result = await self._analyze_pipeline_metrics(input_data)
            elif analysis_type == "team_performance":
                result = await self._analyze_team_performance(input_data)
            elif analysis_type == "forecast_analysis":
                result = await self._generate_sales_forecast(input_data)
            elif analysis_type == "optimization_recommendations":
                result = await self._generate_optimization_recommendations(input_data)
            else:
                # Full comprehensive analysis
                result = await self._comprehensive_sales_analysis(input_data)
            
            logger.info(f"‚úÖ Sales operations –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
            
            return {
                "success": True,
                "agent": self.agent_id,
                "timestamp": datetime.now().isoformat(),
                "analysis_type": analysis_type,
                "sales_operations_result": result,
                "pipeline_health_score": result.get("pipeline_health_score", 75),
                "key_insights": self._extract_key_insights(result),
                "priority_actions": result.get("action_items", [])[:3],  # Top 3 actions
                "confidence_score": result.get("confidence_level", 0.85)
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ sales operations –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
            return {
                "success": False,
                "agent": self.agent_id,
                "timestamp": datetime.now().isoformat(),
                "error": f"Sales operations analysis failed: {str(e)}",
                "pipeline_health_score": 0
            }
    
    async def _comprehensive_sales_analysis(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ sales –æ–ø–µ—Ä–∞—Ü–∏–π"""
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        pipeline_metrics = self._generate_pipeline_metrics(data)
        team_performance = self._generate_team_performance(data)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π health score
        pipeline_health_score = self._calculate_pipeline_health(pipeline_metrics)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã
        revenue_forecast = self._generate_revenue_forecast(pipeline_metrics)
        pipeline_forecast = self._generate_pipeline_forecast(pipeline_metrics)
        
        # –í—ã—è–≤–ª—è–µ–º —É–∑–∫–∏–µ –º–µ—Å—Ç–∞ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        bottlenecks = self._identify_bottlenecks(pipeline_metrics, team_performance)
        opportunities = self._identify_opportunities(pipeline_metrics, team_performance)
        risks = self._identify_risks(pipeline_metrics, team_performance)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = self._generate_optimization_recommendations_internal(
            pipeline_metrics, team_performance, bottlenecks
        )
        action_items = self._generate_action_items(bottlenecks, opportunities)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ–ø –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
        top_performers = self._identify_top_performers(team_performance)
        improvement_areas = self._identify_improvement_areas(team_performance, bottlenecks)
        
        result = SalesOperationsResult(
            pipeline_health_score=pipeline_health_score,
            pipeline_metrics=pipeline_metrics,
            team_performance=team_performance,
            top_performers=top_performers,
            improvement_areas=improvement_areas,
            revenue_forecast=revenue_forecast,
            pipeline_forecast=pipeline_forecast,
            optimization_recommendations=recommendations,
            action_items=action_items,
            bottlenecks=bottlenecks,
            opportunities=opportunities,
            risks=risks,
            confidence_level=0.87,
            data_quality_score=78.5
        )
        
        return result.dict()
    
    async def _analyze_pipeline_metrics(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –º–µ—Ç—Ä–∏–∫ –≤–æ—Ä–æ–Ω–∫–∏ –ø—Ä–æ–¥–∞–∂"""
        pipeline_metrics = self._generate_pipeline_metrics(data)
        health_score = self._calculate_pipeline_health(pipeline_metrics)
        
        return {
            "pipeline_health_score": health_score,
            "pipeline_metrics": pipeline_metrics.dict(),
            "benchmark_comparison": self._compare_with_benchmarks(pipeline_metrics),
            "confidence_level": 0.90
        }
    
    async def _analyze_team_performance(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã"""
        team_performance = self._generate_team_performance(data)
        top_performers = self._identify_top_performers(team_performance)
        
        return {
            "team_performance": [perf.dict() for perf in team_performance],
            "top_performers": top_performers,
            "team_health_score": self._calculate_team_health(team_performance),
            "confidence_level": 0.85
        }
    
    async def _generate_sales_forecast(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø—Ä–æ–¥–∞–∂"""
        pipeline_metrics = self._generate_pipeline_metrics(data)
        revenue_forecast = self._generate_revenue_forecast(pipeline_metrics)
        pipeline_forecast = self._generate_pipeline_forecast(pipeline_metrics)
        
        return {
            "revenue_forecast": revenue_forecast,
            "pipeline_forecast": pipeline_forecast,
            "forecast_accuracy": 0.82,
            "confidence_level": 0.78
        }
    
    async def _generate_optimization_recommendations(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        pipeline_metrics = self._generate_pipeline_metrics(data)
        team_performance = self._generate_team_performance(data)
        bottlenecks = self._identify_bottlenecks(pipeline_metrics, team_performance)
        
        recommendations = self._generate_optimization_recommendations_internal(
            pipeline_metrics, team_performance, bottlenecks
        )
        
        return {
            "optimization_recommendations": recommendations,
            "bottlenecks": bottlenecks,
            "priority_level": "high",
            "confidence_level": 0.88
        }
    
    # =================================================================
    # CORE CALCULATION METHODS
    # =================================================================
    
    def _generate_pipeline_metrics(self, data: Dict[str, Any]) -> PipelineMetrics:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫ pipeline (—Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ mock)"""
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
        if "pipeline_data" in data:
            pipeline_data = data["pipeline_data"]
            return PipelineMetrics(
                total_leads=pipeline_data.get("total_leads", 150),
                qualified_leads=pipeline_data.get("qualified_leads", 38),
                proposals_sent=pipeline_data.get("proposals_sent", 23),
                deals_won=pipeline_data.get("deals_won", 7),
                deals_lost=pipeline_data.get("deals_lost", 4),
                lead_to_qualified_rate=pipeline_data.get("lead_to_qualified_rate", 0.25),
                qualified_to_proposal_rate=pipeline_data.get("qualified_to_proposal_rate", 0.61),
                proposal_to_win_rate=pipeline_data.get("proposal_to_win_rate", 0.30),
                avg_lead_response_time=pipeline_data.get("avg_lead_response_time", 2.5),
                avg_qualification_time=pipeline_data.get("avg_qualification_time", 18.0),
                avg_proposal_time=pipeline_data.get("avg_proposal_time", 72.0),
                avg_deal_cycle=pipeline_data.get("avg_deal_cycle", 42.0),
                total_pipeline_value=pipeline_data.get("total_pipeline_value", 45000000),
                average_deal_size=pipeline_data.get("average_deal_size", 2800000),
                monthly_recurring_revenue=pipeline_data.get("monthly_recurring_revenue", 8500000),
                pipeline_velocity=pipeline_data.get("pipeline_velocity", 0.78),
                lead_quality_score=pipeline_data.get("lead_quality_score", 72.5),
                sales_efficiency=pipeline_data.get("sales_efficiency", 0.68)
            )
        
        # Mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        return PipelineMetrics(
            total_leads=150,
            qualified_leads=38,
            proposals_sent=23,
            deals_won=7,
            deals_lost=4,
            lead_to_qualified_rate=0.25,  # 25% conversion
            qualified_to_proposal_rate=0.61,  # 61% conversion
            proposal_to_win_rate=0.30,  # 30% win rate
            avg_lead_response_time=2.5,  # 2.5 hours
            avg_qualification_time=18.0,  # 18 hours
            avg_proposal_time=72.0,  # 3 days
            avg_deal_cycle=42.0,  # 42 days
            total_pipeline_value=45000000,  # 45M ‚ÇΩ
            average_deal_size=2800000,  # 2.8M ‚ÇΩ
            monthly_recurring_revenue=8500000,  # 8.5M ‚ÇΩ/month
            pipeline_velocity=0.78,  # Good velocity
            lead_quality_score=72.5,  # Good quality
            sales_efficiency=0.68  # Above average efficiency
        )
    
    def _generate_team_performance(self, data: Dict[str, Any]) -> List[SalesTeamPerformance]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã"""
        
        # Mock –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        team_data = [
            {
                "team_member_id": "sdr_001",
                "name": "–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞",
                "role": "SDR",
                "calls_made": 245,
                "emails_sent": 520,
                "meetings_booked": 18,
                "leads_contacted": 78,
                "leads_qualified": 19,
                "proposals_created": 0,
                "deals_closed": 0,
                "contact_rate": 0.32,
                "qualification_rate": 0.24,
                "close_rate": 0.0,
                "revenue_generated": 0,
                "quota_attainment": 1.12
            },
            {
                "team_member_id": "ae_001", 
                "name": "–î–º–∏—Ç—Ä–∏–π –°–º–∏—Ä–Ω–æ–≤",
                "role": "AE",
                "calls_made": 120,
                "emails_sent": 180,
                "meetings_booked": 25,
                "leads_contacted": 35,
                "leads_qualified": 28,
                "proposals_created": 12,
                "deals_closed": 4,
                "contact_rate": 0.80,
                "qualification_rate": 0.80,
                "close_rate": 0.33,
                "revenue_generated": 11200000,
                "quota_attainment": 0.93
            },
            {
                "team_member_id": "ae_002",
                "name": "–ï–ª–µ–Ω–∞ –ö—É–∑–Ω–µ—Ü–æ–≤–∞", 
                "role": "AE",
                "calls_made": 95,
                "emails_sent": 145,
                "meetings_booked": 22,
                "leads_contacted": 28,
                "leads_qualified": 24,
                "proposals_created": 11,
                "deals_closed": 3,
                "contact_rate": 0.86,
                "qualification_rate": 0.86,
                "close_rate": 0.27,
                "revenue_generated": 8400000,
                "quota_attainment": 0.78
            }
        ]
        
        period_start = datetime.now() - timedelta(days=30)
        period_end = datetime.now()
        
        return [
            SalesTeamPerformance(
                period_start=period_start,
                period_end=period_end,
                **member
            ) for member in team_data
        ]
    
    def _calculate_pipeline_health(self, metrics: PipelineMetrics) -> float:
        """–†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è pipeline"""
        
        # –í–µ—Å–∞ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
        weights = {
            "conversion_rates": 0.30,
            "velocity": 0.25,
            "volume": 0.20,
            "quality": 0.15,
            "efficiency": 0.10
        }
        
        # –û—Ü–µ–Ω–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–π (—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –±–µ–Ω—á–º–∞—Ä–∫–∞–º–∏)
        conversion_score = (
            min(metrics.lead_to_qualified_rate / self.industry_benchmarks["lead_to_qualified_rate"], 1.2) * 25 +
            min(metrics.qualified_to_proposal_rate / self.industry_benchmarks["qualified_to_proposal_rate"], 1.2) * 25 +
            min(metrics.proposal_to_win_rate / self.industry_benchmarks["proposal_to_win_rate"], 1.2) * 25 +
            (25 if metrics.avg_deal_cycle <= self.industry_benchmarks["avg_deal_cycle_days"] else 15)
        )
        
        # –û—Ü–µ–Ω–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ pipeline
        velocity_score = min(metrics.pipeline_velocity / self.industry_benchmarks["pipeline_velocity"], 1.0) * 100
        
        # –û—Ü–µ–Ω–∫–∞ –æ–±—ä–µ–º–∞
        volume_score = min(metrics.total_leads / 100, 1.0) * 100  # 100+ –ª–∏–¥–æ–≤ = –º–∞–∫—Å–∏–º—É–º
        
        # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        quality_score = metrics.lead_quality_score
        
        # –û—Ü–µ–Ω–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        efficiency_score = metrics.sales_efficiency * 100
        
        # –ò—Ç–æ–≥–æ–≤—ã–π weighted score
        health_score = (
            conversion_score * weights["conversion_rates"] +
            velocity_score * weights["velocity"] +
            volume_score * weights["volume"] +
            quality_score * weights["quality"] +
            efficiency_score * weights["efficiency"]
        )
        
        return round(min(health_score, 100), 1)
    
    def _calculate_team_health(self, team_performance: List[SalesTeamPerformance]) -> float:
        """–†–∞—Å—á–µ—Ç –∑–¥–æ—Ä–æ–≤—å—è –∫–æ–º–∞–Ω–¥—ã"""
        if not team_performance:
            return 0.0
        
        total_quota_attainment = sum(member.quota_attainment for member in team_performance)
        avg_quota_attainment = total_quota_attainment / len(team_performance)
        
        avg_close_rate = sum(member.close_rate for member in team_performance) / len(team_performance)
        
        # –ö–æ–º–∞–Ω–¥–∞ –∑–¥–æ—Ä–æ–≤–∞ –µ—Å–ª–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–ª–∞–Ω –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ö–æ—Ä–æ—à—É—é –∫–æ–Ω–≤–µ—Ä—Å–∏—é
        team_health = (avg_quota_attainment * 0.6 + avg_close_rate * 0.4) * 100
        
        return round(min(team_health, 100), 1)
    
    def _compare_with_benchmarks(self, metrics: PipelineMetrics) -> Dict[str, str]:
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å industry benchmarks"""
        
        comparisons = {}
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        if metrics.lead_to_qualified_rate >= self.industry_benchmarks["lead_to_qualified_rate"] * 1.1:
            comparisons["lead_qualification"] = "Above benchmark (+10%)"
        elif metrics.lead_to_qualified_rate >= self.industry_benchmarks["lead_to_qualified_rate"] * 0.9:
            comparisons["lead_qualification"] = "At benchmark"
        else:
            comparisons["lead_qualification"] = "Below benchmark (-10%+)"
        
        if metrics.proposal_to_win_rate >= self.industry_benchmarks["proposal_to_win_rate"] * 1.1:
            comparisons["win_rate"] = "Above benchmark (+10%)"
        elif metrics.proposal_to_win_rate >= self.industry_benchmarks["proposal_to_win_rate"] * 0.9:
            comparisons["win_rate"] = "At benchmark"
        else:
            comparisons["win_rate"] = "Below benchmark (-10%+)"
        
        if metrics.avg_deal_cycle <= self.industry_benchmarks["avg_deal_cycle_days"] * 0.9:
            comparisons["deal_cycle"] = "Faster than benchmark (+10%)"
        elif metrics.avg_deal_cycle <= self.industry_benchmarks["avg_deal_cycle_days"] * 1.1:
            comparisons["deal_cycle"] = "At benchmark"
        else:
            comparisons["deal_cycle"] = "Slower than benchmark (-10%+)"
        
        return comparisons
    
    # =================================================================
    # ANALYSIS METHODS
    # =================================================================
    
    def _identify_bottlenecks(self, metrics: PipelineMetrics, team: List[SalesTeamPerformance]) -> List[str]:
        """–í—ã—è–≤–ª–µ–Ω–∏–µ —É–∑–∫–∏—Ö –º–µ—Å—Ç –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–æ–¥–∞–∂"""
        
        bottlenecks = []
        
        # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–≤–µ—Ä—Å–∏–π
        if metrics.lead_to_qualified_rate < self.industry_benchmarks["lead_to_qualified_rate"] * 0.8:
            bottlenecks.append("–ù–∏–∑–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è –ª–∏–¥–æ–≤ –≤ –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ (< 20%)")
        
        if metrics.qualified_to_proposal_rate < self.industry_benchmarks["qualified_to_proposal_rate"] * 0.8:
            bottlenecks.append("–ù–∏–∑–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤ –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (< 48%)")
        
        if metrics.proposal_to_win_rate < self.industry_benchmarks["proposal_to_win_rate"] * 0.8:
            bottlenecks.append("–ù–∏–∑–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤ —Å–¥–µ–ª–∫–∏ (< 24%)")
        
        # –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏
        if metrics.avg_lead_response_time > 4.0:  # > 4 —á–∞—Å–æ–≤
            bottlenecks.append("–ú–µ–¥–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ª–∏–¥—ã (> 4 —á–∞—Å–æ–≤)")
        
        if metrics.avg_deal_cycle > self.industry_benchmarks["avg_deal_cycle_days"] * 1.2:
            bottlenecks.append("–î–ª–∏–Ω–Ω—ã–π —Ü–∏–∫–ª —Å–¥–µ–ª–∫–∏ (> 54 –¥–Ω–µ–π)")
        
        # –ê–Ω–∞–ª–∏–∑ –∫–æ–º–∞–Ω–¥—ã
        underperformers = [member for member in team if member.quota_attainment < 0.8]
        if len(underperformers) > len(team) * 0.3:  # > 30% –∫–æ–º–∞–Ω–¥—ã
            bottlenecks.append("–í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç underperformers –≤ –∫–æ–º–∞–Ω–¥–µ (> 30%)")
        
        return bottlenecks
    
    def _identify_opportunities(self, metrics: PipelineMetrics, team: List[SalesTeamPerformance]) -> List[str]:
        """–í—ã—è–≤–ª–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è"""
        
        opportunities = []
        
        # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º
        if metrics.lead_quality_score < 80:
            opportunities.append("–£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –ª–∏–¥–æ–≤ —á–µ—Ä–µ–∑ –ª—É—á—à—É—é –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é")
        
        if metrics.average_deal_size < self.industry_benchmarks["avg_deal_size_rub"] * 0.9:
            opportunities.append("–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Å–¥–µ–ª–∫–∏ —á–µ—Ä–µ–∑ upselling")
        
        if metrics.pipeline_velocity < 0.85:
            opportunities.append("–£—Å–∫–æ—Ä–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –ø–æ pipeline —á–µ—Ä–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é")
        
        # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ
        top_performers = [member for member in team if member.quota_attainment > 1.1]
        if top_performers:
            opportunities.append("–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ best practices –æ—Ç —Ç–æ–ø –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π")
        
        # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ –ø—Ä–æ—Ü–µ—Å—Å–∞–º
        if metrics.avg_proposal_time > 48:  # > 2 –¥–Ω–µ–π
            opportunities.append("–£—Å–∫–æ—Ä–µ–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ —à–∞–±–ª–æ–Ω—ã")
        
        return opportunities
    
    def _identify_risks(self, metrics: PipelineMetrics, team: List[SalesTeamPerformance]) -> List[str]:
        """–í—ã—è–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–æ–≤"""
        
        risks = []
        
        # –†–∏—Å–∫–∏ –ø–æ pipeline
        if metrics.total_pipeline_value < metrics.monthly_recurring_revenue * 3:
            risks.append("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π pipeline –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–æ—Å—Ç–∞ (< 3x MRR)")
        
        if metrics.deals_lost > metrics.deals_won:
            risks.append("–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–Ω–¥ –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö vs –ø—Ä–æ–∏–≥—Ä–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫")
        
        # –†–∏—Å–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ
        high_performers = [member for member in team if member.quota_attainment > 1.2]
        if len(high_performers) < 2:
            risks.append("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –º–∞–ª–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ high performers")
        
        # –†–∏—Å–∫–∏ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
        if metrics.lead_quality_score < 60:
            risks.append("–ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤ –º–æ–∂–µ—Ç —Å–Ω–∏–∑–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã")
        
        return risks
    
    def _identify_top_performers(self, team: List[SalesTeamPerformance]) -> List[str]:
        """–í—ã—è–≤–ª–µ–Ω–∏–µ –ª—É—á—à–∏—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π"""
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ quota attainment –∏ –±–µ—Ä–µ–º —Ç–æ–ø
        sorted_team = sorted(team, key=lambda x: x.quota_attainment, reverse=True)
        
        top_performers = []
        for member in sorted_team[:2]:  # –¢–æ–ø 2
            if member.quota_attainment > 1.0:
                top_performers.append(f"{member.name} ({member.role}) - {member.quota_attainment:.0%} quota")
        
        return top_performers
    
    def _identify_improvement_areas(self, team: List[SalesTeamPerformance], bottlenecks: List[str]) -> List[str]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–µ–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è"""
        
        improvement_areas = []
        
        # –ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã
        avg_contact_rate = sum(member.contact_rate for member in team) / len(team)
        if avg_contact_rate < 0.7:
            improvement_areas.append("–£–ª—É—á—à–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤ cold outreach")
        
        avg_close_rate = sum(member.close_rate for member in team) / len(team)  
        if avg_close_rate < 0.25:
            improvement_areas.append("–†–∞–∑–≤–∏—Ç–∏–µ –Ω–∞–≤—ã–∫–æ–≤ closing deals")
        
        # –ù–∞ –æ—Å–Ω–æ–≤–µ —É–∑–∫–∏—Ö –º–µ—Å—Ç
        if any("–∫–æ–Ω–≤–µ—Ä—Å–∏—è" in bottleneck.lower() for bottleneck in bottlenecks):
            improvement_areas.append("–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        
        if any("–≤—Ä–µ–º—è" in bottleneck.lower() for bottleneck in bottlenecks):
            improvement_areas.append("–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä—É—Ç–∏–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
        
        return improvement_areas
    
    # =================================================================
    # FORECASTING METHODS
    # =================================================================
    
    def _generate_revenue_forecast(self, metrics: PipelineMetrics) -> Dict[str, float]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–æ—Ö–æ–¥–∞"""
        
        # –ë–∞–∑–æ–≤—ã–µ —Ä–∞—Å—á–µ—Ç—ã
        current_mrr = metrics.monthly_recurring_revenue
        pipeline_value = metrics.total_pipeline_value
        win_rate = metrics.proposal_to_win_rate
        avg_cycle = metrics.avg_deal_cycle / 30  # –í –º–µ—Å—è—Ü–∞—Ö
        
        # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –º–µ—Å—è—Ü—ã
        forecast = {}
        
        # –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü (–¥–æ—Ö–æ–¥—ã –æ—Ç –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö—Å—è —Å–¥–µ–ª–æ–∫)
        forecast["current_month"] = current_mrr + (pipeline_value * win_rate * 0.3)  # 30% –∑–∞–∫—Ä–æ–µ—Ç—Å—è –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ
        
        # –°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
        forecast["next_month"] = current_mrr * 1.05 + (pipeline_value * win_rate * 0.4)  # 40% –∑–∞–∫—Ä–æ–µ—Ç—Å—è
        
        # 3 –º–µ—Å—è—Ü–∞
        forecast["3_months"] = current_mrr * 1.15 + (pipeline_value * win_rate * 0.7)  # 70% –∑–∞–∫—Ä–æ–µ—Ç—Å—è
        
        # 6 –º–µ—Å—è—Ü–µ–≤  
        forecast["6_months"] = current_mrr * 1.35 + (pipeline_value * win_rate * 0.9)  # 90% –∑–∞–∫—Ä–æ–µ—Ç—Å—è
        
        return forecast
    
    def _generate_pipeline_forecast(self, metrics: PipelineMetrics) -> Dict[str, int]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ pipeline"""
        
        monthly_lead_flow = metrics.total_leads  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –º–µ—Å—è—á–Ω—ã–π –ø–æ—Ç–æ–∫
        qualification_rate = metrics.lead_to_qualified_rate
        
        forecast = {}
        
        # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–æ–≤—ã—Ö –ª–∏–¥–æ–≤
        forecast["leads_next_month"] = int(monthly_lead_flow * 1.1)  # 10% —Ä–æ—Å—Ç
        forecast["qualified_leads_next_month"] = int(forecast["leads_next_month"] * qualification_rate)
        
        # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∫–≤–∞—Ä—Ç–∞–ª
        forecast["leads_next_quarter"] = int(monthly_lead_flow * 3.3)  # 10% —Ä–æ—Å—Ç –∑–∞ –∫–≤–∞—Ä—Ç–∞–ª
        forecast["qualified_leads_next_quarter"] = int(forecast["leads_next_quarter"] * qualification_rate)
        
        return forecast
    
    # =================================================================
    # RECOMMENDATIONS ENGINE
    # =================================================================
    
    def _generate_optimization_recommendations_internal(
        self, 
        metrics: PipelineMetrics, 
        team: List[SalesTeamPerformance], 
        bottlenecks: List[str]
    ) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        
        recommendations = []
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç—Ä–∏–∫
        if metrics.lead_to_qualified_rate < 0.2:
            recommendations.append("–í–Ω–µ–¥—Ä–∏—Ç—å BANT-—Å–∫–æ—Ä–∏–Ω–≥ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ª–∏–¥–æ–≤")
            recommendations.append("–ü—Ä–æ–≤–µ—Å—Ç–∏ —Ç—Ä–µ–Ω–∏–Ω–≥ –∫–æ–º–∞–Ω–¥—ã –ø–æ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ MEDDIC")
        
        if metrics.proposal_to_win_rate < 0.25:
            recommendations.append("–£–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—é")
            recommendations.append("–í–Ω–µ–¥—Ä–∏—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤ –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
        
        if metrics.avg_deal_cycle > 50:
            recommendations.append("–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å follow-up –ø—Ä–æ—Ü–µ—Å—Å—ã")
            recommendations.append("–í–Ω–µ–¥—Ä–∏—Ç—å CRM-–≤–æ—Ä–∫—Ñ–ª–æ—É –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–º–∞–Ω–¥—ã
        underperformers = [member for member in team if member.quota_attainment < 0.8]
        if underperformers:
            recommendations.append("–°–æ–∑–¥–∞—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø–ª–∞–Ω—ã —Ä–∞–∑–≤–∏—Ç–∏—è –¥–ª—è underperformers")
            recommendations.append("–í–Ω–µ–¥—Ä–∏—Ç—å buddy system —Å —Ç–æ–ø –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–∑–∫–∏—Ö –º–µ—Å—Ç
        if any("–≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞" in bottleneck.lower() for bottleneck in bottlenecks):
            recommendations.append("–í–Ω–µ–¥—Ä–∏—Ç—å lead routing automation")
            recommendations.append("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å real-time —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤—ã—Ö –ª–∏–¥–æ–≤")
        
        # –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if metrics.sales_efficiency < 0.7:
            recommendations.append("–í–Ω–µ–¥—Ä–∏—Ç—å sales intelligence –ø–ª–∞—Ç—Ñ–æ—Ä–º—É")
            recommendations.append("–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å reporting –∏ analytics")
        
        return recommendations
    
    def _generate_action_items(self, bottlenecks: List[str], opportunities: List[str]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
        
        actions = []
        
        # –î–µ–π—Å—Ç–≤–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–∑–∫–∏—Ö –º–µ—Å—Ç
        if bottlenecks:
            actions.append("–ü—Ä–æ–≤–µ—Å—Ç–∏ root cause analysis –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö bottlenecks")
            actions.append("–°–æ–∑–¥–∞—Ç—å action plan –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–ø-3 —É–∑–∫–∏—Ö –º–µ—Å—Ç")
        
        # –î–µ–π—Å—Ç–≤–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
        if opportunities:
            actions.append("–ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ ROI –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è")
            actions.append("–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∏–ª–æ—Ç–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –ø–æ —Ç–æ–ø –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏")
        
        # –û–±—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        actions.extend([
            "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π sales performance review",
            "–í–Ω–µ–¥—Ä–∏—Ç—å real-time dashboard –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è KPI",
            "–ü—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ win/loss –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤",
            "–°–æ–∑–¥–∞—Ç—å library –ª—É—á—à–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫ –æ—Ç —Ç–æ–ø –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π",
            "–ó–∞–ø—É—Å—Ç–∏—Ç—å A/B —Ç–µ—Å—Ç—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ email templates"
        ])
        
        return actions
    
    def _extract_key_insights(self, result: Dict[str, Any]) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –∏–Ω—Å–∞–π—Ç–æ–≤"""
        
        insights = []
        
        health_score = result.get("pipeline_health_score", 0)
        if health_score >= 80:
            insights.append(f"Excellent pipeline health ({health_score}%) - —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ")
        elif health_score >= 65:
            insights.append(f"Good pipeline health ({health_score}%) - –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
        else:
            insights.append(f"Pipeline —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è ({health_score}%) - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É–∑–∫–∏–µ –º–µ—Å—Ç–∞")
        
        # –ò–Ω—Å–∞–π—Ç—ã –ø–æ –∫–æ–º–∞–Ω–¥–µ
        if "team_performance" in result:
            team_data = result["team_performance"]
            if isinstance(team_data, list) and team_data:
                avg_quota = sum(member.get("quota_attainment", 0) for member in team_data) / len(team_data)
                if avg_quota > 1.0:
                    insights.append(f"–ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–ª–∞–Ω –Ω–∞ {(avg_quota-1)*100:.0f}%")
                else:
                    insights.append(f"–ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ–≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–ª–∞–Ω –Ω–∞ {(1-avg_quota)*100:.0f}%")
        
        # –ò–Ω—Å–∞–π—Ç—ã –ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º
        opportunities = result.get("opportunities", [])
        if opportunities:
            insights.append(f"–í—ã—è–≤–ª–µ–Ω–æ {len(opportunities)} –∫–ª—é—á–µ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è —Ä–æ—Å—Ç–∞")
        
        return insights