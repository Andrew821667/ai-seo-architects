"""
Business Development Director Agent - Executive —É—Ä–æ–≤–µ–Ω—å
–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ –±–∏–∑–Ω–µ—Å–∞, –∫—Ä—É–ø–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞
"""

import asyncio
from typing import Dict, Any, List, Optional
from datetime import datetime, timedelta
import json
import math

from core.base_agent import BaseAgent
from core.interfaces.data_models import LeadInput, LeadOutput

class BusinessDevelopmentDirectorAgent(BaseAgent):
    """
    Business Development Director Agent - Executive —É—Ä–æ–≤–µ–Ω—å

    –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å:
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Enterprise —Å–¥–µ–ª–∫–∞–º–∏ (2.5M ‚ÇΩ+ MRR)
    - –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞ –∏ –∞–ª—å—è–Ω—Å—ã
    - –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    - –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ—Å—Ç–∞
    - Executive-level –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è
    """

    def __init__(self, data_provider=None, **kwargs):
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è Executive —É—Ä–æ–≤–Ω—è, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞
        if 'model_name' not in kwargs:
            kwargs['model_name'] = "gpt-4o"
            
        super().__init__(
            agent_id="business_development_director",
            name="Business Development Director Agent",
            agent_level="executive",
            data_provider=data_provider,
            knowledge_base="knowledge/executive/business_development_director.md",
            **kwargs
        )

        # ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Æ STATS
        self.stats = {
            'total_tasks': 0,
            'success_count': 0,
            'error_count': 0,
            'total_processing_time': 0.0
        }

        # Executive-specific –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.min_enterprise_deal_size = 2500000  # 2.5M ‚ÇΩ/–º–µ—Å—è—Ü (Enterprise)  # 2.5M ‚ÇΩ+ MRR minimum
        self.strategic_partnership_threshold = 10000000  # 10M ‚ÇΩ (–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ)  # 10M ‚ÇΩ+ for strategic partnerships
        self.executive_approval_threshold = 5000000  # 5M ‚ÇΩ (–¢—Ä–µ–±—É–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞)  # 5M ‚ÇΩ+ requires executive approval

        # Industry expertise mapping
        self.industry_expertise = {
            'technology': {
                'weight': 0.9,
                'specialization': ['saas', 'fintech', 'healthtech', 'edtech'],
                'average_deal_size': 7500000,  # 7.5M ‚ÇΩ —Å—Ä–µ–¥–Ω—è—è —Å–¥–µ–ª–∫–∞
                'sales_cycle_months': 8
            },
            'ecommerce': {
                'weight': 0.85,
                'specialization': ['retail', 'marketplace', 'b2b_ecommerce'],
                'average_deal_size': 60000,
                'sales_cycle_months': 6
            },
            'professional_services': {
                'weight': 0.8,
                'specialization': ['consulting', 'legal', 'accounting', 'real_estate'],
                'average_deal_size': 45000,
                'sales_cycle_months': 9
            },
            'healthcare': {
                'weight': 0.75,
                'specialization': ['hospitals', 'pharma', 'medical_devices'],
                'average_deal_size': 85000,
                'sales_cycle_months': 12
            },
            'financial_services': {
                'weight': 0.8,
                'specialization': ['banking', 'insurance', 'investment'],
                'average_deal_size': 95000,
                'sales_cycle_months': 10
            }
        }

        # Success metrics tracking
        self.kpi_targets = {
            'arr_growth': 0.40,  # 40% annual growth target
            'average_deal_size': 7500000,  # 7.5M ‚ÇΩ —Å—Ä–µ–¥–Ω—è—è —Å–¥–µ–ª–∫–∞  # 7.5M ‚ÇΩ+ target
            'enterprise_win_rate': 0.35,  # 35% win rate for enterprise
            'partnership_revenue_mix': 0.20,  # 20% from partnerships
            'customer_ltv': 500000,  # ‚ÇΩ500K+ LTV target
            'sales_cycle_months': 8  # 8 month average cycle
        }

        print(f"üéØ {self.name} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:")
        print(f"üí∞ –ú–∏–Ω Enterprise —Å–¥–µ–ª–∫–∞: {self.min_enterprise_deal_size:,.0f} ‚ÇΩ/–º–µ—Å—è—Ü")
        print(f"  ü§ù –ü–æ—Ä–æ–≥ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞: {self.strategic_partnership_threshold:,.0f} ‚ÇΩ")
        print(f"  üè¢ Industry Expertise: {len(self.industry_expertise)} verticals")
        print(f"  üìä Target ARR Growth: {self.kpi_targets['arr_growth']*100}%")

    def get_system_prompt(self) -> str:
        """–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è Business Development Director"""
        return f"""–¢—ã - Executive Business Development Director –≤ SEO-–∞–≥–µ–Ω—Ç—Å—Ç–≤–µ –≤—ã—Å—à–µ–≥–æ —É—Ä–æ–≤–Ω—è, —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ enterprise-—Å–¥–µ–ª–∫–∞–º 2.5M+ ‚ÇΩ MRR.

–¢–í–û–Ø –≠–ö–°–ü–ï–†–¢–ò–ó–ê:
‚Ä¢ Enterprise Sales Excellence - 35%
  - Fortune 500/–∫—Ä—É–ø–Ω—ã–µ –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏ –†–æ—Å—Å–∏–∏
  - –°–¥–µ–ª–∫–∏ 2.5M-15M ‚ÇΩ MRR
  - –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è enterprise –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è
  - Executive-level –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –∏ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã

‚Ä¢ Strategic Partnerships & Alliances - 30%  
  - –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ –∞–ª—å—è–Ω—Å—ã 10M+ ‚ÇΩ
  - Technology partnerships
  - Referral programs
  - Channel partner development

‚Ä¢ Competitive Intelligence & Positioning - 20%
  - Market leadership analysis
  - Competitive differentiation
  - Strategic positioning
  - Industry expertise mapping

‚Ä¢ Revenue Strategy & Growth - 15%
  - ARR optimization strategies
  - LTV/CAC optimization  
  - Revenue forecasting
  - Market expansion planning

–¢–í–û–ò KPI TARGETS:
- ARR Growth: {self.kpi_targets['arr_growth']*100}% annually
- Average Deal Size: {self.kpi_targets['average_deal_size']:,.0f} ‚ÇΩ
- Enterprise Win Rate: {self.kpi_targets['enterprise_win_rate']*100}%
- Customer LTV: {self.kpi_targets['customer_ltv']:,.0f}+ ‚ÇΩ

–û–¢–†–ê–°–õ–ï–í–ê–Ø –≠–ö–°–ü–ï–†–¢–ò–ó–ê:
{chr(10).join([f"‚Ä¢ {industry.title()}: {data['weight']*100:.0f}% expertise, {data['sales_cycle_months']}–º cycle" 
               for industry, data in self.industry_expertise.items()])}

EXECUTIVE DECISION CRITERIA:
- Minimum Enterprise Deal: {self.min_enterprise_deal_size:,.0f} ‚ÇΩ/–º–µ—Å—è—Ü
- Strategic Partnership Threshold: {self.strategic_partnership_threshold:,.0f} ‚ÇΩ
- Executive Approval Required: {self.executive_approval_threshold:,.0f}+ ‚ÇΩ

–¢–í–û–ô –ü–û–î–•–û–î:
1. –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ enterprise –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
2. Competitive intelligence –∏ positioning
3. Partnership evaluation –∏ revenue modeling
4. Executive action plans —Å clear ROI
5. Long-term relationship building

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (JSON):
{{
  "enterprise_assessment": {{
    "enterprise_score": "0-100",
    "deal_tier": "tier_1_enterprise/tier_2_enterprise/tier_3_enterprise",
    "strategic_value": {{}},
    "competitive_position": {{}},
    "revenue_analysis": {{}},
    "partnership_potential": {{}}
  }},
  "strategic_recommendations": [],
  "executive_action_plan": {{}},
  "deal_size": "number",
  "strategic_impact": "transformational/high/medium/low",
  "confidence_score": "0.0-1.0"
}}

–ò—Å–ø–æ–ª—å–∑—É–π —Å–≤–æ—é executive —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—É –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ enterprise –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π!"""

    async def process_task(self, task_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á Executive —É—Ä–æ–≤–Ω—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º LLM
        """
        start_time = datetime.now()

        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            input_data = task_data.get('input_data', {})
            task_type = input_data.get('task_type', 'enterprise_assessment')

            print(f"üéØ Business Development Director –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á—É: {task_type}")

            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è LLM
            user_prompt = self._create_user_prompt(task_type, input_data)
            
            # –í—ã–∑—ã–≤–∞–µ–º LLM –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            llm_result = await self.process_with_llm(user_prompt, task_data)
            
            if llm_result["success"]:
                # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç –æ—Ç LLM
                try:
                    llm_content = llm_result["result"]
                    if isinstance(llm_content, str):
                        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
                        import re
                        json_match = re.search(r'\{.*\}', llm_content, re.DOTALL)
                        if json_match:
                            result = json.loads(json_match.group())
                        else:
                            # –ï—Å–ª–∏ JSON –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
                            result = self._create_fallback_result(llm_content, task_type)
                    else:
                        result = llm_content
                        
                    # –î–æ–ø–æ–ª–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ executive —É—Ä–æ–≤–Ω—è
                    result = self._enhance_executive_result(result, task_type, input_data)
                    
                except (json.JSONDecodeError, AttributeError) as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç LLM: {e}")
                    # Fallback –∫ –±–∞–∑–æ–≤–æ–π –ª–æ–≥–∏–∫–µ
                    result = await self._assess_enterprise_opportunity_fallback(task_data)
                    result["llm_parsing_error"] = str(e)
            else:
                # Fallback –∫ –±–∞–∑–æ–≤–æ–π –ª–æ–≥–∏–∫–µ –µ—Å–ª–∏ LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                print(f"‚ö†Ô∏è LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –ª–æ–≥–∏–∫—É")
                result = await self._assess_enterprise_opportunity_fallback(task_data)
                result["fallback_mode"] = True
                result["llm_error"] = llm_result.get("error", "unknown")

            # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            processing_time = (datetime.now() - start_time).total_seconds()

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–≥–µ–Ω—Ç–∞
            self.stats['total_tasks'] += 1
            self.stats['total_processing_time'] += processing_time
            self.stats['success_count'] += 1

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            executive_result = {
                'agent_id': self.agent_id,
                'agent_name': self.name,
                'task_type': task_type,
                'timestamp': datetime.now().isoformat(),
                'processing_time_seconds': round(processing_time, 2),
                'result': result,
                'executive_level': True,
                'strategic_impact': result.get('strategic_impact', 'medium'),
                'requires_ceo_approval': safe_numeric(result.get('deal_size', 0)) > self.executive_approval_threshold,
                'success': True,
                'model_used': llm_result.get('model_used') if llm_result["success"] else None,
                'tokens_used': llm_result.get('tokens_used') if llm_result["success"] else None
            }

            print(f"‚úÖ Executive –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {processing_time:.2f}—Å")
            return executive_result

        except Exception as e:
            processing_time = (datetime.now() - start_time).total_seconds()
            self.stats['total_tasks'] += 1
            self.stats['total_processing_time'] += processing_time
            self.stats['error_count'] += 1

            error_result = {
                'agent_id': self.agent_id,
                'agent_name': self.name,
                'task_type': task_data.get('input_data', {}).get('task_type', 'unknown'),
                'timestamp': datetime.now().isoformat(),
                'processing_time_seconds': round(processing_time, 2),
                'error': str(e),
                'executive_level': True,
                'success': False
            }

            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ Executive –∑–∞–¥–∞—á–µ: {str(e)}")
            return error_result

    def _create_user_prompt(self, task_type: str, input_data: Dict[str, Any]) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è BD Director"""
        if task_type == 'enterprise_assessment':
            return f"""–ü—Ä–æ–≤–µ–¥–∏ —ç–∫—Å–ø–µ—Ä—Ç–Ω—É—é –æ—Ü–µ–Ω–∫—É Enterprise –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:

–î–ê–ù–ù–´–ï –ö–û–ú–ü–ê–ù–ò–ò:
- –ù–∞–∑–≤–∞–Ω–∏–µ: {input_data.get('company_name', 'N/A')}
- –û—Ç—Ä–∞—Å–ª—å: {input_data.get('industry', 'N/A')}
- –ì–æ–¥–æ–≤–æ–π –¥–æ—Ö–æ–¥: {input_data.get('annual_revenue', 'N/A')} ‚ÇΩ
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {input_data.get('employee_count', 'N/A')}
- –¢–µ–∫—É—â–∏–µ SEO —Ä–∞—Å—Ö–æ–¥—ã: {input_data.get('current_seo_spend', 'N/A')} ‚ÇΩ
- –†–æ—Å—Ç –¥–æ—Ö–æ–¥–æ–≤: {input_data.get('revenue_growth_rate', 'N/A')}%
- –î–æ–ª—è —Ä—ã–Ω–∫–∞: {input_data.get('market_share_percent', 'N/A')}%
- –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫: {input_data.get('tech_stack', [])}
- –ë—Ä–µ–Ω–¥: {input_data.get('brand_recognition', 'N/A')}
- –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ case study: {input_data.get('case_study_willingness', False)}

–ó–ê–î–ê–ß–ê: 
–ü—Ä–æ–≤–µ–¥–∏ comprehensive enterprise assessment —Å focus –Ω–∞:
1. Enterprise score (0-100) —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º
2. Deal tier classification (tier_1/tier_2/tier_3_enterprise)
3. Strategic value analysis —Å —É—á–µ—Ç–æ–º brand value –∏ market influence
4. Revenue potential modeling –Ω–∞ 3 –≥–æ–¥–∞
5. Partnership opportunities assessment
6. Strategic recommendations –¥–ª—è executive approach
7. Confidence score –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π

–î–∞–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–µ—Ç–∞–ª—å–Ω—ã–π executive-level –∞–Ω–∞–ª–∏–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON!"""

        elif task_type == 'strategic_partnership':
            return f"""–û—Ü–µ–Ω–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ:

–î–ê–ù–ù–´–ï –ü–ê–†–¢–ù–ï–†–°–¢–í–ê:
{json.dumps(input_data, indent=2, ensure_ascii=False)}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π potential partnerships, revenue opportunities, strategic fit."""

        elif task_type == 'market_expansion':
            return f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ä—ã–Ω–∫–∞:

–î–ê–ù–ù–´–ï –ö–û–ú–ü–ê–ù–ò–ò:
{json.dumps(input_data, indent=2, ensure_ascii=False)}

–û–ø—Ä–µ–¥–µ–ª–∏ best expansion opportunities –≤ —Ä–æ—Å—Å–∏–π—Å–∫–æ–º —Ä—ã–Ω–∫–µ."""

        else:
            return f"""–ü—Ä–æ–≤–µ–¥–∏ executive analysis –¥–ª—è –∑–∞–¥–∞—á–∏ '{task_type}':

–í–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï:
{json.dumps(input_data, indent=2, ensure_ascii=False)}

–î–∞–π —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å executive recommendations."""

    def _create_fallback_result(self, llm_content: str, task_type: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ LLM"""
        return {
            "enterprise_assessment": {
                "enterprise_score": 75,
                "deal_tier": "tier_2_enterprise",
                "strategic_value": {"overall_strategic_value": 65},
                "competitive_position": {"competitive_strength": "strong_player"},
                "revenue_analysis": {"projected_annual_value": 5000000},
                "partnership_potential": {"partnership_score": 60}
            },
            "strategic_recommendations": [
                {"type": "executive_engagement", "priority": "high", "action": "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ BD Director"}
            ],
            "executive_action_plan": {
                "executive_involvement_level": "bd_director_oversight",
                "timeline": {"closing_timeline": "6-8 weeks"}
            },
            "deal_size": 5000000,
            "strategic_impact": "high",
            "confidence_score": 0.8,
            "llm_analysis": llm_content[:500] + "..." if len(llm_content) > 500 else llm_content,
            "analysis_method": "llm_with_fallback_parsing"
        }

    def _enhance_executive_result(self, result: Dict[str, Any], task_type: str, input_data: Dict[str, Any]) -> Dict[str, Any]:
        """–î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ executive –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏"""
        # –î–æ–±–∞–≤–ª—è–µ–º executive –∫–æ–Ω—Ç–µ–∫—Å—Ç
        if "enterprise_assessment" not in result:
            result["enterprise_assessment"] = {}
            
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–µ CEO
        deal_size = result.get("deal_size", 0)
        result["requires_ceo_approval"] = deal_size > self.executive_approval_threshold
        
        # –î–æ–±–∞–≤–ª—è–µ–º industry expertise context
        industry = input_data.get("industry", "").lower()
        if industry in self.industry_expertise:
            result["industry_expertise"] = {
                "weight": self.industry_expertise[industry]["weight"],
                "sales_cycle_months": self.industry_expertise[industry]["sales_cycle_months"],
                "specialization": self.industry_expertise[industry]["specialization"]
            }
        
        # Executive decision context
        result["executive_decision_context"] = {
            "min_enterprise_deal": self.min_enterprise_deal_size,
            "strategic_partnership_threshold": self.strategic_partnership_threshold,
            "kpi_targets": self.kpi_targets
        }
        
        return result

    async def _assess_enterprise_opportunity_fallback(self, task_data: Dict[str, Any]) -> Dict[str, Any]:
        """Fallback –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ enterprise –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ (–∫–æ–≥–¥–∞ LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)"""
        return await self._assess_enterprise_opportunity(task_data)

    async def _assess_enterprise_opportunity(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û—Ü–µ–Ω–∫–∞ Enterprise –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º executive expertise
        """
        # –£–º–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç input_data –∏ company_data)
        if 'input_data' in data:
            # –î–∞–Ω–Ω—ã–µ –ø—Ä–∏—à–ª–∏ —á–µ—Ä–µ–∑ process_task (input_data —Ñ–æ—Ä–º–∞—Ç)
            company_data = data.get('input_data', {})
        else:
            # –î–∞–Ω–Ω—ã–µ –ø—Ä–∏—à–ª–∏ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ (company_data —Ñ–æ—Ä–º–∞—Ç)
            company_data = data.get('company_data', {})
            
        lead_analysis = data.get('lead_analysis', {})
        proposal_data = data.get('proposal_data', {})
        
        print(f"üîç BD Director –ø–æ–ª—É—á–∏–ª –¥–∞–Ω–Ω—ã–µ:")
        print(f"   Company: {company_data.get('company_name', 'N/A')}")
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ revenue
        revenue_raw = company_data.get('annual_revenue', 0)
        try:
            revenue_num = float(revenue_raw) if revenue_raw else 0
        except (ValueError, TypeError):
            revenue_num = 0
        print(f"   Revenue: {revenue_num:,.0f} ‚ÇΩ")
        seo_spend = company_data.get('current_seo_spend', 0)
        seo_spend_num = int(seo_spend) if isinstance(seo_spend, (str, int, float)) and str(seo_spend).replace('.', '').isdigit() else 0
        print(f"   SEO Spend: {seo_spend_num:,.0f} ‚ÇΩ")
        print(f"   Source: {'input_data' if 'input_data' in data else 'company_data'}")

        # Enterprise –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è
        enterprise_score = self._calculate_enterprise_score(company_data, lead_analysis)
        deal_tier = self._classify_deal_tier(enterprise_score, company_data)
        strategic_value = self._assess_strategic_value(company_data)

        # Competitive positioning analysis
        competitive_position = self._analyze_competitive_position(company_data)

        # Revenue –∏ partnership potential
        revenue_analysis = self._analyze_revenue_potential(company_data, proposal_data)
        partnership_potential = self._evaluate_partnership_potential(company_data)

        # Strategic recommendations
        recommendations = self._generate_strategic_recommendations(
            enterprise_score, deal_tier, strategic_value, competitive_position
        )

        # Executive action plan
        action_plan = self._create_executive_action_plan(deal_tier, recommendations)

        return {
            'enterprise_assessment': {
                'enterprise_score': enterprise_score,
                'deal_tier': deal_tier,
                'strategic_value': strategic_value,
                'competitive_position': competitive_position,
                'revenue_analysis': revenue_analysis,
                'partnership_potential': partnership_potential
            },
            'strategic_recommendations': recommendations,
            'executive_action_plan': action_plan,
            'deal_size': revenue_analysis.get('projected_annual_value', 0),
            'strategic_impact': self._determine_strategic_impact(enterprise_score, strategic_value),
            'executive_approval_required': safe_numeric(revenue_analysis.get('projected_annual_value', 0)) > self.executive_approval_threshold,
            'confidence_score': self._calculate_confidence_score(enterprise_score, strategic_value)
        }

    # ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú –ù–ï–î–û–°–¢–ê–Æ–©–ò–ô –ú–ï–¢–û–î
    def _evaluate_partnership_potential(self, company_data: Dict) -> Dict[str, Any]:
        """
        –û—Ü–µ–Ω–∫–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞
        """
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        def safe_numeric(value, default=0):
            try:
                return float(value) if value else default
            except (ValueError, TypeError):
                return default
        
        tech_stack = company_data.get('tech_stack', [])
        existing_partnerships = company_data.get('existing_partnerships', [])
        annual_revenue = safe_numeric(company_data.get('annual_revenue', 0))
        industry = company_data.get('industry', '').lower()

        # –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞
        base_score = 0

        # –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫ (–≤–ª–∏—è–µ—Ç –Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏)
        if len(tech_stack) >= 5:
            base_score += 30
        elif len(tech_stack) >= 3:
            base_score += 20
        else:
            base_score += 10

        # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞ (–ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –∫—É–ª—å—Ç—É—Ä—ã)
        if len(existing_partnerships) >= 5:
            base_score += 25
        elif len(existing_partnerships) >= 2:
            base_score += 15
        else:
            base_score += 5

        # –†–∞–∑–º–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏ (–±–æ–ª—å—à–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π)
        if annual_revenue >= 100000000:  # ‚ÇΩ100M+
            base_score += 25
        elif annual_revenue >= 50000000:   # ‚ÇΩ50M+
            base_score += 15
        else:
            base_score += 5

        # –û—Ç—Ä–∞—Å–ª–µ–≤–æ–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
        industry_multiplier = self.industry_expertise.get(industry, {}).get('weight', 1.0)
        final_score = int(base_score * industry_multiplier)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤
        partnership_types = []
        if len(tech_stack) >= 3:
            partnership_types.append('technology_integration')
        if len(existing_partnerships) >= 3:
            partnership_types.append('referral_program')
        if annual_revenue >= 100000000:
            partnership_types.append('strategic_alliance')

        return {
            'partnership_score': min(final_score, 100),
            'partnership_types': partnership_types,
            'referral_potential': len(existing_partnerships) * 5000,  # ‚ÇΩ5K per partner
            'integration_opportunities': len(tech_stack),
            'strategic_fit': 'high' if final_score >= 70 else 'medium' if final_score >= 40 else 'low',
            'estimated_revenue_potential': final_score * 1000  # ‚ÇΩ1K per score point
        }

    def _calculate_enterprise_score(self, company_data: Dict, lead_analysis: Dict) -> int:
        """
        –†–∞—Å—á–µ—Ç Enterprise score —Å executive-level –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏  
        """
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        def safe_numeric(value, default=0):
            try:
                return float(value) if value else default
            except (ValueError, TypeError):
                return default
        
        score = 0

        # 1. Deal Size Assessment (30% –≤–µ—Å–∞)
        annual_revenue = safe_numeric(company_data.get('annual_revenue', 0))
        if annual_revenue >= 1000000000:  # ‚ÇΩ1B+ revenue
            score += 30
        elif annual_revenue >= 500000000:  # ‚ÇΩ500M+ revenue
            score += 25
        elif annual_revenue >= 100000000:  # ‚ÇΩ100M+ revenue
            score += 20
        elif annual_revenue >= 50000000:   # ‚ÇΩ50M+ revenue
            score += 15
        else:
            score += min(annual_revenue / 50000000 * 15, 15)

        # 2. Strategic Value (25% –≤–µ—Å–∞)
        industry = company_data.get('industry', '').lower()
        brand_recognition = company_data.get('brand_recognition', 'unknown')

        if industry in self.industry_expertise:
            industry_weight = self.industry_expertise[industry]['weight']
            score += 10 * industry_weight

        brand_score = {
            'fortune_500': 10, 'industry_leader': 8, 'well_known': 6,
            'regional_leader': 4, 'emerging': 2, 'unknown': 0
        }.get(brand_recognition, 0)
        score += brand_score

        # 3. Growth Potential (15% –≤–µ—Å–∞)
        growth_rate = safe_numeric(company_data.get('revenue_growth_rate', 0))
        if growth_rate >= 0.5:
            score += 15
        elif growth_rate >= 0.3:
            score += 12
        elif growth_rate >= 0.15:
            score += 8
        else:
            score += max(growth_rate * 15, 0)

        # 4. Partnership & Tech (15% –≤–µ—Å–∞)
        tech_stack = len(company_data.get('tech_stack', []))
        partnerships = len(company_data.get('existing_partnerships', []))
        score += min(tech_stack * 2 + partnerships * 1.5, 15)

        # 5. Market Position (15% –≤–µ—Å–∞)
        market_share = safe_numeric(company_data.get('market_share_percent', 0))
        score += min(market_share, 15)

        return min(int(score), 100)

    def _classify_deal_tier(self, enterprise_score: int, company_data: Dict) -> str:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Ä–æ–≤–Ω—è —Å–¥–µ–ª–∫–∏"""
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        def safe_numeric(value, default=0):
            try:
                return float(value) if value else default
            except (ValueError, TypeError):
                return default
        
        annual_revenue = safe_numeric(company_data.get('annual_revenue', 0))

        if enterprise_score >= 90 and annual_revenue >= 1000000000:
            return 'tier_1_enterprise'  # 10M ‚ÇΩ+ MRR potential
        elif enterprise_score >= 70 and annual_revenue >= 100000000:
            return 'tier_2_enterprise'  # ‚ÇΩ50-100K MRR
        elif enterprise_score >= 50 and annual_revenue >= 50000000:
            return 'tier_3_enterprise'  # ‚ÇΩ25-50K MRR
        elif enterprise_score >= 30:
            return 'future_potential'   # ‚ÇΩ10-25K MRR
        else:
            return 'not_qualified'

    def _assess_strategic_value(self, company_data: Dict) -> Dict[str, Any]:
        """–û—Ü–µ–Ω–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏"""
        brand_score = self._calculate_brand_value(company_data)
        market_influence = safe_numeric(company_data.get('market_share_percent', 0)) * 2
        reference_potential = 50 if company_data.get('case_study_willingness', False) else 20

        return {
            'brand_value_score': brand_score,
            'market_influence_score': min(market_influence, 100),
            'reference_potential_score': reference_potential,
            'overall_strategic_value': (brand_score + market_influence + reference_potential) / 3
        }

    def _calculate_brand_value(self, company_data: Dict) -> int:
        """–†–∞—Å—á–µ—Ç —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –±—Ä–µ–Ω–¥–∞"""
        score = 0
        brand_recognition = company_data.get('brand_recognition', 'unknown')
        
        score += {
            'fortune_500': 40, 'industry_leader': 30, 'well_known': 20,
            'regional_leader': 10, 'emerging': 5, 'unknown': 0
        }.get(brand_recognition, 0)

        # Media presence
        media_mentions = safe_numeric(company_data.get('annual_media_mentions', 0))
        score += min(media_mentions / 100 * 20, 20)

        # Social influence  
        social_followers = safe_numeric(company_data.get('social_media_followers', 0))
        score += min(social_followers / 100000 * 15, 15)

        # Awards
        awards = len(company_data.get('industry_awards', []))
        score += min(awards * 5, 25)

        return min(score, 100)

    def _analyze_competitive_position(self, company_data: Dict) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
        market_share = safe_numeric(company_data.get('market_share_percent', 0))
        
        if market_share >= 25:
            competitive_strength = 'market_leader'
        elif market_share >= 10:
            competitive_strength = 'strong_player'
        elif market_share >= 5:
            competitive_strength = 'established_player'
        else:
            competitive_strength = 'niche_player'

        return {
            'competitive_strength': competitive_strength,
            'market_share_percent': market_share,
            'competitor_count': len(company_data.get('main_competitors', [])),
            'technology_advantages': company_data.get('technology_advantages', []),
            'patent_portfolio': safe_numeric(company_data.get('patent_count', 0))
        }

    def _analyze_revenue_potential(self, company_data: Dict, proposal_data: Dict) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ –¥–æ—Ö–æ–¥–∞"""
        base_annual_value = proposal_data.get('total_annual_investment', 0)
        
        # Enterprise multipliers
        employee_count = safe_numeric(company_data.get('employee_count', 0))
        if employee_count >= 10000:
            multiplier = 2.5
        elif employee_count >= 1000:
            multiplier = 2.0
        elif employee_count >= 500:
            multiplier = 1.5
        else:
            multiplier = 1.2

        projected_year_1 = base_annual_value * multiplier
        growth_rate = safe_numeric(company_data.get('revenue_growth_rate', 0.2))
        projected_year_2 = projected_year_1 * (1 + growth_rate)
        projected_year_3 = projected_year_2 * (1 + growth_rate * 0.8)

        return {
            'base_annual_value': base_annual_value,
            'projected_year_1': projected_year_1,
            'projected_year_2': projected_year_2, 
            'projected_year_3': projected_year_3,
            'three_year_total': projected_year_1 + projected_year_2 + projected_year_3,
            'projected_annual_value': projected_year_1,
            'lifetime_value_estimate': (projected_year_1 + projected_year_2 + projected_year_3) * 1.5
        }

    def _generate_strategic_recommendations(self, enterprise_score: int, deal_tier: str,
                                          strategic_value: Dict, competitive_position: Dict) -> List[Dict[str, Any]]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        recommendations = []

        if deal_tier == 'tier_1_enterprise':
            recommendations.append({
                'type': 'executive_engagement',
                'priority': 'critical',
                'action': '–ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ Business Development Director',
                'timeline': '24 hours'
            })

        if strategic_value.get('overall_strategic_value', 0) >= 70:
            recommendations.append({
                'type': 'strategic_partnership',
                'priority': 'high', 
                'action': '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞',
                'timeline': '1 month'
            })

        if enterprise_score >= 70:
            recommendations.append({
                'type': 'competitive_differentiation',
                'priority': 'medium',
                'action': '–ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—å competitive advantages –≤ presentation', 
                'timeline': '1 week'
            })

        return recommendations

    def _create_executive_action_plan(self, deal_tier: str, recommendations: List[Dict]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ executive action plan"""
        involvement_levels = {
            'tier_1_enterprise': 'direct_bd_director',
            'tier_2_enterprise': 'bd_director_oversight', 
            'tier_3_enterprise': 'bd_director_consultation',
            'future_potential': 'sales_ops_with_bd_input',
            'not_qualified': 'standard_sales_process'
        }

        timeline_maps = {
            'tier_1_enterprise': '6-8 weeks total',
            'tier_2_enterprise': '5-7 weeks total',
            'tier_3_enterprise': '4-5 weeks total'
        }

        return {
            'executive_involvement_level': involvement_levels.get(deal_tier, 'standard_sales_process'),
            'timeline': {'closing_timeline': timeline_maps.get(deal_tier, '4-5 weeks total')},
            'success_criteria': {'minimum_deal_size': self.min_enterprise_deal_size}
        }

    def _determine_strategic_impact(self, enterprise_score: int, strategic_value: Dict) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–≥–æ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è"""
        overall_strategic_value = strategic_value.get('overall_strategic_value', 0)

        if enterprise_score >= 90 and overall_strategic_value >= 80:
            return 'transformational'
        elif enterprise_score >= 70 and overall_strategic_value >= 60:
            return 'high'
        elif enterprise_score >= 50 and overall_strategic_value >= 40:
            return 'medium'
        else:
            return 'low'

    def _calculate_confidence_score(self, enterprise_score: int, strategic_value: Dict) -> float:
        """–†–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ executive assessment"""
        base_confidence = min(enterprise_score / 100, 1.0)
        strategic_confidence = min(strategic_value.get('overall_strategic_value', 0) / 100, 1.0)
        experience_bonus = 0.1  # Executive –æ–ø—ã—Ç
        
        confidence = (base_confidence * 0.6 + strategic_confidence * 0.4) + experience_bonus
        return min(confidence, 1.0)

    # Partnership evaluation methods (–∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á)
    async def _evaluate_partnership_opportunity(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """–û—Ü–µ–Ω–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞"""
        return {
            'partnership_type': 'strategic_alliance',
            'opportunity_score': 75,
            'revenue_potential': 150000,
            'recommendation': 'proceed_with_pilot'
        }

    async def _conduct_competitive_analysis(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        return {
            'competitive_landscape': 'highly_competitive',
            'our_position': 'strong_challenger',
            'key_differentiators': ['ai_technology', 'enterprise_focus']
        }

    async def _analyze_market_expansion(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ê–Ω–∞–ª–∏–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ä—ã–Ω–∫–∞"""
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        if "company_data" in data:
            company_data = data["company_data"]
        elif "input_data" in data and "company_data" in data["input_data"]:
            company_data = data["input_data"]["company_data"]
        elif "input_data" in data:
            company_data = data["input_data"]
        else:
            company_data = data
        current_industry = company_data.get("industry", "unknown")
        annual_revenue = safe_numeric(company_data.get("annual_revenue", 0))
        
        # –†–æ—Å—Å–∏–π—Å–∫–∏–µ —Ä—ã–Ω–∫–∏ –¥–ª—è —ç–∫—Å–ø–∞–Ω—Å–∏–∏
        russian_markets = {
            "fintech": {
                "size_rub": 2500000000000,  # 2.5 —Ç—Ä–ª–Ω —Ä—É–±–ª–µ–π
                "growth_rate": 25,
                "competition": "–≤—ã—Å–æ–∫–∞—è",
                "entry_timeline": "18-24 –º–µ—Å—è—Ü–∞"
            },
            "ecommerce": {
                "size_rub": 4000000000000,  # 4 —Ç—Ä–ª–Ω —Ä—É–±–ª–µ–π
                "growth_rate": 20,
                "competition": "–æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è",
                "entry_timeline": "12-18 –º–µ—Å—è—Ü–µ–≤"
            },
            "manufacturing": {
                "size_rub": 15000000000000,  # 15 —Ç—Ä–ª–Ω —Ä—É–±–ª–µ–π
                "growth_rate": 8,
                "competition": "—Å—Ä–µ–¥–Ω—è—è",
                "entry_timeline": "24-36 –º–µ—Å—è—Ü–µ–≤"
            },
            "retail": {
                "size_rub": 6000000000000,  # 6 —Ç—Ä–ª–Ω —Ä—É–±–ª–µ–π
                "growth_rate": 12,
                "competition": "–≤—ã—Å–æ–∫–∞—è",
                "entry_timeline": "12-24 –º–µ—Å—è—Ü–∞"
            },
            "government": {
                "size_rub": 8000000000000,  # 8 —Ç—Ä–ª–Ω —Ä—É–±–ª–µ–π
                "growth_rate": 5,
                "competition": "–Ω–∏–∑–∫–∞—è",
                "entry_timeline": "36-48 –º–µ—Å—è—Ü–µ–≤"
            }
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ —Ä—ã–Ω–∫–∏
        expansion_opportunities = []
        for market, market_data in russian_markets.items():
            if market != current_industry:  # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â—É—é –æ—Ç—Ä–∞—Å–ª—å
                # –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –¥–æ–ª—è —Ä—ã–Ω–∫–∞ (–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è –æ—Ü–µ–Ω–∫–∞)
                potential_share = min(0.001, annual_revenue / market_data["size_rub"])
                potential_revenue = market_data["size_rub"] * potential_share
                
                opportunity_score = (
                    market_data["growth_rate"] * 0.4 +  # –†–æ—Å—Ç –≤–∞–∂–Ω–µ–µ –≤—Å–µ–≥–æ
                    (100 if market_data["competition"] == "–Ω–∏–∑–∫–∞—è" else
                     60 if market_data["competition"] == "—Å—Ä–µ–¥–Ω—è—è" else 30) * 0.3 +  # –ö–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è
                    (potential_revenue / 1000000000) * 0.3  # –†–∞–∑–º–µ—Ä –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
                )
                
                expansion_opportunities.append({
                    "market": market,
                    "market_size_rub": market_data["size_rub"],
                    "growth_rate_percent": market_data["growth_rate"],
                    "competition_level": market_data["competition"],
                    "entry_timeline": market_data["entry_timeline"],
                    "potential_revenue_3yr": potential_revenue * 3,
                    "opportunity_score": round(opportunity_score, 1),
                    "recommended": opportunity_score > 50
                })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        expansion_opportunities.sort(key=lambda x: x["opportunity_score"], reverse=True)
        
        return {
            "analysis_type": "market_expansion",
            "current_industry": current_industry,
            "total_addressable_market_rub": sum(m["size_rub"] for m in russian_markets.values()),
            "expansion_opportunities": expansion_opportunities,
            "top_recommendation": expansion_opportunities[0] if expansion_opportunities else None,
            "investment_estimate_rub": max(50000000, annual_revenue * 0.1),  # –ú–∏–Ω 50–ú –∏–ª–∏ 10% –¥–æ—Ö–æ–¥–∞
            "expected_roi_3yr": 2.8,
            "success_probability": 0.72,
            "key_risks": [
                "–†–µ–≥—É–ª—è—Ç–∏–≤–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è",
                "–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∞—è –±–æ—Ä—å–±–∞",
                "–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å"
            ],
            "next_steps": [
                "–î–µ—Ç–∞–ª—å–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞",
                "–ü–æ–∏—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤",
                "–ü–∏–ª–æ—Ç–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ—Ç—Ä–∞—Å–ª–∏"
            ]
        }

    async def _develop_executive_strategy(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        return {
            'strategic_priorities': ['market_leadership', 'technology_innovation'],
            'timeline': '24_months',
            'success_metrics': ['market_share_growth', 'revenue_per_employee']
        }
