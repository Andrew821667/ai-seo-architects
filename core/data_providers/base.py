"""
–ë–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—Å–µ—Ö Data Providers
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –µ–¥–∏–Ω—ã–π API –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
"""

from abc import ABC, abstractmethod
from typing import Dict, Any, List, Optional
from datetime import datetime, timedelta
import asyncio
import logging
import time
from core.interfaces.data_models import SEOData, ClientData, CompetitiveData  # –£–ë–†–ê–õ–ò DataSource

logger = logging.getLogger(__name__)


class DataProviderMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""

    def __init__(self):
        self.calls_total = 0
        self.calls_successful = 0
        self.calls_failed = 0
        self.avg_response_time = 0.0
        self.total_api_cost = 0.0
        self.cache_hits = 0
        self.cache_misses = 0
        self.last_error = None
        self.last_error_time = None

    def record_call(self, success: bool, response_time: float, api_cost: float = 0.0):
        """–ó–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –≤—ã–∑–æ–≤–∞"""
        self.calls_total += 1

        if success:
            self.calls_successful += 1
        else:
            self.calls_failed += 1

        # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
        alpha = 0.1
        self.avg_response_time = (
            alpha * response_time + (1 - alpha) * self.avg_response_time
        )

        self.total_api_cost += api_cost

    def record_error(self, error: str):
        """–ó–∞–ø–∏—Å–∞—Ç—å –æ—à–∏–±–∫—É"""
        self.last_error = error
        self.last_error_time = datetime.now()

    def record_cache_hit(self):
        """–ó–∞–ø–∏—Å–∞—Ç—å –ø–æ–ø–∞–¥–∞–Ω–∏–µ –≤ –∫—ç—à"""
        self.cache_hits += 1

    def record_cache_miss(self):
        """–ó–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–º–∞—Ö –∫—ç—à–∞"""
        self.cache_misses += 1

    @property
    def success_rate(self) -> float:
        """–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤"""
        if self.calls_total == 0:
            return 0.0
        return self.calls_successful / self.calls_total

    @property
    def cache_hit_rate(self) -> float:
        """–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫—ç—à"""
        total_requests = self.cache_hits + self.cache_misses
        if total_requests == 0:
            return 0.0
        return self.cache_hits / total_requests

    def to_dict(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫ –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            "calls_total": self.calls_total,
            "calls_successful": self.calls_successful,
            "calls_failed": self.calls_failed,
            "success_rate": self.success_rate,
            "avg_response_time": self.avg_response_time,
            "total_api_cost": self.total_api_cost,
            "cache_hits": self.cache_hits,
            "cache_misses": self.cache_misses,
            "cache_hit_rate": self.cache_hit_rate,
            "last_error": self.last_error,
            "last_error_time": self.last_error_time.isoformat() if self.last_error_time else None
        }


class BaseDataProvider(ABC):
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""

    def __init__(self, config: Dict[str, Any]):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞

        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        """
        self.config = config
        self.cache = {}
        self.metrics = DataProviderMetrics()
        self.cache_ttl = config.get("cache_ttl", 3600)  # 1 —á–∞—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.cache_enabled = config.get("cache_enabled", True)
        self.retry_attempts = config.get("retry_attempts", 3)
        self.retry_delay = config.get("retry_delay", 1.0)
        self.timeout = config.get("timeout", 30.0)

        logger.info(f"üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω {self.__class__.__name__}")

    @abstractmethod
    async def get_seo_data(self, domain: str, **kwargs) -> SEOData:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö SEO –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–º–µ–Ω–∞

        Args:
            domain: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π –¥–æ–º–µ–Ω
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

        Returns:
            SEOData: –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ SEO –¥–∞–Ω–Ω—ã–µ
        """
        pass

    @abstractmethod
    async def get_client_data(self, client_id: str, **kwargs) -> ClientData:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ CRM/–±–∞–∑—ã

        Args:
            client_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∫–ª–∏–µ–Ω—Ç–∞
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

        Returns:
            ClientData: –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
        """
        pass

    @abstractmethod
    async def get_competitive_data(self, domain: str, competitors: List[str], **kwargs) -> CompetitiveData:
        """
        –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –¥–æ–º–µ–Ω–∞

        Args:
            domain: –û—Å–Ω–æ–≤–Ω–æ–π –¥–æ–º–µ–Ω
            competitors: –°–ø–∏—Å–æ–∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

        Returns:
            CompetitiveData: –î–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        """
        pass

    async def health_check(self) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞

        Returns:
            Dict —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
        """
        try:
            # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
            start_time = time.time()

            # –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
            health_status = await self._perform_health_check()

            response_time = time.time() - start_time

            return {
                "status": health_status,
                "provider_type": self.__class__.__name__,
                "response_time": response_time,
                "metrics": self.metrics.to_dict(),
                "cache_size": len(self.cache),
                "config": {
                    "cache_enabled": self.cache_enabled,
                    "cache_ttl": self.cache_ttl,
                    "retry_attempts": self.retry_attempts,
                    "timeout": self.timeout
                },
                "last_check": datetime.now().isoformat()
            }
        except Exception as e:
            logger.error(f"‚ùå Health check failed: {str(e)}")
            return {
                "status": "unhealthy",
                "error": str(e),
                "provider_type": self.__class__.__name__,
                "last_check": datetime.now().isoformat()
            }

    async def _perform_health_check(self) -> str:
        """
        –í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è
        –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö

        Returns:
            str: "healthy" –∏–ª–∏ "unhealthy"
        """
        return "healthy"

    def _get_cache_key(self, method: str, *args, **kwargs) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –∫—ç—à–∞

        Args:
            method: –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞
            *args: –ü–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
            **kwargs: –ò–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã

        Returns:
            str: –ö–ª—é—á –∫—ç—à–∞
        """
        # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        key_parts = [method]
        key_parts.extend(str(arg) for arg in args)
        key_parts.extend(f"{k}={v}" for k, v in sorted(kwargs.items()))
        return ":".join(key_parts)

    def _is_cache_valid(self, cache_entry: Dict[str, Any]) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∑–∞–ø–∏—Å–∏ –≤ –∫—ç—à–µ

        Args:
            cache_entry: –ó–∞–ø–∏—Å—å –∫—ç—à–∞ —Å timestamp

        Returns:
            bool: True –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –≤–∞–ª–∏–¥–Ω–∞
        """
        if not self.cache_enabled:
            return False

        cache_time = cache_entry.get("timestamp")
        if not cache_time:
            return False

        age = datetime.now() - cache_time
        return age.total_seconds() < self.cache_ttl

    def _cache_get(self, cache_key: str) -> Optional[Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫—ç—à–∞

        Args:
            cache_key: –ö–ª—é—á –∫—ç—à–∞

        Returns:
            –î–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ –∏–ª–∏ None
        """
        if not self.cache_enabled:
            return None

        cache_entry = self.cache.get(cache_key)
        if cache_entry and self._is_cache_valid(cache_entry):
            self.metrics.record_cache_hit()
            logger.debug(f"üíæ Cache hit: {cache_key}")
            return cache_entry["data"]

        self.metrics.record_cache_miss()
        logger.debug(f"üí® Cache miss: {cache_key}")
        return None

    def _cache_set(self, cache_key: str, data: Any) -> None:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à

        Args:
            cache_key: –ö–ª—é—á –∫—ç—à–∞
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        """
        if not self.cache_enabled:
            return

        self.cache[cache_key] = {
            "data": data,
            "timestamp": datetime.now()
        }
        logger.debug(f"üíæ Cached: {cache_key}")

    def _cache_clear(self, pattern: Optional[str] = None) -> int:
        """
        –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞

        Args:
            pattern: –ü–∞—Ç—Ç–µ—Ä–Ω –∫–ª—é—á–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        """
        if pattern:
            keys_to_remove = [key for key in self.cache.keys() if pattern in key]
            for key in keys_to_remove:
                del self.cache[key]
            removed_count = len(keys_to_remove)
        else:
            removed_count = len(self.cache)
            self.cache.clear()

        logger.info(f"üóëÔ∏è Cleared {removed_count} cache entries")
        return removed_count

    async def _retry_on_failure(self, coro, *args, **kwargs):
        """
        Retry –ª–æ–≥–∏–∫–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ—Ä—É—Ç–∏–Ω

        Args:
            coro: –ö–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            *args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ—Ä—É—Ç–∏–Ω—ã
            **kwargs: –ò–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ—Ä—É—Ç–∏–Ω—ã

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ—Ä—É—Ç–∏–Ω—ã
        """
        last_error = None

        for attempt in range(self.retry_attempts):
            try:
                if attempt > 0:
                    delay = self.retry_delay * (2 ** (attempt - 1))  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    logger.info(f"üîÑ Retry attempt {attempt + 1}/{self.retry_attempts} after {delay}s")
                    await asyncio.sleep(delay)

                # –í—ã–ø–æ–ª–Ω—è–µ–º —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                return await asyncio.wait_for(
                    coro(*args, **kwargs),
                    timeout=self.timeout
                )

            except asyncio.TimeoutError as e:
                last_error = f"Timeout after {self.timeout}s"
                logger.warning(f"‚è∞ Timeout on attempt {attempt + 1}: {last_error}")
            except Exception as e:
                last_error = str(e)
                logger.warning(f"‚ùå Error on attempt {attempt + 1}: {last_error}")

        # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
        error_msg = f"Failed after {self.retry_attempts} attempts. Last error: {last_error}"
        self.metrics.record_error(error_msg)
        raise Exception(error_msg)

    def get_metrics(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞

        Returns:
            Dict —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
        """
        return self.metrics.to_dict()

    def reset_metrics(self) -> None:
        """–°–±—Ä–æ—Å –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        self.metrics = DataProviderMetrics()
        logger.info("üìä –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —Å–±—Ä–æ—à–µ–Ω—ã")
