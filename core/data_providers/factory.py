"""
Factory –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Data Providers
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç dependency injection –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
"""

from typing import Dict, Any, List, Optional, Type
import logging
from enum import Enum
from datetime import datetime

from core.data_providers.base import BaseDataProvider
from core.data_providers.static_provider import StaticDataProvider

logger = logging.getLogger(__name__)


class ProviderType(str, Enum):
    """–¢–∏–ø—ã –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
    STATIC = "static"
    MCP = "mcp"
    HYBRID = "hybrid"
    MOCK = "mock"


class DataProviderFactory:
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö"""
    
    # Singleton instances –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    _instances: Dict[str, BaseDataProvider] = {}
    
    # Mapping —Ç–∏–ø–æ–≤ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –∫ –∫–ª–∞—Å—Å–∞–º
    _provider_classes: Dict[ProviderType, Type[BaseDataProvider]] = {
        ProviderType.STATIC: StaticDataProvider,
        # ProviderType.MCP: MCPDataProvider,  # –ë—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–∑–∂–µ
        # ProviderType.HYBRID: HybridDataProvider,  # –ë—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–∑–∂–µ
        # ProviderType.MOCK: MockDataProvider,  # –ë—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–∑–∂–µ
    }
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
    _default_configs = {
        ProviderType.STATIC: {
            "seo_ai_models_path": "./seo_ai_models/",
            "mock_mode": True,
            "cache_enabled": True,
            "cache_ttl": 3600,
            "retry_attempts": 3,
            "retry_delay": 1.0,
            "timeout": 30.0
        },
        ProviderType.MCP: {
            "mcp_endpoints": [],
            "timeout": 30.0,
            "retry_attempts": 3,
            "fallback_to_static": True,
            "cache_enabled": True,
            "cache_ttl": 1800
        },
        ProviderType.HYBRID: {
            "primary_provider": "static",
            "fallback_provider": "static",
            "strategy": {
                "seo_data": "static",
                "client_data": "static",
                "competitive_data": "static"
            }
        },
        ProviderType.MOCK: {
            "response_delay": 0.5,
            "error_rate": 0.0,
            "cache_enabled": False
        }
    }
    
    @classmethod
    def create_provider(
        cls, 
        provider_type: str, 
        config: Optional[Dict[str, Any]] = None,
        singleton: bool = True
    ) -> BaseDataProvider:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–æ —Ç–∏–ø—É
        
        Args:
            provider_type: –¢–∏–ø –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ (static/mcp/hybrid/mock)
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            singleton: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å singleton pattern
            
        Returns:
            BaseDataProvider: –≠–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            
        Raises:
            ValueError: –ï—Å–ª–∏ —Ç–∏–ø –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω
            Exception: –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω–∞
        """
        try:
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–∏–ø –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            provider_type_enum = ProviderType(provider_type.lower())
        except ValueError:
            available_types = [pt.value for pt in ProviderType]
            raise ValueError(
                f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {provider_type}. "
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: {available_types}"
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º singleton
        instance_key = f"{provider_type_enum.value}_{id(config) if config else 'default'}"
        if singleton and instance_key in cls._instances:
            logger.info(f"‚ôªÔ∏è –í–æ–∑–≤—Ä–∞—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ {provider_type_enum.value}")
            return cls._instances[instance_key]
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞—Å—Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        provider_class = cls._provider_classes.get(provider_type_enum)
        if not provider_class:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—Å–ª–∏ –∫–ª–∞—Å—Å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
            provider_class = cls._try_import_provider(provider_type_enum)
        
        if not provider_class:
            raise ValueError(f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä {provider_type_enum.value} –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        final_config = cls._build_config(provider_type_enum, config)
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        cls._validate_config(provider_type_enum, final_config)
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
        try:
            provider_instance = provider_class(final_config)
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω {provider_type_enum.value} –ø—Ä–æ–≤–∞–π–¥–µ—Ä")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ singleton cache
            if singleton:
                cls._instances[instance_key] = provider_instance
            
            return provider_instance
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {provider_type_enum.value} –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {str(e)}")
            
            # Fallback –∫ static –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
            if provider_type_enum != ProviderType.STATIC:
                logger.info("üîÑ Fallback –∫ static –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É")
                return cls.create_provider(ProviderType.STATIC.value, singleton=singleton)
            
            raise e
    
    @classmethod
    def _try_import_provider(cls, provider_type: ProviderType) -> Optional[Type[BaseDataProvider]]:
        """
        –ü–æ–ø—ã—Ç–∫–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        
        Args:
            provider_type: –¢–∏–ø –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            
        Returns:
            –ö–ª–∞—Å—Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏–ª–∏ None
        """
        try:
            if provider_type == ProviderType.MCP:
                from core.data_providers.mcp_provider import MCPDataProvider
                cls._provider_classes[ProviderType.MCP] = MCPDataProvider
                return MCPDataProvider
                
            elif provider_type == ProviderType.HYBRID:
                from core.data_providers.hybrid_provider import HybridDataProvider
                cls._provider_classes[ProviderType.HYBRID] = HybridDataProvider
                return HybridDataProvider
                
            elif provider_type == ProviderType.MOCK:
                from core.data_providers.mock_provider import MockDataProvider
                cls._provider_classes[ProviderType.MOCK] = MockDataProvider
                return MockDataProvider
                
        except ImportError as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å {provider_type.value}: {str(e)}")
            
        return None
    
    @classmethod
    def _build_config(
        cls, 
        provider_type: ProviderType, 
        user_config: Optional[Dict[str, Any]]
    ) -> Dict[str, Any]:
        """
        –°–±–æ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        
        Args:
            provider_type: –¢–∏–ø –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            user_config: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            
        Returns:
            –§–∏–Ω–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        """
        # –ù–∞—á–∏–Ω–∞–µ–º —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_config = cls._default_configs.get(provider_type, {}).copy()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        default_config.update({
            "provider_type": provider_type.value,
            "created_at": datetime.now().isoformat()
        })
        logger.info("üìù –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —Å–æ–±—Ä–∞–Ω–∞")
        
        # –ú–µ—Ä–∂–∏–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        if user_config:
            default_config.update(user_config)
        
        return default_config
    
    @classmethod
    def _validate_config(cls, provider_type: ProviderType, config: Dict[str, Any]) -> None:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        
        Args:
            provider_type: –¢–∏–ø –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            
        Raises:
            ValueError: –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω–∞
        """
        if provider_type == ProviderType.STATIC:
            required_fields = ["seo_ai_models_path"]
            for field in required_fields:
                if field not in config:
                    raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ {field} –¥–ª—è static –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞")
        
        elif provider_type == ProviderType.MCP:
            required_fields = ["mcp_endpoints"]
            for field in required_fields:
                if field not in config:
                    raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ {field} –¥–ª—è MCP –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞")
        
        elif provider_type == ProviderType.HYBRID:
            required_fields = ["primary_provider", "fallback_provider", "strategy"]
            for field in required_fields:
                if field not in config:
                    raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ {field} –¥–ª—è hybrid –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞")
        
        # –û–±—â–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        if "timeout" in config and config["timeout"] <= 0:
            raise ValueError("Timeout –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        
        if "retry_attempts" in config and config["retry_attempts"] < 0:
            raise ValueError("Retry attempts –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
        
        logger.debug(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {provider_type.value} –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –≤–∞–ª–∏–¥–Ω–∞")
    
    @classmethod
    def get_available_providers(cls) -> List[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        """
        available = []
        
        for provider_type in ProviderType:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã
            if provider_type in cls._provider_classes:
                available.append(provider_type.value)
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–º–ø–æ—Ä—Ç–∞
                if cls._try_import_provider(provider_type):
                    available.append(provider_type.value)
        
        return available
    
    @classmethod
    def get_provider_info(cls, provider_type: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ
        
        Args:
            provider_type: –¢–∏–ø –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ
        """
        try:
            provider_type_enum = ProviderType(provider_type.lower())
        except ValueError:
            return {"error": f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {provider_type}"}
        
        info = {
            "type": provider_type_enum.value,
            "available": provider_type_enum in cls._provider_classes or cls._try_import_provider(provider_type_enum) is not None,
            "default_config": cls._default_configs.get(provider_type_enum, {}),
            "description": cls._get_provider_description(provider_type_enum)
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–∞—Ö
        active_instances = [
            key for key in cls._instances.keys() 
            if key.startswith(provider_type_enum.value)
        ]
        info["active_instances"] = len(active_instances)
        
        return info
    
    @classmethod
    def _get_provider_description(cls, provider_type: ProviderType) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        descriptions = {
            ProviderType.STATIC: "–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π SEO AI Models",
            ProviderType.MCP: "Live –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ Model Context Protocol",
            ProviderType.HYBRID: "–ö–æ–º–±–∏–Ω–∞—Ü–∏—è static –∏ MCP –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤",
            ProviderType.MOCK: "Mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
        }
        return descriptions.get(provider_type, "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
    
    @classmethod
    def health_check_all(cls) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        
        Returns:
            –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        """
        results = {}
        
        for instance_key, provider in cls._instances.items():
            try:
                # –ó–∞–ø—É—Å–∫–∞–µ–º health check –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                import asyncio
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                health_result = loop.run_until_complete(provider.health_check())
                results[instance_key] = health_result
                loop.close()
            except Exception as e:
                results[instance_key] = {
                    "status": "error",
                    "error": str(e),
                    "provider_type": instance_key.split("_")[0]
                }
        
        return {
            "total_providers": len(cls._instances),
            "providers": results,
            "overall_status": "healthy" if all(
                r.get("status") == "healthy" for r in results.values()
            ) else "unhealthy"
        }
    
    @classmethod
    def clear_instances(cls, provider_type: Optional[str] = None) -> int:
        """
        –û—á–∏—Å—Ç–∫–∞ singleton —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
        
        Args:
            provider_type: –¢–∏–ø –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
        """
        if provider_type:
            keys_to_remove = [
                key for key in cls._instances.keys() 
                if key.startswith(provider_type.lower())
            ]
        else:
            keys_to_remove = list(cls._instances.keys())
        
        for key in keys_to_remove:
            del cls._instances[key]
        
        logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {len(keys_to_remove)} —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤")
        return len(keys_to_remove)
    
    @classmethod
    def register_provider_class(
        cls, 
        provider_type: ProviderType, 
        provider_class: Type[BaseDataProvider]
    ) -> None:
        """
        –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        
        Args:
            provider_type: –¢–∏–ø –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            provider_class: –ö–ª–∞—Å—Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        """
        cls._provider_classes[provider_type] = provider_class
        logger.info(f"üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–ª–∞—Å—Å {provider_class.__name__} –¥–ª—è {provider_type.value}")


# Convenience functions –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
def create_static_provider(config: Optional[Dict[str, Any]] = None) -> BaseDataProvider:
    """–°–æ–∑–¥–∞–Ω–∏–µ static –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
    return DataProviderFactory.create_provider(ProviderType.STATIC.value, config)


def create_mcp_provider(config: Optional[Dict[str, Any]] = None) -> BaseDataProvider:
    """–°–æ–∑–¥–∞–Ω–∏–µ MCP –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
    return DataProviderFactory.create_provider(ProviderType.MCP.value, config)


def create_hybrid_provider(config: Optional[Dict[str, Any]] = None) -> BaseDataProvider:
    """–°–æ–∑–¥–∞–Ω–∏–µ hybrid –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
    return DataProviderFactory.create_provider(ProviderType.HYBRID.value, config)


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def get_provider_from_config(config: Dict[str, Any]) -> BaseDataProvider:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    
    Args:
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –ø–æ–ª–µ–º provider_type
        
    Returns:
        BaseDataProvider: –≠–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    """
    provider_type = config.get("provider_type", "static")
    return DataProviderFactory.create_provider(provider_type, config)
