"""
MCP Agent Manager –¥–ª—è AI SEO Architects
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞–º–∏ —Å MCP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
"""

import asyncio
from typing import Dict, Any, List, Optional, Type
from datetime import datetime
import importlib
import os

from core.base_agent import BaseAgent
from core.mcp.data_provider import MCPDataProvider
from config.mcp_config import get_config_for_environment

class MCPAgentManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞–º–∏ —Å MCP –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –∞–≥–µ–Ω—Ç–æ–≤
    """
    
    def __init__(self, mcp_config: Dict[str, Any] = None):
        self.mcp_config = mcp_config or get_config_for_environment()
        self.mcp_provider: Optional[MCPDataProvider] = None
        self.agents: Dict[str, BaseAgent] = {}
        self.agent_types: Dict[str, Type[BaseAgent]] = {}
        self.stats = {
            "total_agents": 0,
            "mcp_enabled_agents": 0,
            "fallback_agents": 0,
            "last_health_check": None
        }
        
    async def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MCP –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
        
        try:
            print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MCP Agent Manager...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º MCP –ø—Ä–æ–≤–∞–π–¥–µ—Ä
            if self.mcp_config.get("mcp_servers"):
                self.mcp_provider = MCPDataProvider(self.mcp_config)
                
                if await self.mcp_provider.initialize():
                    print("‚úÖ MCP –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                else:
                    print("‚ö†Ô∏è MCP –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                    self.mcp_provider = None
            else:
                print("‚ö†Ô∏è MCP —Å–µ—Ä–≤–µ—Ä—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ä–µ–∂–∏–º")
                
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∏–ø—ã –∞–≥–µ–Ω—Ç–æ–≤
            await self._discover_agent_types()
            
            print(f"‚úÖ MCP Agent Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ù–∞–π–¥–µ–Ω–æ {len(self.agent_types)} —Ç–∏–ø–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MCP Agent Manager: {e}")
            return False
    
    async def create_agent(self, agent_class_name: str, agent_id: str = None, 
                          enable_mcp: bool = True, **kwargs) -> Optional[BaseAgent]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ —Å MCP –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
        
        Args:
            agent_class_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –∞–≥–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "LeadQualificationAgent")
            agent_id: ID –∞–≥–µ–Ω—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∏–∑ –∫–ª–∞—Å—Å–∞)
            enable_mcp: –í–∫–ª—é—á–∏—Ç—å MCP –¥–ª—è –∞–≥–µ–Ω—Ç–∞
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∞–≥–µ–Ω—Ç–∞
            
        Returns:
            –°–æ–∑–¥–∞–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞—Å—Å –∞–≥–µ–Ω—Ç–∞
            agent_class = self.agent_types.get(agent_class_name)
            if not agent_class:
                print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∞–≥–µ–Ω—Ç–∞: {agent_class_name}")
                return None
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω
            if not agent_id:
                agent_id = self._generate_agent_id(agent_class_name)
                
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–∞–Ω–Ω—ã—Ö
            data_provider = None
            mcp_enabled = False
            
            if enable_mcp and self.mcp_provider:
                data_provider = self.mcp_provider
                mcp_enabled = True
                self.stats["mcp_enabled_agents"] += 1
                print(f"üîó –ê–≥–µ–Ω—Ç {agent_id} –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å MCP –ø—Ä–æ–≤–∞–π–¥–µ—Ä")
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π StaticDataProvider —Å SEO AI Models –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
                from core.data_providers.static_provider import StaticDataProvider
                static_config = {
                    "mock_mode": False,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ SEO AI Models
                    "seo_ai_models_path": "./seo_ai_models/",
                    "cache_ttl_minutes": 30
                }
                data_provider = StaticDataProvider(static_config)
                self.stats["fallback_agents"] += 1
                print(f"üìä –ê–≥–µ–Ω—Ç {agent_id} –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å StaticDataProvider —Å SEO AI Models")
            
            # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ —Å agent_level –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
            agent_level = self._determine_agent_level(agent_class_name)
            agent = agent_class(
                agent_id=agent_id,
                name=self._generate_agent_name(agent_class_name),
                agent_level=agent_level,
                data_provider=data_provider,
                mcp_enabled=mcp_enabled,
                **kwargs
            )
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–∞ –≤ –ø–∞–º—è—Ç–∏
            self.agents[agent_id] = agent
            self.stats["total_agents"] += 1
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≥–µ–Ω—Ç–∞ –≤ PostgreSQL –¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
            try:
                await self._persist_agent_to_db(agent, agent_class_name)
            except Exception as db_error:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–≥–µ–Ω—Ç–∞ –≤ –ë–î: {db_error}")
            
            print(f"‚úÖ –ê–≥–µ–Ω—Ç {agent_id} ({agent_class_name}) —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            return agent
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞ {agent_class_name}: {e}")
            return None
    
    async def create_all_agents(self, enable_mcp: bool = True) -> Dict[str, BaseAgent]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
        
        Args:
            enable_mcp: –í–∫–ª—é—á–∏—Ç—å MCP –¥–ª—è –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ {agent_id: agent_instance}
        """
        
        created_agents = {}
        
        print(f"üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ (MCP: {'–≤–∫–ª—é—á–µ–Ω' if enable_mcp else '–æ—Ç–∫–ª—é—á–µ–Ω'})...")
        
        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        agent_categories = {
            "executive": [
                "ChiefSEOStrategistAgent",
                "BusinessDevelopmentDirectorAgent"
            ],
            "management": [
                "TaskCoordinationAgent",
                "SalesOperationsManagerAgent", 
                "TechnicalSEOOperationsManagerAgent",
                "ClientSuccessManagerAgent"
            ],
            "operational": [
                "LeadQualificationAgent",
                "ProposalGenerationAgent",
                "SalesConversationAgent",
                "TechnicalSEOAuditorAgent",
                "ContentStrategyAgent",
                "LinkBuildingAgent",
                "CompetitiveAnalysisAgent",
                "ReportingAgent"
            ]
        }
        
        for category, agent_classes in agent_categories.items():
            print(f"\nüìÇ –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}':")
            
            for agent_class_name in agent_classes:
                agent = await self.create_agent(
                    agent_class_name=agent_class_name,
                    enable_mcp=enable_mcp
                )
                
                if agent:
                    created_agents[agent.agent_id] = agent
                    print(f"  ‚úÖ {agent.agent_id}")
                else:
                    print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å {agent_class_name}")
        
        print(f"\nüéâ –°–æ–∑–¥–∞–Ω–æ {len(created_agents)} –∏–∑ {sum(len(agents) for agents in agent_categories.values())} –∞–≥–µ–Ω—Ç–æ–≤")
        return created_agents
    
    async def health_check_all_agents(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
        
        health_results = {
            "overall_status": "healthy",
            "timestamp": datetime.now().isoformat(),
            "agents": {},
            "mcp_provider_status": None,
            "summary": {
                "total_agents": len(self.agents),
                "healthy_agents": 0,
                "unhealthy_agents": 0,
                "mcp_enabled": 0,
                "fallback_mode": 0
            }
        }
        
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º MCP –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        if self.mcp_provider:
            try:
                mcp_health = await self.mcp_provider.health_check()
                health_results["mcp_provider_status"] = mcp_health
            except Exception as e:
                health_results["mcp_provider_status"] = {
                    "status": "error",
                    "error": str(e)
                }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
        for agent_id, agent in self.agents.items():
            try:
                agent_health = agent.get_health_status()
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è MCP –ø—Ä–æ–≤–µ—Ä–∫–∞
                if hasattr(agent, 'get_mcp_health_status'):
                    mcp_health = await agent.get_mcp_health_status()
                    agent_health["mcp_status"] = mcp_health
                
                health_results["agents"][agent_id] = agent_health
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                if agent_health.get("status") == "healthy":
                    health_results["summary"]["healthy_agents"] += 1
                else:
                    health_results["summary"]["unhealthy_agents"] += 1
                    health_results["overall_status"] = "degraded"
                
                if agent_health.get("mcp_enabled", False):
                    health_results["summary"]["mcp_enabled"] += 1
                else:
                    health_results["summary"]["fallback_mode"] += 1
                    
            except Exception as e:
                health_results["agents"][agent_id] = {
                    "status": "error",
                    "error": str(e)
                }
                health_results["summary"]["unhealthy_agents"] += 1
                health_results["overall_status"] = "degraded"
        
        self.stats["last_health_check"] = datetime.now()
        
        print(f"üìä Health check –∑–∞–≤–µ—Ä—à–µ–Ω: {health_results['summary']['healthy_agents']}/{len(self.agents)} –∞–≥–µ–Ω—Ç–æ–≤ –∑–¥–æ—Ä–æ–≤—ã")
        return health_results
    
    async def run_comprehensive_test(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ —Å MCP"""
        
        print("üß™ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∞–≥–µ–Ω—Ç–æ–≤ —Å MCP...")
        
        test_results = {
            "test_type": "comprehensive_mcp_test",
            "timestamp": datetime.now().isoformat(),
            "results": {},
            "summary": {
                "total_tests": 0,
                "successful_tests": 0,
                "failed_tests": 0,
                "mcp_tests": 0,
                "fallback_tests": 0
            }
        }
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_data = {
            "company_data": {
                "company_name": "Test Company MCP",
                "annual_revenue": "50000000",
                "employee_count": "250",
                "industry": "technology",
                "current_seo_spend": "500000",
                "website_domain": "test-company-mcp.com"
            },
            "task_type": "comprehensive_analysis"
        }
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
        for agent_id, agent in self.agents.items():
            try:
                print(f"üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ {agent_id}...")
                
                start_time = datetime.now()
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                task_input = {
                    "task_type": "comprehensive_analysis",
                    "company_data": test_data["company_data"]
                }
                result = await agent.process_task(task_input)
                
                processing_time = (datetime.now() - start_time).total_seconds()
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                test_success = result.get("success", False)
                mcp_used = agent.mcp_enabled and hasattr(agent.data_provider, 'get_stats')
                
                test_results["results"][agent_id] = {
                    "status": "success" if test_success else "failed",
                    "processing_time": processing_time,
                    "mcp_enabled": agent.mcp_enabled,
                    "mcp_used": mcp_used,
                    "result_summary": {
                        "has_data": bool(result.get("result")),
                        "error": result.get("error"),
                        "agent_type": agent._get_agent_type() if hasattr(agent, '_get_agent_type') else "unknown"
                    }
                }
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                test_results["summary"]["total_tests"] += 1
                if test_success:
                    test_results["summary"]["successful_tests"] += 1
                else:
                    test_results["summary"]["failed_tests"] += 1
                
                if mcp_used:
                    test_results["summary"]["mcp_tests"] += 1
                else:
                    test_results["summary"]["fallback_tests"] += 1
                    
                print(f"  {'‚úÖ' if test_success else '‚ùå'} {agent_id} - {processing_time:.3f}s")
                
            except Exception as e:
                test_results["results"][agent_id] = {
                    "status": "error",
                    "error": str(e),
                    "mcp_enabled": agent.mcp_enabled
                }
                test_results["summary"]["total_tests"] += 1
                test_results["summary"]["failed_tests"] += 1
                print(f"  ‚ùå {agent_id} - –æ—à–∏–±–∫–∞: {e}")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        success_rate = (
            test_results["summary"]["successful_tests"] / 
            max(1, test_results["summary"]["total_tests"]) * 100
        )
        
        print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {test_results['summary']['total_tests']}")
        print(f"   –£—Å–ø–µ—à–Ω–æ: {test_results['summary']['successful_tests']}")
        print(f"   –ù–µ—É–¥–∞—á–Ω–æ: {test_results['summary']['failed_tests']}")
        print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        print(f"   MCP —Ç–µ—Å—Ç—ã: {test_results['summary']['mcp_tests']}")
        print(f"   Fallback —Ç–µ—Å—Ç—ã: {test_results['summary']['fallback_tests']}")
        
        test_results["summary"]["success_rate"] = success_rate
        
        return test_results
    
    async def shutdown(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        
        print("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã MCP Agent Manager...")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º MCP –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        if self.mcp_provider:
            try:
                await self.mcp_provider.close()
                print("‚úÖ MCP –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∑–∞–∫—Ä—ã—Ç")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è MCP –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {e}")
        
        # –û—á–∏—â–∞–µ–º –∞–≥–µ–Ω—Ç—ã
        self.agents.clear()
        self.stats = {
            "total_agents": 0,
            "mcp_enabled_agents": 0,
            "fallback_agents": 0,
            "last_health_check": None
        }
        
        print("‚úÖ MCP Agent Manager –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        
        stats = self.stats.copy()
        stats["mcp_provider_available"] = self.mcp_provider is not None
        stats["registered_agent_types"] = len(self.agent_types)
        stats["active_agents"] = len(self.agents)
        
        if self.mcp_provider:
            try:
                stats["mcp_provider_stats"] = self.mcp_provider.get_stats()
            except:
                stats["mcp_provider_stats"] = "unavailable"
        
        return stats
    
    async def _discover_agent_types(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤"""
        
        print("üîç –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤...")
        
        # –ü—É—Ç–∏ –∫ –∞–≥–µ–Ω—Ç–∞–º
        agent_paths = [
            "agents.executive",
            "agents.management", 
            "agents.operational"
        ]
        
        for path in agent_paths:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                module_dir = path.replace(".", "/")
                if os.path.exists(module_dir):
                    for filename in os.listdir(module_dir):
                        if filename.endswith(".py") and filename != "__init__.py":
                            module_name = filename[:-3]  # —É–±–∏—Ä–∞–µ–º .py
                            full_module_path = f"{path}.{module_name}"
                            
                            try:
                                module = importlib.import_module(full_module_path)
                                
                                # –ò—â–µ–º –∫–ª–∞—Å—Å—ã –∞–≥–µ–Ω—Ç–æ–≤
                                for attr_name in dir(module):
                                    attr = getattr(module, attr_name)
                                    
                                    if (isinstance(attr, type) and 
                                        issubclass(attr, BaseAgent) and 
                                        attr != BaseAgent and
                                        attr_name.endswith("Agent")):
                                        
                                        self.agent_types[attr_name] = attr
                                        print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω –∞–≥–µ–Ω—Ç: {attr_name}")
                                        
                            except Exception as e:
                                print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è {full_module_path}: {e}")
                                
            except Exception as e:
                print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Ç–∏ {path}: {e}")
        
        print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ {len(self.agent_types)} —Ç–∏–ø–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤")
    
    def _generate_agent_id(self, class_name: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –∞–≥–µ–Ω—Ç–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–∞"""
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º CamelCase –≤ snake_case
        import re
        s1 = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', class_name)
        snake_case = re.sub('([a-z0-9])([A-Z])', r'\1_\2', s1).lower()
        
        # –£–±–∏—Ä–∞–µ–º —Å—É—Ñ—Ñ–∏–∫—Å _agent
        if snake_case.endswith("_agent"):
            snake_case = snake_case[:-6]
            
        return snake_case
    
    def _generate_agent_name(self, class_name: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–Ω—è—Ç–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –∞–≥–µ–Ω—Ç–∞"""
        
        # –£–±–∏—Ä–∞–µ–º —Å—É—Ñ—Ñ–∏–∫—Å Agent
        if class_name.endswith("Agent"):
            name = class_name[:-5]
        else:
            name = class_name
        
        # –†–∞–∑–±–∏–≤–∞–µ–º CamelCase –Ω–∞ —Å–ª–æ–≤–∞
        import re
        words = re.findall(r'[A-Z][a-z]+', name)
        
        return " ".join(words) + " Agent"
    
    async def _persist_agent_to_db(self, agent: BaseAgent, agent_class_name: str):
        """
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–≥–µ–Ω—Ç–∞ –≤ PostgreSQL –¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        """
        try:
            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            from api.database.connection import get_db_connection
            from api.database.models import Agent as AgentModel
            from sqlalchemy import select
            from sqlalchemy.dialects.postgresql import insert
            import uuid
            
            async with get_db_connection() as db:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
                result = await db.execute(
                    select(AgentModel).where(AgentModel.agent_id == agent.agent_id)
                )
                existing_agent = result.scalar_one_or_none()
                
                if existing_agent:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞
                    existing_agent.is_active = True
                    existing_agent.updated_at = datetime.now()
                    print(f"üîÑ –ê–≥–µ–Ω—Ç {agent.agent_id} –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î")
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
                    agent_level = self._determine_agent_level(agent_class_name)
                    
                    new_agent = AgentModel(
                        id=uuid.uuid4(),
                        name=agent.name,
                        agent_id=agent.agent_id,
                        agent_level=agent_level,
                        description=f"Auto-created {agent_class_name}",
                        is_active=True,
                        config={
                            "mcp_enabled": getattr(agent, 'mcp_enabled', False),
                            "class_name": agent_class_name,
                            "created_by_manager": True
                        },
                        created_at=datetime.now(),
                        updated_at=datetime.now()
                    )
                    
                    db.add(new_agent)
                    print(f"üíæ –ê–≥–µ–Ω—Ç {agent.agent_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î")
                
                await db.commit()
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞ –≤ –ë–î: {e}")
            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å –ë–î
    
    def _determine_agent_level(self, agent_class_name: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –∞–≥–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ –∫–ª–∞—Å—Å–∞"""
        
        if any(keyword in agent_class_name for keyword in ["Chief", "Director", "Business"]):
            return "executive"
        elif any(keyword in agent_class_name for keyword in ["Manager", "Coordination", "Operations"]):
            return "management"
        else:
            return "operational"
    
    async def load_agents_from_db(self) -> Dict[str, Dict]:
        """
        –ó–∞–≥—Ä—É–∑–∏—Ç—å –∞–≥–µ–Ω—Ç–æ–≤ –∏–∑ PostgreSQL –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        """
        try:
            from api.database.connection import get_db_connection
            from api.database.models import Agent as AgentModel
            from sqlalchemy import select
            
            async with get_db_connection() as db:
                result = await db.execute(
                    select(AgentModel).where(AgentModel.is_active == True)
                )
                db_agents = result.scalars().all()
                
                agent_configs = {}
                for db_agent in db_agents:
                    agent_configs[db_agent.agent_id] = {
                        "name": db_agent.name,
                        "level": db_agent.agent_level,
                        "config": db_agent.config or {},
                        "class_name": db_agent.config.get("class_name") if db_agent.config else None
                    }
                
                print(f"üìö –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(agent_configs)} –∞–≥–µ–Ω—Ç–æ–≤ –∏–∑ –ë–î")
                return agent_configs
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤ –∏–∑ –ë–î: {e}")
            return {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
_global_manager: Optional[MCPAgentManager] = None

async def get_mcp_agent_manager(config: Dict[str, Any] = None) -> MCPAgentManager:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ MCP –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    
    global _global_manager
    
    if _global_manager is None:
        _global_manager = MCPAgentManager(config)
        await _global_manager.initialize()
    
    return _global_manager

async def shutdown_global_manager():
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    
    global _global_manager
    
    if _global_manager:
        await _global_manager.shutdown()
        _global_manager = None