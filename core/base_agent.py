"""
–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–æ–≤
–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–±—â–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∞–≥–µ–Ω—Ç–æ–≤
"""
from abc import ABC, abstractmethod
from typing import Dict, Any, List, Optional
from datetime import datetime
from core.state_models import SEOArchitectsState
from core.config import config
from knowledge.knowledge_manager import knowledge_manager

class BaseAgent(ABC):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö AI SEO Architects"""
    
    def __init__(
        self,
        name: str,
        level: str,
        specialization: str,
        model: Optional[str] = None
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
        
        Args:
            name: –ò–º—è –∞–≥–µ–Ω—Ç–∞
            level: –£—Ä–æ–≤–µ–Ω—å –∞–≥–µ–Ω—Ç–∞ (executive/management/operational)
            specialization: –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞
            model: –ú–æ–¥–µ–ª—å LLM –¥–ª—è –∞–≥–µ–Ω—Ç–∞
        """
        self.name = name
        self.level = level  
        self.specialization = specialization
        self.model = model or config.AGENT_CONFIGS[level]["model"]
        self.temperature = config.AGENT_CONFIGS[level]["temperature"]
        self.max_tokens = config.AGENT_CONFIGS[level]["max_tokens"]
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –∞–≥–µ–Ω—Ç–∞
        self.knowledge_store = knowledge_manager.load_agent_knowledge(
            agent_name=name.lower().replace(" ", "_"),
            agent_level=level
        )
        
        print(f"ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∞–≥–µ–Ω—Ç: {name} ({level} —É—Ä–æ–≤–µ–Ω—å)")
    
    @abstractmethod
    async def process_task(self, state: SEOArchitectsState) -> SEOArchitectsState:
        """
        –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ –∞–≥–µ–Ω—Ç–æ–º
        
        Args:
            state: –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
            
        Returns:
            SEOArchitectsState: –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        """
        pass
    
    def search_knowledge(self, query: str, k: int = 3) -> List[str]:
        """
        –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π –¥–ª—è –∑–∞–¥–∞—á–∏
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            k: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            
        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π
        """
        if not self.knowledge_store:
            return []
            
        documents = knowledge_manager.search_knowledge(
            agent_name=self.name.lower().replace(" ", "_"),
            query=query,
            k=k
        )
        
        return [doc.page_content for doc in documents]
    
    def log_action(self, action: str, details: Dict[str, Any]) -> None:
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –∞–≥–µ–Ω—Ç–∞
        
        Args:
            action: –û–ø–∏—Å–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
            details: –î–µ—Ç–∞–ª–∏ –¥–µ–π—Å—Ç–≤–∏—è
        """
        timestamp = datetime.now().isoformat()
        print(f"üìã [{timestamp}] {self.name}: {action}")
        if details:
            for key, value in details.items():
                print(f"   {key}: {value}")
    
    def update_state(
        self, 
        state: SEOArchitectsState, 
        result: Dict[str, Any],
        next_agent: Optional[str] = None
    ) -> SEOArchitectsState:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
        Args:
            state: –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            result: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–≥–µ–Ω—Ç–æ–º
            next_agent: –°–ª–µ–¥—É—é—â–∏–π –∞–≥–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            
        Returns:
            SEOArchitectsState: –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        """
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        state["processing_results"].append({
            "agent": self.name,
            "timestamp": datetime.now().isoformat(),
            "result": result
        })
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∞–≥–µ–Ω—Ç–æ–≤
        state["previous_agents"].append(state["current_agent"])
        
        if next_agent:
            state["current_agent"] = next_agent
            state["next_agents"] = [next_agent] if next_agent != "END" else []
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
        state["updated_at"] = datetime.now().isoformat()
        
        return state
