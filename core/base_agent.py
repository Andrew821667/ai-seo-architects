"""
–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö AI-–∞–≥–µ–Ω—Ç–æ–≤ —Å Data Provider –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –µ–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
"""

from abc import ABC, abstractmethod
from typing import Dict, Any, Optional, List
import logging
import time
from datetime import datetime

from core.data_providers.base import BaseDataProvider
from core.data_providers.factory import ProviderFactory
from core.interfaces.data_models import SEOData, ClientData, CompetitiveData, TaskData, AgentResult

logger = logging.getLogger(__name__)


class BaseAgent(ABC):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö AI-–∞–≥–µ–Ω—Ç–æ–≤ —Å Data Provider –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"""
    
    def __init__(
        self,
        agent_id: str,
        name: str,
        data_provider: Optional[BaseDataProvider] = None,
        knowledge_base: Optional[str] = None,
        model_config: Optional[Dict[str, Any]] = None
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞
        
        Args:
            agent_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–≥–µ–Ω—Ç–∞
            name: –ò–º—è –∞–≥–µ–Ω—Ç–∞
            data_provider: –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ None, —Å–æ–∑–¥–∞–µ—Ç—Å—è static –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            knowledge_base: –ü—É—Ç—å –∫ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –∞–≥–µ–Ω—Ç–∞
            model_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è LLM –º–æ–¥–µ–ª–∏
        """
        self.agent_id = agent_id
        self.name = name
        self.knowledge_base = knowledge_base
        self.model_config = model_config or {}
        self.context = {}
        self.execution_metrics = {
            "tasks_completed": 0,
            "tasks_failed": 0,
            "total_execution_time": 0.0,
            "avg_execution_time": 0.0
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è data provider
        if data_provider is None:
            logger.info(f"üîß –°–æ–∑–¥–∞–µ–º default static provider –¥–ª—è {self.agent_id}")
            self.data_provider = ProviderFactory.create_provider("static")
        else:
            self.data_provider = data_provider
        
        logger.info(f"ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∞–≥–µ–Ω—Ç {self.name} ({self.agent_id})")
        logger.info(f"üìä –ò—Å–ø–æ–ª—å–∑—É–µ—Ç {type(self.data_provider).__name__}")
    
    @abstractmethod
    async def process_task(self, task_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ –∞–≥–µ–Ω—Ç–æ–º
        
        Args:
            task_data: –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        pass
    
    # =================================================================
    # DATA PROVIDER INTEGRATION METHODS
    # =================================================================
    
    async def get_seo_data(self, domain: str, **kwargs) -> SEOData:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ SEO –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        
        Args:
            domain: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π –¥–æ–º–µ–Ω
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            
        Returns:
            SEOData: –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ SEO –¥–∞–Ω–Ω—ã–µ
        """
        try:
            logger.debug(f"üìä {self.agent_id} –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç SEO –¥–∞–Ω–Ω—ã–µ –¥–ª—è {domain}")
            seo_data = await self.data_provider.get_seo_data(domain, **kwargs)
            logger.debug(f"‚úÖ SEO –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ {seo_data.source}")
            return seo_data
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è SEO –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {domain}: {str(e)}")
            raise
    
    async def get_client_data(self, client_id: str, **kwargs) -> ClientData:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        
        Args:
            client_id: ID –∫–ª–∏–µ–Ω—Ç–∞
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            
        Returns:
            ClientData: –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
        """
        try:
            logger.debug(f"üë§ {self.agent_id} –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ {client_id}")
            client_data = await self.data_provider.get_client_data(client_id, **kwargs)
            logger.debug(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ {client_data.source}")
            return client_data
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞ {client_id}: {str(e)}")
            raise
    
    async def get_competitive_data(
        self, 
        domain: str, 
        competitors: List[str], 
        **kwargs
    ) -> CompetitiveData:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        
        Args:
            domain: –û—Å–Ω–æ–≤–Ω–æ–π –¥–æ–º–µ–Ω
            competitors: –°–ø–∏—Å–æ–∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            
        Returns:
            CompetitiveData: –î–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        """
        try:
            logger.debug(f"üéØ {self.agent_id} –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è {domain}")
            competitive_data = await self.data_provider.get_competitive_data(
                domain, competitors, **kwargs
            )
            logger.debug(f"‚úÖ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ {competitive_data.source}")
            return competitive_data
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            raise
    
    # =================================================================
    # EXECUTION METHODS WITH METRICS
    # =================================================================
    
    async def execute_task(self, task_data: Dict[str, Any]) -> AgentResult:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∏ error handling
        
        Args:
            task_data: –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            
        Returns:
            AgentResult: –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        """
        start_time = time.time()
        task_id = task_data.get("task_id", f"task_{int(time.time())}")
        
        try:
            logger.info(f"üöÄ {self.agent_id} –Ω–∞—á–∏–Ω–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ {task_id}")
            
            # –í—ã–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É –∞–≥–µ–Ω—Ç–∞
            result_data = await self.process_task(task_data)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            execution_time = time.time() - start_time
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            self._update_execution_metrics(True, execution_time)
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            agent_result = AgentResult(
                agent_id=self.agent_id,
                task_id=task_id,
                status="success",
                result_data=result_data,
                execution_time=execution_time,
                confidence_score=result_data.get("confidence_score", 0.8),
                recommendations=result_data.get("recommendations", []),
                next_actions=result_data.get("next_actions", []),
                errors=[],
                warnings=result_data.get("warnings", []),
                timestamp=datetime.now()
            )
            
            logger.info(f"‚úÖ {self.agent_id} –∑–∞–≤–µ—Ä—à–∏–ª –∑–∞–¥–∞—á—É {task_id} –∑–∞ {execution_time:.2f}s")
            return agent_result
            
        except Exception as e:
            execution_time = time.time() - start_time
            self._update_execution_metrics(False, execution_time)
            
            error_msg = str(e)
            logger.error(f"‚ùå {self.agent_id} –æ—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ {task_id}: {error_msg}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ—à–∏–±–∫–æ–π
            agent_result = AgentResult(
                agent_id=self.agent_id,
                task_id=task_id,
                status="error",
                result_data={},
                execution_time=execution_time,
                confidence_score=0.0,
                recommendations=[],
                next_actions=["–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–¥–∞—á—É"],
                errors=[error_msg],
                warnings=[],
                timestamp=datetime.now()
            )
            
            return agent_result
    
    def _update_execution_metrics(self, success: bool, execution_time: float) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞"""
        if success:
            self.execution_metrics["tasks_completed"] += 1
        else:
            self.execution_metrics["tasks_failed"] += 1
        
        self.execution_metrics["total_execution_time"] += execution_time
        
        total_tasks = (
            self.execution_metrics["tasks_completed"] + 
            self.execution_metrics["tasks_failed"]
        )
        
        if total_tasks > 0:
            self.execution_metrics["avg_execution_time"] = (
                self.execution_metrics["total_execution_time"] / total_tasks
            )
    
    # =================================================================
    # UTILITY METHODS
    # =================================================================
    
    def get_provider_info(self) -> Dict[str, Any]:
        """
        –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ –¥–∞–Ω–Ω—ã—Ö
        
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ
        """
        try:
            return {
                "provider_type": type(self.data_provider).__name__,
                "provider_metrics": self.data_provider.get_metrics(),
                "cache_size": len(getattr(self.data_provider, 'cache', {})),
                "health_status": "unknown"  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å async health check
            }
        except Exception as e:
            return {"error": str(e)}
    
    def get_agent_metrics(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∞–≥–µ–Ω—Ç–∞
        
        Returns:
            Dict —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∞–≥–µ–Ω—Ç–∞
        """
        return {
            "agent_id": self.agent_id,
            "agent_name": self.name,
            "execution_metrics": self.execution_metrics.copy(),
            "provider_info": self.get_provider_info(),
            "model_config": self.model_config,
            "knowledge_base": self.knowledge_base,
            "context_size": len(self.context)
        }
    
    def reset_metrics(self) -> None:
        """–°–±—Ä–æ—Å –º–µ—Ç—Ä–∏–∫ –∞–≥–µ–Ω—Ç–∞"""
        self.execution_metrics = {
            "tasks_completed": 0,
            "tasks_failed": 0,
            "total_execution_time": 0.0,
            "avg_execution_time": 0.0
        }
        logger.info(f"üìä –ú–µ—Ç—Ä–∏–∫–∏ –∞–≥–µ–Ω—Ç–∞ {self.agent_id} —Å–±—Ä–æ—à–µ–Ω—ã")
    
    def update_context(self, new_context: Dict[str, Any]) -> None:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∞–≥–µ–Ω—Ç–∞
        
        Args:
            new_context: –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        """
        self.context.update(new_context)
        logger.debug(f"üìù –ö–æ–Ω—Ç–µ–∫—Å—Ç –∞–≥–µ–Ω—Ç–∞ {self.agent_id} –æ–±–Ω–æ–≤–ª–µ–Ω")
    
    def clear_context(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∞–≥–µ–Ω—Ç–∞"""
        self.context.clear()
        logger.debug(f"üóëÔ∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç –∞–≥–µ–Ω—Ç–∞ {self.agent_id} –æ—á–∏—â–µ–Ω")
    
    async def health_check(self) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∞–≥–µ–Ω—Ç–∞
        
        Returns:
            Dict —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –∞–≥–µ–Ω—Ç–∞
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º data provider
            provider_health = await self.data_provider.health_check()
            
            # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≥–µ–Ω—Ç–∞
            agent_status = {
                "agent_id": self.agent_id,
                "status": "healthy",
                "provider_status": provider_health.get("status", "unknown"),
                "metrics": self.get_agent_metrics(),
                "last_check": datetime.now().isoformat()
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            success_rate = 0
            if self.execution_metrics["tasks_completed"] + self.execution_metrics["tasks_failed"] > 0:
                success_rate = (
                    self.execution_metrics["tasks_completed"] / 
                    (self.execution_metrics["tasks_completed"] + self.execution_metrics["tasks_failed"])
                )
            
            if success_rate < 0.5 and self.execution_metrics["tasks_completed"] > 5:
                agent_status["status"] = "degraded"
                agent_status["warning"] = "–ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–¥–∞—á"
            
            return agent_status
            
        except Exception as e:
            return {
                "agent_id": self.agent_id,
                "status": "unhealthy",
                "error": str(e),
                "last_check": datetime.now().isoformat()
            }
    
    def __str__(self) -> str:
        """–°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞"""
        return f"{self.name} ({self.agent_id})"
    
    def __repr__(self) -> str:
        """–î–µ—Ç–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞"""
        return (
            f"BaseAgent(agent_id='{self.agent_id}', name='{self.name}', "
            f"provider={type(self.data_provider).__name__})"
        )


# =================================================================
# CONVENIENCE FUNCTIONS
# =================================================================

def create_agent_with_static_provider(
    agent_class,
    agent_id: str,
    name: str,
    **kwargs
) -> BaseAgent:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ —Å–æ static data provider
    
    Args:
        agent_class: –ö–ª–∞—Å—Å –∞–≥–µ–Ω—Ç–∞
        agent_id: ID –∞–≥–µ–Ω—Ç–∞
        name: –ò–º—è –∞–≥–µ–Ω—Ç–∞
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        
    Returns:
        –≠–∫–∑–µ–º–ø–ª—è—Ä –∞–≥–µ–Ω—Ç–∞
    """
    static_provider = ProviderFactory.create_provider("static")
    return agent_class(
        agent_id=agent_id,
        name=name,
        data_provider=static_provider,
        **kwargs
    )


def create_agent_with_provider(
    agent_class,
    agent_id: str,
    name: str,
    provider_type: str,
    provider_config: Optional[Dict[str, Any]] = None,
    **kwargs
) -> BaseAgent:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º
    
    Args:
        agent_class: –ö–ª–∞—Å—Å –∞–≥–µ–Ω—Ç–∞
        agent_id: ID –∞–≥–µ–Ω—Ç–∞
        name: –ò–º—è –∞–≥–µ–Ω—Ç–∞
        provider_type: –¢–∏–ø –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        provider_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        
    Returns:
        –≠–∫–∑–µ–º–ø–ª—è—Ä –∞–≥–µ–Ω—Ç–∞
    """
    provider = ProviderFactory.create_provider(provider_type, provider_config)
    return agent_class(
        agent_id=agent_id,
        name=name,
        data_provider=provider,
        **kwargs
    )
