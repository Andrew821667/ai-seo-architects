"""
LangGraph –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ AI SEO Architects
–£–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Ç–æ–∫–æ–º –∑–∞–¥–∞—á –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏ —Ç—Ä–µ—Ö —É—Ä–æ–≤–Ω–µ–π
"""
from typing import Dict, Any, List
from langgraph.graph import StateGraph, END
from core.state_models import SEOArchitectsState
from core.config import config
import logging
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class SEOArchitectsOrchestrator:
    """–ì–ª–∞–≤–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã AI SEO Architects"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        self.agents = {}
        self.graph = None
        self.compiled_graph = None
        logger.info("üèóÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI SEO Architects Orchestrator")
    
    def register_agent(self, agent_name: str, agent_instance) -> None:
        """
        –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞ –≤ —Å–∏—Å—Ç–µ–º–µ
        
        Args:
            agent_name: –ò–º—è –∞–≥–µ–Ω—Ç–∞
            agent_instance: –≠–∫–∑–µ–º–ø–ª—è—Ä –∞–≥–µ–Ω—Ç–∞
        """
        self.agents[agent_name] = agent_instance
        logger.info(f"ü§ñ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∞–≥–µ–Ω—Ç: {agent_name}")
    
    def create_workflow_graph(self) -> StateGraph:
        """
        –°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ workflow –¥–ª—è LangGraph
        
        Returns:
            StateGraph: –ì—Ä–∞—Ñ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ
        workflow = StateGraph(SEOArchitectsState)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É–∑–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è –∞–≥–µ–Ω—Ç–æ–≤
        
        # Executive Level
        workflow.add_node("chief_seo_strategist", self._executive_node)
        workflow.add_node("business_development_director", self._executive_node)
        
        # Management Level  
        workflow.add_node("task_coordinator", self._management_node)
        workflow.add_node("sales_operations_manager", self._management_node)
        workflow.add_node("technical_seo_operations_manager", self._management_node)
        workflow.add_node("client_success_manager", self._management_node)
        
        # Operational Level
        workflow.add_node("lead_qualification_agent", self._operational_node)
        workflow.add_node("sales_conversation_agent", self._operational_node)
        workflow.add_node("proposal_generation_agent", self._operational_node)
        workflow.add_node("technical_seo_auditor", self._operational_node)
        workflow.add_node("content_strategy_agent", self._operational_node)
        workflow.add_node("link_building_agent", self._operational_node)
        workflow.add_node("competitive_analysis_agent", self._operational_node)
        workflow.add_node("reporting_agent", self._operational_node)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞
        workflow.set_entry_point("task_coordinator")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
        workflow.add_conditional_edges(
            "task_coordinator",
            self._route_from_coordinator,
            {
                "sales_flow": "lead_qualification_agent",
                "seo_audit": "technical_seo_auditor",
                "content_strategy": "content_strategy_agent",
                "strategic_planning": "chief_seo_strategist",
                "end": END
            }
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é –¥–ª—è sales flow
        workflow.add_conditional_edges(
            "lead_qualification_agent",
            self._route_from_lead_qualification,
            {
                "hot_lead": "sales_conversation_agent",
                "warm_lead": "sales_operations_manager", 
                "cold_lead": "client_success_manager",
                "end": END
            }
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤–µ—Ä—à–∞—é—â–∏–µ –ø–µ—Ä–µ—Ö–æ–¥—ã
        workflow.add_edge("sales_conversation_agent", "proposal_generation_agent")
        workflow.add_edge("proposal_generation_agent", END)
        workflow.add_edge("technical_seo_auditor", "reporting_agent")
        workflow.add_edge("content_strategy_agent", "reporting_agent")
        workflow.add_edge("reporting_agent", END)
        
        self.graph = workflow
        return workflow
    
    async def _executive_node(self, state: SEOArchitectsState) -> SEOArchitectsState:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á Executive —É—Ä–æ–≤–Ω—è - –ë–ï–ó –ó–ê–ì–õ–£–®–ï–ö"""
        current_agent = state["current_agent"]
        logger.info(f"üéØ Executive —É–∑–µ–ª: {current_agent}")
        
        if current_agent in self.agents:
            # –†–ï–ê–õ–¨–ù–´–ô –í–´–ó–û–í –ê–ì–ï–ù–¢–ê
            agent_instance = self.agents[current_agent]
            task_data = {
                "task_type": state.get("task_type", ""),
                "input_data": state.get("input_data", {}),
                "client_context": state.get("client_context", {}),
                "domain": state.get("domain", ""),
                "client_id": state.get("client_id", "")
            }
            
            try:
                result = await agent_instance.process_task(task_data)
                state["processing_results"].append({
                    "agent": current_agent,
                    "level": "executive",
                    "status": "success",
                    "result": result,
                    "timestamp": state.get("timestamp", "")
                })
                logger.info(f"‚úÖ {current_agent} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ {current_agent}: {str(e)}")
                state["processing_results"].append({
                    "agent": current_agent,
                    "level": "executive", 
                    "status": "error",
                    "error": str(e)
                })
        else:
            logger.warning(f"‚ö†Ô∏è –ê–≥–µ–Ω—Ç {current_agent} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
            state["processing_results"].append({
                "agent": current_agent,
                "level": "executive",
                "status": "not_found",
                "message": f"–ê–≥–µ–Ω—Ç {current_agent} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ"
            })
        
        return state
    
    async def _management_node(self, state: SEOArchitectsState) -> SEOArchitectsState:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á Management —É—Ä–æ–≤–Ω—è - –ë–ï–ó –ó–ê–ì–õ–£–®–ï–ö"""
        current_agent = state["current_agent"]
        logger.info(f"üìä Management —É–∑–µ–ª: {current_agent}")
        
        if current_agent in self.agents:
            # –†–ï–ê–õ–¨–ù–´–ô –í–´–ó–û–í –ê–ì–ï–ù–¢–ê
            agent_instance = self.agents[current_agent]
            task_data = {
                "task_type": state.get("task_type", ""),
                "input_data": state.get("input_data", {}),
                "client_context": state.get("client_context", {}),
                "domain": state.get("domain", ""),
                "client_id": state.get("client_id", "")
            }
            
            try:
                result = await agent_instance.process_task(task_data)
                state["processing_results"].append({
                    "agent": current_agent,
                    "level": "management",
                    "status": "success",
                    "result": result,
                    "timestamp": state.get("timestamp", "")
                })
                logger.info(f"‚úÖ {current_agent} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ {current_agent}: {str(e)}")
                state["processing_results"].append({
                    "agent": current_agent,
                    "level": "management",
                    "status": "error", 
                    "error": str(e)
                })
        else:
            logger.warning(f"‚ö†Ô∏è –ê–≥–µ–Ω—Ç {current_agent} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
            state["processing_results"].append({
                "agent": current_agent,
                "level": "management",
                "status": "not_found",
                "message": f"–ê–≥–µ–Ω—Ç {current_agent} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ"
            })
        
        return state
    
    async def _operational_node(self, state: SEOArchitectsState) -> SEOArchitectsState:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á Operational —É—Ä–æ–≤–Ω—è - –ë–ï–ó –ó–ê–ì–õ–£–®–ï–ö"""
        current_agent = state["current_agent"]
        logger.info(f"‚öôÔ∏è Operational —É–∑–µ–ª: {current_agent}")
        
        if current_agent in self.agents:
            # –†–ï–ê–õ–¨–ù–´–ô –í–´–ó–û–í –ê–ì–ï–ù–¢–ê
            agent_instance = self.agents[current_agent]
            task_data = {
                "task_type": state.get("task_type", ""),
                "input_data": state.get("input_data", {}),
                "client_context": state.get("client_context", {}),
                "domain": state.get("domain", ""),
                "client_id": state.get("client_id", "")
            }
            
            try:
                result = await agent_instance.process_task(task_data)
                state["processing_results"].append({
                    "agent": current_agent,
                    "level": "operational",
                    "status": "success",
                    "result": result,
                    "timestamp": state.get("timestamp", "")
                })
                logger.info(f"‚úÖ {current_agent} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ {current_agent}: {str(e)}")
                state["processing_results"].append({
                    "agent": current_agent,
                    "level": "operational",
                    "status": "error",
                    "error": str(e)
                })
        else:
            logger.warning(f"‚ö†Ô∏è –ê–≥–µ–Ω—Ç {current_agent} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
            state["processing_results"].append({
                "agent": current_agent,
                "level": "operational",
                "status": "not_found",
                "message": f"–ê–≥–µ–Ω—Ç {current_agent} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ"
            })
        
        return state
    
    def _route_from_coordinator(self, state: SEOArchitectsState) -> str:
        """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –æ—Ç Task Coordinator"""
        task_type = state.get("task_type", "")
        
        if task_type == "lead_processing":
            return "sales_flow"
        elif task_type == "seo_audit":
            return "seo_audit"
        elif task_type == "content_strategy":
            return "content_strategy"
        elif task_type == "strategic_planning":
            return "strategic_planning"
        else:
            return "end"
    
    def _route_from_lead_qualification(self, state: SEOArchitectsState) -> str:
        """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –æ—Ç Lead Qualification Agent"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏
        if state["processing_results"]:
            last_result = state["processing_results"][-1]
            if last_result.get("status") == "success" and "result" in last_result:
                agent_result = last_result["result"]
                if "lead_score" in agent_result:
                    score = agent_result["lead_score"]
                    if score >= 90:
                        return "hot_lead"
                    elif score >= 70:
                        return "warm_lead"
                    elif score >= 50:
                        return "cold_lead"
        
        return "end"
    
    def compile_workflow(self) -> Any:
        """
        –ö–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç workflow –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        
        Returns:
            –°–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥—Ä–∞—Ñ
        """
        if not self.graph:
            self.create_workflow_graph()
        
        self.compiled_graph = self.graph.compile()
        logger.info("‚úÖ Workflow —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é")
        return self.compiled_graph
    
    async def execute_workflow(self, initial_state: SEOArchitectsState) -> SEOArchitectsState:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç workflow —Å –Ω–∞—á–∞–ª—å–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
        
        Args:
            initial_state: –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            
        Returns:
            SEOArchitectsState: –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        if not self.compiled_graph:
            self.compile_workflow()
        
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ workflow AI SEO Architects")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≥—Ä–∞—Ñ
        final_state = await self.compiled_graph.ainvoke(initial_state)
        
        logger.info("‚úÖ Workflow –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return final_state

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
orchestrator = SEOArchitectsOrchestrator()
