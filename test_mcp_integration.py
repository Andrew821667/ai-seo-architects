"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è MCP (Model Context Protocol) –≤ AI SEO Architects
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤ —Å MCP –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import sys
import os
from datetime import datetime
from typing import Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PATH
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from core.mcp.agent_manager import MCPAgentManager, get_mcp_agent_manager
from config.mcp_config import get_development_config, get_config_for_environment
from core.mcp.data_provider import MCPDataProvider
from mock_data_provider import MockDataProvider

class MCPIntegrationTester:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MCP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    
    def __init__(self):
        self.test_results = {
            "test_type": "mcp_integration_test",
            "timestamp": datetime.now().isoformat(),
            "tests": {},
            "summary": {
                "total_tests": 0,
                "successful_tests": 0,
                "failed_tests": 0,
                "mcp_tests": 0,
                "fallback_tests": 0
            }
        }
        
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö MCP —Ç–µ—Å—Ç–æ–≤"""
        
        print("üß™ === MCP Integration Testing Suite ===\n")
        
        # –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MCP
        await self.test_mcp_initialization()
        
        # –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ MCP –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        await self.test_mcp_provider_creation()
        
        # –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤ —Å MCP
        await self.test_agent_creation_with_mcp()
        
        # –¢–µ—Å—Ç 4: Fallback —Ä–µ–∂–∏–º
        await self.test_fallback_mode()
        
        # –¢–µ—Å—Ç 5: –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
        await self.test_all_agents_comprehensive()
        
        # –¢–µ—Å—Ç 6: Health checks
        await self.test_health_checks()
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        self.print_final_report()
    
    async def test_mcp_initialization(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MCP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        
        test_name = "mcp_config_initialization"
        print(f"üîß –¢–µ—Å—Ç: {test_name}")
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            dev_config = get_development_config()
            prod_config = get_config_for_environment("production")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            assert "mcp_servers" in dev_config, "mcp_servers –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ dev config"
            assert "cache_ttl_minutes" in dev_config, "cache_ttl_minutes –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            assert "enable_fallback" in dev_config, "enable_fallback –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            
            self.test_results["tests"][test_name] = {
                "status": "success",
                "config_keys": list(dev_config.keys()),
                "mcp_servers_count": len(dev_config.get("mcp_servers", {}))
            }
            
            self.test_results["summary"]["successful_tests"] += 1
            print("  ‚úÖ MCP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n")
            
        except Exception as e:
            self.test_results["tests"][test_name] = {
                "status": "failed",
                "error": str(e)
            }
            self.test_results["summary"]["failed_tests"] += 1
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MCP: {e}\n")
        
        self.test_results["summary"]["total_tests"] += 1
    
    async def test_mcp_provider_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è MCP –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        
        test_name = "mcp_provider_creation"
        print(f"üîó –¢–µ—Å—Ç: {test_name}")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Å development –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
            config = get_development_config()
            provider = MCPDataProvider(config)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é (–¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–π—Ç–∏ —Å fallback)
            init_result = await provider.initialize()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã
            stats = provider.get_stats()
            health = await provider.health_check()
            
            self.test_results["tests"][test_name] = {
                "status": "success",
                "initialization_result": init_result,
                "provider_stats": stats,
                "health_status": health.get("overall_health", "unknown")
            }
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä
            await provider.close()
            
            self.test_results["summary"]["successful_tests"] += 1
            self.test_results["summary"]["mcp_tests"] += 1
            print("  ‚úÖ MCP –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Å–æ–∑–¥–∞–Ω –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω\n")
            
        except Exception as e:
            self.test_results["tests"][test_name] = {
                "status": "failed", 
                "error": str(e)
            }
            self.test_results["summary"]["failed_tests"] += 1
            print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è MCP –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {e}\n")
        
        self.test_results["summary"]["total_tests"] += 1
    
    async def test_agent_creation_with_mcp(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤ —Å MCP –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"""
        
        test_name = "agent_creation_mcp"
        print(f"ü§ñ –¢–µ—Å—Ç: {test_name}")
        
        try:
            # –°–æ–∑–¥–∞–µ–º MCP –º–µ–Ω–µ–¥–∂–µ—Ä
            config = get_development_config()
            manager = MCPAgentManager(config)
            
            await manager.initialize()
            
            # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–≥–µ–Ω—Ç–æ–≤ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
            test_agents = [
                "LeadQualificationAgent",
                "ContentStrategyAgent", 
                "TechnicalSEOAuditorAgent"
            ]
            
            created_agents = {}
            
            for agent_class in test_agents:
                agent = await manager.create_agent(
                    agent_class_name=agent_class,
                    enable_mcp=True
                )
                
                if agent:
                    created_agents[agent.agent_id] = {
                        "class": agent_class,
                        "mcp_enabled": agent.mcp_enabled,
                        "agent_type": agent._get_agent_type() if hasattr(agent, '_get_agent_type') else "unknown"
                    }
            
            self.test_results["tests"][test_name] = {
                "status": "success",
                "requested_agents": len(test_agents),
                "created_agents": len(created_agents),
                "agent_details": created_agents,
                "manager_stats": manager.get_stats()
            }
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
            await manager.shutdown()
            
            self.test_results["summary"]["successful_tests"] += 1
            print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(created_agents)}/{len(test_agents)} –∞–≥–µ–Ω—Ç–æ–≤ —Å MCP\n")
            
        except Exception as e:
            self.test_results["tests"][test_name] = {
                "status": "failed",
                "error": str(e)
            }
            self.test_results["summary"]["failed_tests"] += 1
            print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤: {e}\n")
        
        self.test_results["summary"]["total_tests"] += 1
    
    async def test_fallback_mode(self):
        """–¢–µ—Å—Ç fallback —Ä–µ–∂–∏–º–∞ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ MCP"""
        
        test_name = "fallback_mode"
        print(f"‚ö†Ô∏è –¢–µ—Å—Ç: {test_name}")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å–µ—Ä–≤–µ—Ä–∞–º–∏
            fallback_config = {
                "cache_ttl_minutes": 5,
                "enable_fallback": True,
                "fallback_provider": "mock",
                "mcp_servers": {
                    "unavailable_server": {
                        "name": "unavailable",
                        "endpoints": {"http": "http://localhost:9999/mcp/v1"},
                        "authentication": {"type": "none"}
                    }
                }
            }
            
            manager = MCPAgentManager(fallback_config)
            await manager.initialize()
            
            # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ (–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fallback)
            agent = await manager.create_agent(
                agent_class_name="LeadQualificationAgent",
                enable_mcp=True  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º MCP, –Ω–æ –ø–æ–ª—É—á–∏–º fallback
            )
            
            if agent:
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É –∞–≥–µ–Ω—Ç–∞
                test_data = {
                    "input_data": {
                        "company_data": {
                            "company_name": "Fallback Test Company",
                            "industry": "technology"
                        }
                    }
                }
                
                result = await agent.process_task(test_data)
                
                self.test_results["tests"][test_name] = {
                    "status": "success",
                    "agent_created": True,
                    "mcp_enabled": agent.mcp_enabled,
                    "provider_type": type(agent.data_provider).__name__,
                    "task_result": result.get("success", False)
                }
                
                self.test_results["summary"]["successful_tests"] += 1
                self.test_results["summary"]["fallback_tests"] += 1
            else:
                raise Exception("–ê–≥–µ–Ω—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω –≤ fallback —Ä–µ–∂–∏–º–µ")
            
            await manager.shutdown()
            print("  ‚úÖ Fallback —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n")
            
        except Exception as e:
            self.test_results["tests"][test_name] = {
                "status": "failed",
                "error": str(e)
            }
            self.test_results["summary"]["failed_tests"] += 1
            print(f"  ‚ùå –û—à–∏–±–∫–∞ fallback —Ä–µ–∂–∏–º–∞: {e}\n")
        
        self.test_results["summary"]["total_tests"] += 1
    
    async def test_all_agents_comprehensive(self):
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö 14 –∞–≥–µ–Ω—Ç–æ–≤ —Å MCP"""
        
        test_name = "comprehensive_all_agents"
        print(f"üèóÔ∏è –¢–µ—Å—Ç: {test_name}")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
            config = get_development_config()
            manager = MCPAgentManager(config)
            await manager.initialize()
            
            # –°–æ–∑–¥–∞–µ–º –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
            agents = await manager.create_all_agents(enable_mcp=True)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç
            test_results = await manager.run_comprehensive_test()
            
            self.test_results["tests"][test_name] = {
                "status": "success",
                "total_agents": len(agents),
                "test_results": test_results["summary"],
                "agent_breakdown": {
                    agent_id: result["status"] 
                    for agent_id, result in test_results["results"].items()
                }
            }
            
            await manager.shutdown()
            
            self.test_results["summary"]["successful_tests"] += 1
            print(f"  ‚úÖ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(agents)} –∞–≥–µ–Ω—Ç–æ–≤: {test_results['summary']['success_rate']:.1f}% —É—Å–ø–µ—Ö–∞\n")
            
        except Exception as e:
            self.test_results["tests"][test_name] = {
                "status": "failed",
                "error": str(e)
            }
            self.test_results["summary"]["failed_tests"] += 1
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}\n")
        
        self.test_results["summary"]["total_tests"] += 1
    
    async def test_health_checks(self):
        """–¢–µ—Å—Ç health checks –¥–ª—è MCP —Å–∏—Å—Ç–µ–º—ã"""
        
        test_name = "health_checks"
        print(f"üîç –¢–µ—Å—Ç: {test_name}")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∏ –∞–≥–µ–Ω—Ç–æ–≤
            config = get_development_config()
            manager = MCPAgentManager(config)
            await manager.initialize()
            
            # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–≥–µ–Ω—Ç–æ–≤
            await manager.create_agent("LeadQualificationAgent", enable_mcp=True)
            await manager.create_agent("ContentStrategyAgent", enable_mcp=True)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º health check
            health_results = await manager.health_check_all_agents()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            overall_healthy = health_results["overall_status"] == "healthy"
            agents_checked = len(health_results["agents"])
            
            self.test_results["tests"][test_name] = {
                "status": "success",
                "overall_health": health_results["overall_status"],
                "agents_checked": agents_checked,
                "healthy_agents": health_results["summary"]["healthy_agents"],
                "mcp_provider_status": health_results.get("mcp_provider_status", {}).get("overall_health", "unknown")
            }
            
            await manager.shutdown()
            
            self.test_results["summary"]["successful_tests"] += 1
            print(f"  ‚úÖ Health check: {health_results['summary']['healthy_agents']}/{agents_checked} –∞–≥–µ–Ω—Ç–æ–≤ –∑–¥–æ—Ä–æ–≤—ã\n")
            
        except Exception as e:
            self.test_results["tests"][test_name] = {
                "status": "failed",
                "error": str(e)
            }
            self.test_results["summary"]["failed_tests"] += 1
            print(f"  ‚ùå –û—à–∏–±–∫–∞ health check: {e}\n")
        
        self.test_results["summary"]["total_tests"] += 1
    
    def print_final_report(self):
        """–ü–µ—á–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        
        print("=" * 60)
        print("üéØ –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ MCP –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
        print("=" * 60)
        
        summary = self.test_results["summary"]
        success_rate = (summary["successful_tests"] / max(1, summary["total_tests"])) * 100
        
        print(f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {summary['total_tests']}")
        print(f"   –£—Å–ø–µ—à–Ω–æ: {summary['successful_tests']}")
        print(f"   –ù–µ—É–¥–∞—á–Ω–æ: {summary['failed_tests']}")
        print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        print(f"   MCP —Ç–µ—Å—Ç—ã: {summary['mcp_tests']}")
        print(f"   Fallback —Ç–µ—Å—Ç—ã: {summary['fallback_tests']}")
        
        print(f"\nüìã –î–µ—Ç–∞–ª–∏ —Ç–µ—Å—Ç–æ–≤:")
        for test_name, test_result in self.test_results["tests"].items():
            status_icon = "‚úÖ" if test_result["status"] == "success" else "‚ùå"
            print(f"   {status_icon} {test_name}: {test_result['status']}")
            
            if test_result["status"] == "failed" and "error" in test_result:
                print(f"      –û—à–∏–±–∫–∞: {test_result['error']}")
        
        print(f"\nüéâ {'–¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û' if success_rate >= 80 else '–¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê'}")
        print(f"üìÖ –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {self.test_results['timestamp']}")
        print("=" * 60)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ MCP —Ç–µ—Å—Ç–æ–≤"""
    
    print("üöÄ –ó–∞–ø—É—Å–∫ MCP Integration Testing Suite")
    print(f"üìÖ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–µ—Ä
    tester = MCPIntegrationTester()
    await tester.run_all_tests()

if __name__ == "__main__":
    asyncio.run(main())