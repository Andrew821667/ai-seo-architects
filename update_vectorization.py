#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ —Å —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–º–∏ –±–∞–∑–∞–º–∏ –∑–Ω–∞–Ω–∏–π
–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ—Ç FAISS –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –≤—Å–µ—Ö 14 –∞–≥–µ–Ω—Ç–æ–≤
"""

import os
import sys
import shutil
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from knowledge.knowledge_manager import knowledge_manager
from core.config import config

def clear_old_vectors():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤"""
    print("üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤...")
    
    vector_store_path = Path(config.VECTOR_STORE_PATH)
    
    if vector_store_path.exists():
        try:
            # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
            backup_path = f"{vector_store_path}_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            shutil.copytree(vector_store_path, backup_path)
            print(f"üì¶ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø –≤ {backup_path}")
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∏–Ω–¥–µ–∫—Å—ã
            shutil.rmtree(vector_store_path)
            os.makedirs(vector_store_path, exist_ok=True)
            print("‚úÖ –°—Ç–∞—Ä—ã–µ –∏–Ω–¥–µ–∫—Å—ã —É–¥–∞–ª–µ–Ω—ã")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏–Ω–¥–µ–∫—Å–æ–≤: {e}")
    else:
        os.makedirs(vector_store_path, exist_ok=True)
        print("üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –≤–µ–∫—Ç–æ—Ä–æ–≤")

def force_reload_agent_knowledge(agent_name: str, agent_level: str):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∑–Ω–∞–Ω–∏–π –∞–≥–µ–Ω—Ç–∞"""
    print(f"\nü§ñ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è {agent_name} ({agent_level})...")
    
    try:
        # –£–¥–∞–ª—è–µ–º –∏–∑ –∫—ç—à–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
        if agent_name in knowledge_manager.vector_stores:
            del knowledge_manager.vector_stores[agent_name]
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–Ω–æ–≤–æ
        vector_store = knowledge_manager.load_agent_knowledge(agent_name, agent_level)
        
        if vector_store:
            print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {len(vector_store.documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
            test_results = vector_store.similarity_search(f"{agent_name} —Ä–æ–ª—å", k=1)
            if test_results:
                content_preview = test_results[0].page_content[:100]
                is_russian = any(ord(char) > 127 for char in content_preview)
                language_status = "üá∑üá∫ –†—É—Å—Å–∫–∏–π" if is_russian else "üá∫üá∏ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π"
                print(f"   üîç –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞: {language_status}")
                print(f"   üìÑ –ü—Ä–µ–≤—å—é: {content_preview}...")
            else:
                print(f"   ‚ö†Ô∏è –ü–æ–∏—Å–∫ –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                
            return True
        else:
            print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–Ω–∞–Ω–∏—è")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {agent_name}: {e}")
        return False

def update_all_agents():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
    print("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤...")
    
    # –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∞–≥–µ–Ω—Ç–æ–≤ –∏ –∏—Ö —É—Ä–æ–≤–Ω–µ–π
    agent_mappings = {
        # Executive level
        'chief_seo_strategist': 'executive',
        'business_development_director': 'executive',
        
        # Management level  
        'task_coordination': 'management',
        'sales_operations_manager': 'management',
        'technical_seo_operations_manager': 'management', 
        'client_success_manager': 'management',
        
        # Operational level - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–º –±–∞–∑–∞–º
        'lead_qualification': 'operational',
        'sales_conversation': 'operational',
        'proposal_generation': 'operational',
        'technical_seo_auditor': 'operational',
        'content_strategy': 'operational',
        'link_building': 'operational',
        'competitive_analysis': 'operational',
        'reporting': 'operational'
    }
    
    results = {}
    successful_count = 0
    
    for agent_name, agent_level in agent_mappings.items():
        result = force_reload_agent_knowledge(agent_name, agent_level)
        results[agent_name] = result
        if result:
            successful_count += 1
    
    return results, successful_count

def verify_vectorization():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    print("\nüîç –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
    
    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–º–∏ –±–∞–∑–∞–º–∏
    critical_agents = [
        ('lead_qualification', 'operational'),
        ('sales_conversation', 'operational'),  
        ('proposal_generation', 'operational'),
        ('technical_seo_auditor', 'operational'),
        ('technical_seo_operations_manager', 'management')
    ]
    
    verification_results = {}
    
    for agent_name, agent_level in critical_agents:
        print(f"\nüß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ {agent_name}...")
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–Ω–∞–Ω–∏—è
            vector_store = knowledge_manager.load_agent_knowledge(agent_name, agent_level)
            
            if vector_store and vector_store.documents:
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–π –ø–æ–∏—Å–∫
                russian_queries = [
                    "—Ä–æ–ª—å –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏",
                    "—ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ –∑–Ω–∞–Ω–∏—è",
                    "—Ä–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—ã–Ω–æ–∫",
                    "SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"
                ]
                
                russian_results = 0
                total_tests = len(russian_queries)
                
                for query in russian_queries:
                    results = vector_store.similarity_search(query, k=1)
                    if results:
                        content = results[0].page_content
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä—É—Å—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                        if any(ord(char) > 127 for char in content):
                            russian_results += 1
                
                russian_percentage = (russian_results / total_tests) * 100
                verification_results[agent_name] = {
                    'status': 'success',
                    'documents_count': len(vector_store.documents),
                    'russian_content_percentage': russian_percentage,
                    'faiss_active': vector_store.index is not None
                }
                
                status = "‚úÖ" if russian_percentage >= 75 else "‚ö†Ô∏è" if russian_percentage >= 50 else "‚ùå"
                print(f"   {status} –†—É—Å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç: {russian_percentage:.1f}%")
                print(f"   üìÑ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(vector_store.documents)}")
                print(f"   üîç FAISS: {'–ê–∫—Ç–∏–≤–µ–Ω' if vector_store.index else 'Fallback'}")
                
            else:
                verification_results[agent_name] = {
                    'status': 'failed',
                    'reason': 'No documents loaded'
                }
                print(f"   ‚ùå –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                
        except Exception as e:
            verification_results[agent_name] = {
                'status': 'error', 
                'error': str(e)
            }
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    return verification_results

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    print("üöÄ –û–ë–ù–û–í–õ–ï–ù–ò–ï –í–ï–ö–¢–û–†–ò–ó–ê–¶–ò–ò AI SEO ARCHITECTS")
    print("=" * 70)
    print(f"üïí –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().isoformat()}")
    print(f"üîß OpenAI Embeddings: {'‚úÖ –ì–æ—Ç–æ–≤' if knowledge_manager.embeddings else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
    print(f"üìÅ –ü—É—Ç—å –∫ –∑–Ω–∞–Ω–∏—è–º: {config.KNOWLEDGE_BASE_PATH}")
    print(f"üíæ –ü—É—Ç—å –∫ –≤–µ–∫—Ç–æ—Ä–∞–º: {config.VECTOR_STORE_PATH}")
    
    if not knowledge_manager.embeddings:
        print("‚ùå OpenAI Embeddings –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ OPENAI_API_KEY")
        return
    
    try:
        # –≠—Ç–∞–ø 1: –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤
        clear_old_vectors()
        
        # –≠—Ç–∞–ø 2: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
        results, successful_count = update_all_agents()
        
        # –≠—Ç–∞–ø 3: –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
        verification_results = verify_vectorization()
        
        # –≠—Ç–∞–ø 4: –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "=" * 70)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –û–ë–ù–û–í–õ–ï–ù–ò–Ø –í–ï–ö–¢–û–†–ò–ó–ê–¶–ò–ò")
        print("=" * 70)
        
        print(f"\nüîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ê–ì–ï–ù–¢–û–í:")
        for agent_name, success in results.items():
            status = "‚úÖ" if success else "‚ùå"
            print(f"   {status} {agent_name}")
        
        print(f"\nüß™ –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ê–ì–ï–ù–¢–û–í:")
        for agent_name, result in verification_results.items():
            if result['status'] == 'success':
                percentage = result['russian_content_percentage']
                status = "‚úÖ" if percentage >= 75 else "‚ö†Ô∏è" if percentage >= 50 else "‚ùå"
                print(f"   {status} {agent_name}: {percentage:.1f}% —Ä—É—Å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç")
            else:
                print(f"   ‚ùå {agent_name}: {result.get('reason', result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'))}")
        
        print(f"\nüèÜ –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print(f"   üìä –ê–≥–µ–Ω—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {successful_count}/{len(results)}")
        
        verified_count = sum(1 for r in verification_results.values() 
                           if r.get('status') == 'success' and r.get('russian_content_percentage', 0) >= 75)
        print(f"   ‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ (>75% RU): {verified_count}/{len(verification_results)}")
        
        if successful_count == len(results) and verified_count >= len(verification_results) * 0.8:
            print("\nüéâ –í–ï–ö–¢–û–†–ò–ó–ê–¶–ò–Ø –£–°–ü–ï–®–ù–û –û–ë–ù–û–í–õ–ï–ù–ê!")
            print("   –í—Å–µ –∞–≥–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ —Å —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–º–∏ –±–∞–∑–∞–º–∏ –∑–Ω–∞–Ω–∏–π")
        elif successful_count >= len(results) * 0.8:
            print("\n‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–û –ì–û–¢–û–í–û")
            print("   –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∞–≥–µ–Ω—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏")
        else:
            print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´")
            print("   –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
        
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        if verified_count < len(verification_results):
            print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã—Ö –±–∞–∑ –∑–Ω–∞–Ω–∏–π")
            print("   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ñ–∞–π–ª—ã —Å–æ–¥–µ—Ä–∂–∞—Ç —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç")
        
        print(f"\nüïí –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {datetime.now().isoformat()}")
        
    except KeyboardInterrupt:
        print("\nüëã –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()