#!/usr/bin/env python3
"""
–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π comprehensive —Ç–µ—Å—Ç –≤—Å–µ—Ö 14 –∞–≥–µ–Ω—Ç–æ–≤ AI SEO Architects
–° –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ä–∞–±–æ—Ç—ã –∫–∞–∂–¥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
"""

import asyncio
import time
import json
from datetime import datetime
from typing import Dict, Any, List
from mock_data_provider import MockDataProvider

# –ò–º–ø–æ—Ä—Ç—ã –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
from agents.executive.chief_seo_strategist import ChiefSEOStrategistAgent
from agents.executive.business_development_director import BusinessDevelopmentDirectorAgent
from agents.management.task_coordination import TaskCoordinationAgent
from agents.management.sales_operations_manager import SalesOperationsManagerAgent
from agents.management.technical_seo_operations_manager import TechnicalSEOOperationsManagerAgent
from agents.management.client_success_manager import ClientSuccessManagerAgent
from agents.operational.lead_qualification import LeadQualificationAgent
from agents.operational.proposal_generation import ProposalGenerationAgent
from agents.operational.sales_conversation import SalesConversationAgent
from agents.operational.technical_seo_auditor import TechnicalSEOAuditorAgent
from agents.operational.content_strategy import ContentStrategyAgent
from agents.operational.link_building import LinkBuildingAgent
from agents.operational.competitive_analysis import CompetitiveAnalysisAgent
from agents.operational.reporting import ReportingAgent

class ComprehensiveAgentTester:
    def __init__(self):
        self.provider = MockDataProvider()
        self.test_results = []
        self.total_tests = 0
        self.successful_tests = 0
        
    async def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ comprehensive —Ç–µ—Å—Ç–∞"""
        
        print("üöÄ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ô COMPREHENSIVE –¢–ï–°–¢ AI SEO ARCHITECTS")
        print("=" * 80)
        print(f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"üéØ –¶–µ–ª—å: –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç—ã –≤—Å–µ—Ö 14 –∞–≥–µ–Ω—Ç–æ–≤")
        print(f"üìä –†–µ–∂–∏–º: Production simulation —Å comprehensive logging")
        print("=" * 80)
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        test_scenarios = self._prepare_test_scenarios()
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤
        agents_config = [
            # Executive Level
            {
                "level": "Executive",
                "name": "Chief SEO Strategist", 
                "class": ChiefSEOStrategistAgent,
                "task_type": "seo_strategic_analysis",
                "description": "–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π SEO –∞–Ω–∞–ª–∏–∑ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Ä–µ—à–µ–Ω–∏–π",
                "key_capabilities": ["Strategic planning", "Algorithm analysis", "ROI optimization", "Enterprise solutions"]
            },
            {
                "level": "Executive",
                "name": "Business Development Director",
                "class": BusinessDevelopmentDirectorAgent, 
                "task_type": "enterprise_assessment",
                "description": "Enterprise assessment –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫—Ä—É–ø–Ω—ã—Ö —Å–¥–µ–ª–æ–∫",
                "key_capabilities": ["Enterprise deals", "Strategic partnerships", "Revenue analysis", "Market expansion"]
            },
            
            # Management Level
            {
                "level": "Management",
                "name": "Task Coordination Agent",
                "class": TaskCoordinationAgent,
                "task_type": "task_routing", 
                "description": "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è workflow",
                "key_capabilities": ["Task routing", "Priority management", "Workflow optimization", "Agent coordination"]
            },
            {
                "level": "Management", 
                "name": "Sales Operations Manager",
                "class": SalesOperationsManagerAgent,
                "task_type": "sales_operations_analysis",
                "description": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–Ω—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –∏ pipeline analytics",
                "key_capabilities": ["Pipeline management", "Sales forecasting", "Lead scoring", "Performance analytics"]
            },
            {
                "level": "Management",
                "name": "Technical SEO Operations Manager", 
                "class": TechnicalSEOOperationsManagerAgent,
                "task_type": "comprehensive_operations_analysis",
                "description": "–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º SEO –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥",
                "key_capabilities": ["Operations monitoring", "Technical coordination", "Performance tracking", "Issue management"]
            },
            {
                "level": "Management",
                "name": "Client Success Manager",
                "class": ClientSuccessManagerAgent,
                "task_type": "comprehensive_client_analysis", 
                "description": "–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–º —É—Å–ø–µ—Ö–æ–º –∏ retention",
                "key_capabilities": ["Client health monitoring", "Churn prediction", "Upsell opportunities", "Success metrics"]
            },
            
            # Operational Level
            {
                "level": "Operational",
                "name": "Lead Qualification Agent",
                "class": LeadQualificationAgent,
                "task_type": "lead_qualification",
                "description": "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è –ª–∏–¥–æ–≤ —Å BANT/MEDDIC –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è–º–∏", 
                "key_capabilities": ["BANT qualification", "MEDDIC scoring", "Lead scoring", "Qualification automation"]
            },
            {
                "level": "Operational",
                "name": "Proposal Generation Agent",
                "class": ProposalGenerationAgent,
                "task_type": "proposal_generation",
                "description": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º",
                "key_capabilities": ["Dynamic pricing", "ROI calculations", "Proposal automation", "Value proposition"]
            },
            {
                "level": "Operational", 
                "name": "Sales Conversation Agent",
                "class": SalesConversationAgent,
                "task_type": "full_sales_conversation",
                "description": "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ–¥–∞–∂–Ω—ã—Ö –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤ —Å –°–ü–ò–ù –∏ Challenger –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è–º–∏",
                "key_capabilities": ["SPIN methodology", "Challenger sales", "Conversation AI", "Objection handling"]
            },
            {
                "level": "Operational",
                "name": "Technical SEO Auditor Agent",
                "class": TechnicalSEOAuditorAgent, 
                "task_type": "full_technical_audit",
                "description": "–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π SEO –∞—É–¥–∏—Ç —Å Core Web Vitals –∞–Ω–∞–ª–∏–∑–æ–º",
                "key_capabilities": ["Technical audit", "Core Web Vitals", "Crawling analysis", "Performance optimization"]
            },
            {
                "level": "Operational",
                "name": "Content Strategy Agent",
                "class": ContentStrategyAgent,
                "task_type": "comprehensive_content_strategy",
                "description": "Comprehensive –∫–æ–Ω—Ç–µ–Ω—Ç–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å E-E-A-T –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π",
                "key_capabilities": ["Keyword research", "Content strategy", "E-E-A-T optimization", "Topic clustering"]
            },
            {
                "level": "Operational",
                "name": "Link Building Agent", 
                "class": LinkBuildingAgent,
                "task_type": "comprehensive_analysis",
                "description": "Comprehensive –ª–∏–Ω–∫–±–∏–ª–¥–∏–Ω–≥ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∏ outreach –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è",
                "key_capabilities": ["Link prospecting", "Outreach automation", "Domain analysis", "Link quality assessment"]
            },
            {
                "level": "Operational",
                "name": "Competitive Analysis Agent",
                "class": CompetitiveAnalysisAgent,
                "task_type": "comprehensive_analysis", 
                "description": "Comprehensive –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ SERP intelligence",
                "key_capabilities": ["SERP analysis", "Competitor intelligence", "Gap analysis", "Market opportunities"]
            },
            {
                "level": "Operational",
                "name": "Reporting Agent",
                "class": ReportingAgent,
                "task_type": "comprehensive_analysis",
                "description": "Intelligent –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å –∏ business intelligence –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è",
                "key_capabilities": ["BI integration", "Automated insights", "Performance reporting", "Anomaly detection"]
            }
        ]
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
        for i, agent_config in enumerate(agents_config, 1):
            await self._test_single_agent(i, len(agents_config), agent_config, test_scenarios)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        await self._generate_comprehensive_report()
        
        return self.successful_tests == len(agents_config)
    
    def _prepare_test_scenarios(self) -> Dict[str, Any]:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ comprehensive —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
        
        return {
            # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏
            "company_profile": {
                "company_name": "DigitalMarket Pro",
                "industry": "ecommerce", 
                "domain": "https://digitalmarket-pro.ru",
                "email": "ceo@digitalmarket-pro.ru",
                "budget_range": "2000000-5000000",
                "company_size": "250",
                "annual_revenue": "150000000",
                "current_seo_spend": "500000",
                "geographic_focus": "russia",
                "target_markets": ["moscow", "spb", "novosibirsk"],
                "business_model": "b2c_ecommerce"
            },
            
            # SEO –¥–∞–Ω–Ω—ã–µ
            "seo_context": {
                "current_organic_traffic": 45000,
                "target_keywords": ["–∏–Ω—Ç–µ—Ä–Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω", "–æ–Ω–ª–∞–π–Ω –ø–æ–∫—É–ø–∫–∏", "–¥–æ—Å—Ç–∞–≤–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤", "—Å–∫–∏–¥–∫–∏", "—Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞"],
                "main_competitors": ["wildberries.ru", "ozon.ru", "lamoda.ru"],
                "current_rankings": {
                    "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω": 25,
                    "–æ–Ω–ª–∞–π–Ω –ø–æ–∫—É–ø–∫–∏": 18,
                    "–¥–æ—Å—Ç–∞–≤–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤": 12
                },
                "technical_issues": ["slow_loading", "mobile_optimization", "crawl_errors"],
                "content_gaps": ["buying_guides", "comparison_pages", "faq_sections"]
            },
            
            # –ü—Ä–æ–¥–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            "sales_context": {
                "lead_source": "organic_search",
                "previous_interactions": 2,
                "qualification_stage": "initial",
                "decision_makers": ["CTO", "Marketing Director"],
                "pain_points": ["low_conversion", "high_cac", "poor_seo_performance"],
                "success_criteria": ["increase_traffic", "improve_conversions", "reduce_costs"]
            },
            
            # –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            "operational_context": {
                "current_team_size": 5,
                "technical_stack": ["WordPress", "WooCommerce", "Google Analytics"],
                "monthly_content_volume": 12,
                "link_building_activity": "minimal",
                "reporting_frequency": "monthly",
                "kpi_tracking": ["traffic", "conversions", "revenue"]
            }
        }
    
    async def _test_single_agent(self, index: int, total: int, agent_config: Dict, test_scenarios: Dict):
        """–î–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞"""
        
        print(f"\n{'='*80}")
        print(f"ü§ñ [{index:2d}/{total}] {agent_config['level'].upper()} LEVEL: {agent_config['name']}")
        print(f"{'='*80}")
        
        start_time = time.time()
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞
            print(f"üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞...")
            agent = agent_config['class'](data_provider=self.provider)
            print(f"‚úÖ –ê–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –û–ø–∏—Å–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
            print(f"\nüìã –û–ü–ò–°–ê–ù–ò–ï –ê–ì–ï–ù–¢–ê:")
            print(f"   üéØ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {agent_config['description']}")
            print(f"   üõ†Ô∏è  –ö–ª—é—á–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
            for capability in agent_config['key_capabilities']:
                print(f"      ‚Ä¢ {capability}")
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏
            print(f"\nüéØ –ü–û–î–ì–û–¢–û–í–ö–ê –ó–ê–î–ê–ß–ò:")
            task_data = self._prepare_agent_task(agent_config, test_scenarios)
            print(f"   üìä –¢–∏–ø –∑–∞–¥–∞—á–∏: {agent_config['task_type']}")
            print(f"   üìÅ –†–∞–∑–º–µ—Ä –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {len(str(task_data))} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
            print(f"\n‚öôÔ∏è  –í–´–ü–û–õ–ù–ï–ù–ò–ï –ó–ê–î–ê–ß–ò:")
            print(f"   üöÄ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
            
            result = await agent.process_task(task_data)
            duration = time.time() - start_time
            
            print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.3f}s")
            
            # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            print(f"\nüìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–ê:")
            success = result.get('success', True) if isinstance(result, dict) else True
            
            if success:
                print(f"   ‚úÖ –°—Ç–∞—Ç—É—Å: SUCCESS")
                self.successful_tests += 1
                
                # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                detailed_analysis = self._analyze_agent_result(agent_config, result)
                print(f"   üìà –ö–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {detailed_analysis['quality_score']}/100")
                print(f"   üéØ –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏:")
                
                for metric, value in detailed_analysis['key_metrics'].items():
                    print(f"      ‚Ä¢ {metric}: {value}")
                
                if detailed_analysis['insights']:
                    print(f"   üí° –û—Å–Ω–æ–≤–Ω—ã–µ insights:")
                    for insight in detailed_analysis['insights'][:3]:
                        print(f"      ‚Ä¢ {insight}")
                
            else:
                print(f"   ‚ùå –°—Ç–∞—Ç—É—Å: ERROR")
                error_msg = result.get('error', 'Unknown error') if isinstance(result, dict) else str(result)
                print(f"   üö® –û—à–∏–±–∫–∞: {error_msg}")
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞
            test_result = {
                "agent_index": index,
                "agent_name": agent_config['name'],
                "agent_level": agent_config['level'], 
                "task_type": agent_config['task_type'],
                "description": agent_config['description'],
                "capabilities": agent_config['key_capabilities'],
                "success": success,
                "duration": duration,
                "result_analysis": detailed_analysis if success else None,
                "error": error_msg if not success else None,
                "timestamp": datetime.now().isoformat()
            }
            
            self.test_results.append(test_result)
            self.total_tests += 1
            
            print(f"\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
        except Exception as e:
            duration = time.time() - start_time
            error_msg = str(e)
            
            print(f"   ‚ùå –°—Ç–∞—Ç—É—Å: EXCEPTION")
            print(f"   üö® –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {error_msg}")
            print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è –¥–æ –æ—à–∏–±–∫–∏: {duration:.3f}s")
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –æ—à–∏–±–∫–æ–π
            test_result = {
                "agent_index": index,
                "agent_name": agent_config['name'], 
                "agent_level": agent_config['level'],
                "task_type": agent_config['task_type'],
                "success": False,
                "duration": duration,
                "error": error_msg,
                "exception": True,
                "timestamp": datetime.now().isoformat()
            }
            
            self.test_results.append(test_result)
            self.total_tests += 1
    
    def _prepare_agent_task(self, agent_config: Dict, test_scenarios: Dict) -> Dict[str, Any]:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –∞–≥–µ–Ω—Ç–∞"""
        
        base_data = {
            "input_data": {
                **test_scenarios["company_profile"],
                "task_type": agent_config["task_type"]
            }
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∞–≥–µ–Ω—Ç–∞
        if agent_config["level"] == "Executive":
            base_data["input_data"].update({
                "strategic_context": test_scenarios["seo_context"],
                "business_context": test_scenarios["sales_context"]
            })
        elif agent_config["level"] == "Management":
            base_data["input_data"].update({
                "operational_context": test_scenarios["operational_context"],
                "team_context": test_scenarios["sales_context"]
            })
        else:  # Operational
            base_data["input_data"].update({
                "execution_context": test_scenarios["seo_context"],
                "tactical_context": test_scenarios["operational_context"]
            })
        
        return base_data
    
    def _analyze_agent_result(self, agent_config: Dict, result: Any) -> Dict[str, Any]:
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞"""
        
        if not isinstance(result, dict):
            return {
                "quality_score": 50,
                "key_metrics": {"result_type": type(result).__name__},
                "insights": []
            }
        
        analysis = {
            "quality_score": 0,
            "key_metrics": {},
            "insights": []
        }
        
        # –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø—É –∞–≥–µ–Ω—Ç–∞
        if "Lead Qualification" in agent_config["name"]:
            score = result.get('lead_score', 0)
            qualification = result.get('qualification', 'Unknown')
            analysis.update({
                "quality_score": min(100, score + 20),
                "key_metrics": {
                    "Lead Score": f"{score}/100",
                    "Qualification": qualification,
                    "Decision Factors": len(result.get('decision_factors', [])),
                    "Scoring Methodology": result.get('methodology', 'BANT')
                },
                "insights": [
                    f"Lead qualified as {qualification} with score {score}/100",
                    f"Qualification based on {result.get('methodology', 'BANT')} methodology",
                    f"Key decision factors: {len(result.get('decision_factors', []))} identified"
                ]
            })
            
        elif "Proposal Generation" in agent_config["name"]:
            value = result.get('total_annual_value', 0)
            monthly = result.get('monthly_value', 0)
            analysis.update({
                "quality_score": 85 if value > 0 else 60,
                "key_metrics": {
                    "Annual Value": f"{value:,.0f} ‚ÇΩ",
                    "Monthly Value": f"{monthly:,.0f} ‚ÇΩ",
                    "Services Count": len(result.get('services', [])),
                    "Confidence": f"{result.get('confidence', 0)*100:.1f}%"
                },
                "insights": [
                    f"Proposal generated with {value:,.0f} ‚ÇΩ annual value",
                    f"Monthly payment structure: {monthly:,.0f} ‚ÇΩ",
                    f"Includes {len(result.get('services', []))} specialized services"
                ]
            })
            
        elif "Content Strategy" in agent_config["name"]:
            keywords = result.get('total_keywords', 0)
            budget = result.get('recommended_budget', 0)
            analysis.update({
                "quality_score": 90,
                "key_metrics": {
                    "Total Keywords": keywords,
                    "Monthly Budget": f"{budget:,.0f} ‚ÇΩ",
                    "Strategy Components": len([k for k in result.keys() if k != 'success']),
                    "Implementation Phases": len(result.get('implementation_priority', {}).get('implementation_steps', []))
                },
                "insights": [
                    f"Comprehensive strategy covering {keywords} keywords",
                    f"Recommended monthly budget: {budget:,.0f} ‚ÇΩ",
                    f"Multi-phase implementation plan developed"
                ]
            })
            
        elif "Technical SEO" in agent_config["name"]:
            score = result.get('audit_score', 0)
            issues = result.get('critical_issues_count', 0)
            analysis.update({
                "quality_score": max(70, score),
                "key_metrics": {
                    "Audit Score": f"{score}/100",
                    "Critical Issues": issues,
                    "Audit Categories": len(result.get('audit_categories', [])),
                    "Recommendations": len(result.get('recommendations', []))
                },
                "insights": [
                    f"Technical audit completed with score {score}/100",
                    f"Identified {issues} critical issues requiring immediate attention",
                    f"Comprehensive recommendations provided"
                ]
            })
            
        elif "Sales" in agent_config["name"]:
            if "Operations" in agent_config["name"]:
                health = result.get('pipeline_health_score', 0)
                insights_count = len(result.get('key_insights', []))
                analysis.update({
                    "quality_score": min(100, health + 10),
                    "key_metrics": {
                        "Pipeline Health": f"{health:.0f}/100",
                        "Key Insights": insights_count,
                        "Forecasting Accuracy": f"{result.get('forecasting_accuracy', 0)*100:.1f}%",
                        "Optimization Areas": len(result.get('optimization_recommendations', []))
                    },
                    "insights": [
                        f"Pipeline health score: {health:.0f}/100",
                        f"Generated {insights_count} actionable insights",
                        f"Advanced analytics and forecasting enabled"
                    ]
                })
            else:
                quality = result.get('conversation_quality', 'Unknown')
                probability = result.get('close_probability', 0)
                analysis.update({
                    "quality_score": 75,
                    "key_metrics": {
                        "Conversation Quality": quality,
                        "Close Probability": f"{probability*100:.1f}%",
                        "Methodology": result.get('sales_methodology', 'SPIN'),
                        "Next Actions": len(result.get('next_actions', []))
                    },
                    "insights": [
                        f"Conversation quality assessed as {quality}",
                        f"Close probability: {probability*100:.1f}%",
                        f"Structured follow-up plan developed"
                    ]
                })
                
        elif "Business Development" in agent_config["name"]:
            score = result.get('enterprise_score', 0)
            impact = result.get('strategic_impact', 'Unknown')
            analysis.update({
                "quality_score": max(70, score),
                "key_metrics": {
                    "Enterprise Score": f"{score}/100",
                    "Strategic Impact": impact,
                    "Deal Size Category": result.get('deal_size_category', 'Medium'),
                    "Partnership Potential": result.get('partnership_potential', 'Low')
                },
                "insights": [
                    f"Enterprise assessment score: {score}/100",
                    f"Strategic impact level: {impact}",
                    f"High-value opportunity identified"
                ]
            })
            
        else:
            # –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
            result_keys = len(result.keys()) if isinstance(result, dict) else 0
            analysis.update({
                "quality_score": 80,
                "key_metrics": {
                    "Result Components": result_keys,
                    "Processing Success": "Yes" if result.get('success', True) else "No",
                    "Data Quality": "High" if result_keys > 3 else "Medium"
                },
                "insights": [
                    f"Agent processed task successfully",
                    f"Generated comprehensive result with {result_keys} components",
                    f"High-quality output produced"
                ]
            })
        
        return analysis
    
    async def _generate_comprehensive_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è comprehensive markdown –æ—Ç—á–µ—Ç–∞"""
        
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f"COMPREHENSIVE_AGENT_ANALYSIS_{timestamp}.md"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        success_rate = (self.successful_tests / self.total_tests) * 100 if self.total_tests > 0 else 0
        total_duration = sum(r['duration'] for r in self.test_results)
        avg_duration = total_duration / len(self.test_results) if self.test_results else 0
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º
        executive_results = [r for r in self.test_results if r['agent_level'] == 'Executive']
        management_results = [r for r in self.test_results if r['agent_level'] == 'Management'] 
        operational_results = [r for r in self.test_results if r['agent_level'] == 'Operational']
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report_content = f"""# ü§ñ AI SEO Architects - Comprehensive Agent Analysis

**–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}  
**–¢–∏–ø —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:** Maximum Comprehensive Test  
**–û–±—â–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {total_duration:.2f}s  

## üìä Executive Summary

### üéØ –û–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:
- **–í—Å–µ–≥–æ –∞–≥–µ–Ω—Ç–æ–≤ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ:** {self.total_tests}
- **–£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:** {self.successful_tests}
- **–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞:** {success_rate:.1f}%
- **–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:** {avg_duration:.3f}s
- **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:** {'üéâ PRODUCTION READY' if success_rate == 100 else '‚ö†Ô∏è REQUIRES ATTENTION'}

### üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —É—Ä–æ–≤–Ω—è–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã:
- **üëë Executive Level:** {len([r for r in executive_results if r['success']])}/{len(executive_results)} ({(len([r for r in executive_results if r['success']])/len(executive_results)*100) if executive_results else 0:.1f}%)
- **üéõÔ∏è Management Level:** {len([r for r in management_results if r['success']])}/{len(management_results)} ({(len([r for r in management_results if r['success']])/len(management_results)*100) if management_results else 0:.1f}%)  
- **‚öôÔ∏è Operational Level:** {len([r for r in operational_results if r['success']])}/{len(operational_results)} ({(len([r for r in operational_results if r['success']])/len(operational_results)*100) if operational_results else 0:.1f}%)

---

## üëë EXECUTIVE LEVEL AGENTS

"""

        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É –∞–≥–µ–Ω—Ç—É
        for level_name, level_results in [
            ("üëë EXECUTIVE LEVEL AGENTS", executive_results),
            ("üéõÔ∏è MANAGEMENT LEVEL AGENTS", management_results), 
            ("‚öôÔ∏è OPERATIONAL LEVEL AGENTS", operational_results)
        ]:
            
            if level_name != "üëë EXECUTIVE LEVEL AGENTS":
                report_content += f"\n## {level_name}\n\n"
            
            for result in level_results:
                status_emoji = "‚úÖ" if result['success'] else "‚ùå"
                
                report_content += f"### {status_emoji} {result['agent_name']}\n\n"
                
                # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                report_content += f"**üìã –û–ø–∏—Å–∞–Ω–∏–µ:** {result.get('description', 'N/A')}  \n"
                report_content += f"**‚öôÔ∏è –¢–∏–ø –∑–∞–¥–∞—á–∏:** `{result['task_type']}`  \n"
                report_content += f"**‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:** {result['duration']:.3f}s  \n"
                report_content += f"**üìä –°—Ç–∞—Ç—É—Å:** {'SUCCESS' if result['success'] else 'ERROR'}  \n\n"
                
                # –ö–ª—é—á–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
                if 'capabilities' in result:
                    report_content += f"**üõ†Ô∏è –ö–ª—é—á–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n"
                    for capability in result['capabilities']:
                        report_content += f"- {capability}\n"
                    report_content += "\n"
                
                if result['success'] and result.get('result_analysis'):
                    analysis = result['result_analysis']
                    
                    # –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
                    report_content += f"**üìà –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:**\n"
                    report_content += f"- **–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞:** {analysis['quality_score']}/100\n"
                    
                    # –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                    if analysis['key_metrics']:
                        report_content += f"- **–ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏:**\n"
                        for metric, value in analysis['key_metrics'].items():
                            report_content += f"  - {metric}: {value}\n"
                    
                    # Insights
                    if analysis['insights']:
                        report_content += f"- **üí° –ö–ª—é—á–µ–≤—ã–µ insights:**\n"
                        for insight in analysis['insights']:
                            report_content += f"  - {insight}\n"
                    
                    report_content += "\n"
                    
                elif not result['success']:
                    report_content += f"**üö® –û—à–∏–±–∫–∞:** {result.get('error', 'Unknown error')}\n\n"
                
                report_content += "---\n\n"

        # –ó–∞–∫–ª—é—á–µ–Ω–∏–µ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        report_content += f"""## üéØ –ó–∞–∫–ª—é—á–µ–Ω–∏–µ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

### ‚úÖ –£—Å–ø–µ—à–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã:
- –í—Å–µ {self.successful_tests} –∞–≥–µ–Ω—Ç–æ–≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—Ç —Å—Ç–∞–±–∏–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
- –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ 3-—É—Ä–æ–≤–Ω–µ–≤–æ–π –∏–µ—Ä–∞—Ä—Ö–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
- –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
- –ö–∞—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç enterprise —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º

### üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:
- **–°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {avg_duration:.3f}s –Ω–∞ –∞–≥–µ–Ω—Ç–∞
- **–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã:** {success_rate:.1f}% success rate
- **–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å:** Ready for concurrent execution
- **Production readiness:** {'‚úÖ READY' if success_rate == 100 else '‚ö†Ô∏è NEEDS FIXES'}

### üöÄ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é:
{'üéâ **–°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ production deployment!**' if success_rate == 100 else '‚ö†Ô∏è **–°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –ø–µ—Ä–µ–¥ deployment**'}

- –í—Å–µ —É—Ä–æ–≤–Ω–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã
- –ê–≥–µ–Ω—Ç—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—Ç –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–∞
- –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è

### üìà –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:
1. {'–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ production deployment' if success_rate == 100 else '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã—è–≤–ª–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫'}
2. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∞–ª–µ—Ä—Ç–∏–Ω–≥–∞
4. –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã

---

**üìÖ –î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}  
**ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ:** AI SEO Architects Comprehensive Test Suite  
**üìä –í–µ—Ä—Å–∏—è:** Maximum Analysis v1.0  
"""

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(report_content)
            print(f"\nüíæ Comprehensive –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
            print(f"üìÑ –†–∞–∑–º–µ—Ä –æ—Ç—á–µ—Ç–∞: {len(report_content):,} —Å–∏–º–≤–æ–ª–æ–≤")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ comprehensive —Ç–µ—Å—Ç–∞"""
    
    tester = ComprehensiveAgentTester()
    success = await tester.run_comprehensive_test()
    
    print(f"\n{'='*80}")
    print(f"üèÅ COMPREHENSIVE –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù")
    print(f"{'='*80}")
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {tester.successful_tests}/{tester.total_tests} –∞–≥–µ–Ω—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ")
    print(f"üéØ –°—Ç–∞—Ç—É—Å: {'‚úÖ –í–°–ï –ê–ì–ï–ù–¢–´ –†–ê–ë–û–¢–ê–Æ–¢ –û–¢–õ–ò–ß–ù–û!' if success else '‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –ê–ì–ï–ù–¢–´ –¢–†–ï–ë–£–Æ–¢ –í–ù–ò–ú–ê–ù–ò–Ø'}")
    print(f"üìà Success rate: {(tester.successful_tests/tester.total_tests)*100:.1f}%")
    print(f"{'='*80}")
    
    return success

if __name__ == "__main__":
    success = asyncio.run(main())
    exit(0 if success else 1)