"""
–û—Ç–ª–∞–¥–∫–∞ Lead Qualification Agent
"""

import asyncio
import json
from datetime import datetime
from core.config import AIAgentsConfig
from agents.operational.lead_qualification import LeadQualificationAgent

async def debug_lead_qualification():
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ —Ä–∞–±–æ—Ç—ã Lead Qualification Agent"""
    
    print("üîç –û–¢–õ–ê–î–ö–ê LEAD QUALIFICATION AGENT")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    config = AIAgentsConfig()
    data_provider = config.get_data_provider()
    lead_agent = LeadQualificationAgent(data_provider=data_provider)
    
    # –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = {
        "input_data": {
            "company_name": "TechCorp Solutions",
            "contact_name": "–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞",
            "email": "anna@techcorp.ru",
            "phone": "+7-495-123-4567",
            "website": "https://techcorp.ru",
            "company_size": "150 employees",
            "industry": "SaaS",
            "lead_source": "website_form",
            "current_seo_budget": "45000",
            "goals": ["–£–≤–µ–ª–∏—á–∏—Ç—å —Ç—Ä–∞—Ñ–∏–∫"],
            "pain_points": ["–ù–∏–∑–∫–∏–µ –ø–æ–∑–∏—Ü–∏–∏"],
            "timeline": "2-3 –º–µ—Å—è—Ü–∞",
            "budget_range": "50000-100000",
            "decision_making_authority": "yes"
        }
    }
    
    print("üìã –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    for key, value in test_data["input_data"].items():
        print(f"   {key}: {value}")
    
    print("\nüèÉ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
    
    try:
        result = await lead_agent.process_task(test_data)
        
        print("\nüìä –ü–û–õ–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print("=" * 30)
        
        # –í—ã–≤–æ–¥–∏–º –í–°–ï –∫–ª—é—á–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        for key, value in result.items():
            if key == "detailed_scoring":
                print(f"üìà {key}:")
                if isinstance(value, dict):
                    for sub_key, sub_value in value.items():
                        print(f"     {sub_key}: {sub_value}")
                else:
                    print(f"     {value}")
            else:
                print(f"üìå {key}: {value}")
        
        print("\nüéØ –ö–õ–Æ–ß–ï–í–´–ï –ü–†–û–ë–õ–ï–ú–´:")
        issues = []
        
        if result.get("final_score") is None:
            issues.append("‚ùå final_score is None - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        
        if result.get("classification") is None:
            issues.append("‚ùå classification is None - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
        
        if result.get("estimated_deal_value", 0) == 0:
            issues.append("‚ö†Ô∏è estimated_deal_value is 0 - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å > 0")
        
        if not issues:
            print("‚úÖ –í—Å–µ –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        else:
            for issue in issues:
                print(f"   {issue}")
                
        return result
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        print("üìú –ü–û–õ–ù–ê–Ø TRACEBACK:")
        traceback.print_exc()
        return None

if __name__ == "__main__":
    result = asyncio.run(debug_lead_qualification())
