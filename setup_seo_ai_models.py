#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SEO AI Models –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
"""

import subprocess
import sys
import os
from pathlib import Path
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


def run_command(command: str, description: str = "") -> bool:
    """
    –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ shell –∫–æ–º–∞–Ω–¥—ã —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    
    Args:
        command: –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        description: –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        
    Returns:
        bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    try:
        logger.info(f"üîß {description or command}")
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        if result.stdout:
            logger.info(f"‚úÖ {result.stdout.strip()}")
        return True
    except subprocess.CalledProcessError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        if e.stderr:
            logger.error(f"Stderr: {e.stderr}")
        return False


def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        logger.error("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ")
        return False
    logger.info(f"‚úÖ Python {version.major}.{version.minor}.{version.micro}")
    return True


def install_requirements():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏–∑ requirements.txt"""
    logger.info("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    commands = [
        ("pip install --upgrade pip", "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip"),
        ("pip install -r requirements.txt", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"),
    ]
    
    for command, description in commands:
        if not run_command(command, description):
            return False
    
    return True


def setup_spacy_model():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ spaCy –º–æ–¥–µ–ª–∏"""
    logger.info("üß† –ù–∞—Å—Ç—Ä–æ–π–∫–∞ spaCy –º–æ–¥–µ–ª–∏...")
    
    commands = [
        ("python -m spacy download en_core_web_sm", "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–π –º–æ–¥–µ–ª–∏ spaCy"),
        ("python -c 'import spacy; nlp = spacy.load(\"en_core_web_sm\"); print(\"SpaCy –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ\")'", "–ü—Ä–æ–≤–µ—Ä–∫–∞ spaCy –º–æ–¥–µ–ª–∏")
    ]
    
    for command, description in commands:
        if not run_command(command, description):
            logger.warning(f"‚ö†Ô∏è {description} –Ω–µ —É–¥–∞–ª–æ—Å—å. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
    
    return True


def setup_playwright():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Playwright –±—Ä–∞—É–∑–µ—Ä–æ–≤"""
    logger.info("üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Playwright...")
    
    commands = [
        ("playwright install", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—Ä–∞—É–∑–µ—Ä–æ–≤ Playwright"),
        ("playwright install-deps", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
    ]
    
    for command, description in commands:
        if not run_command(command, description):
            logger.warning(f"‚ö†Ô∏è {description} –Ω–µ —É–¥–∞–ª–æ—Å—å. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
    
    return True


def clone_seo_ai_models():
    """–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è seo-ai-models"""
    seo_models_path = Path("./seo_ai_models")
    
    if seo_models_path.exists():
        logger.info("‚úÖ seo-ai-models —É–∂–µ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω")
        return True
    
    logger.info("üì• –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ seo-ai-models...")
    
    command = "git clone https://github.com/Andrew821667/seo-ai-models.git ./seo_ai_models"
    if run_command(command, "–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ seo-ai-models —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"):
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π seo-ai-models
        if Path("./seo_ai_models/requirements.txt").exists():
            return run_command("pip install -r ./seo_ai_models/requirements.txt", 
                              "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π seo-ai-models")
        return True
    
    return False


def create_config_file():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    config_content = """# SEO AI Models Configuration
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å seo-ai-models

[seo_ai_models]
# –ü—É—Ç—å –∫ seo-ai-models
path = "./seo_ai_models"

# –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã (mock/real)
mode = "real"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
enable_seo_advisor = true
enable_eeat_analyzer = true
enable_content_analyzer = true
enable_semantic_analyzer = true
enable_unified_parser = true
enable_rank_predictor = true

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
cache_enabled = true
cache_ttl = 3600
max_concurrent_requests = 5

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_level = "INFO"
log_seo_ai_models = true
"""
    
    config_path = Path("./seo_ai_models_config.ini")
    try:
        with open(config_path, "w", encoding="utf-8") as f:
            f.write(config_content)
        logger.info("‚úÖ –°–æ–∑–¥–∞–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª: seo_ai_models_config.ini")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False


def run_integration_test():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    logger.info("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
    
    test_script = '''
import asyncio
from core.data_providers.static_provider import StaticDataProvider

async def test_integration():
    try:
        config = {
            "seo_ai_models_path": "./seo_ai_models",
            "mock_mode": False
        }
        
        provider = StaticDataProvider(config)
        await asyncio.sleep(2)  # –í—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        
        # –¢–µ—Å—Ç health check
        health = await provider.health_check()
        print(f"Health check: {health}")
        
        print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        print("üé≠ –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ MOCK —Ä–µ–∂–∏–º–µ")
        return False

if __name__ == "__main__":
    asyncio.run(test_integration())
'''
    
    try:
        with open("test_integration.py", "w") as f:
            f.write(test_script)
        
        success = run_command("python test_integration.py", "–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ SEO AI Models")
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if os.path.exists("test_integration.py"):
            os.remove("test_integration.py")
        
        return success
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    logger.info("üöÄ –ù–∞—á–∞–ª–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SEO AI Models –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
    
    steps = [
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ Python –≤–µ—Ä—Å–∏–∏", check_python_version),
        ("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π", install_requirements),
        ("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ spaCy –º–æ–¥–µ–ª–∏", setup_spacy_model),
        ("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Playwright", setup_playwright),
        ("–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ seo-ai-models", clone_seo_ai_models),
        ("–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", create_config_file),
        ("–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏", run_integration_test)
    ]
    
    success_count = 0
    for step_name, step_func in steps:
        logger.info(f"üìç –®–∞–≥: {step_name}")
        try:
            if step_func():
                success_count += 1
                logger.info(f"‚úÖ {step_name} - –£–°–ü–ï–•")
            else:
                logger.warning(f"‚ö†Ô∏è {step_name} - –ß–ê–°–¢–ò–ß–ù–û")
        except Exception as e:
            logger.error(f"‚ùå {step_name} - –û–®–ò–ë–ö–ê: {e}")
    
    logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{len(steps)} —à–∞–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
    
    if success_count >= 5:  # –ú–∏–Ω–∏–º—É–º 5 –∏–∑ 7 —à–∞–≥–æ–≤
        logger.info("üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        logger.info("üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        logger.info("   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python test_agents_integration.py")
        logger.info("   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É enhanced –º–µ—Ç–æ–¥–æ–≤")
        logger.info("   3. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ seo_ai_models_config.ini")
        return True
    else:
        logger.warning("‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏")
        logger.info("üé≠ –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ MOCK —Ä–µ–∂–∏–º–µ")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)